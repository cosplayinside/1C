
&НаСервере
Процедура ПолучитьСеансы() Экспорт
	
	Если Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr") > 0 Тогда
		// серверный вариант
		Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=");
		ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 6);
		ИмяСервера = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
		// теперь ищем имя базы
		Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Ref=");
		ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 5);
		ИмяБазы = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
	Иначе
		// для других способов подключения алгоритм не актуален
		Возврат;
	КонецЕсли;
	
	Коннектор = Новый COMОбъект("v83.COMConnector");
	Агент = Коннектор.ConnectAgent(ИмяСервера);
	Кластеры = Агент.GetClusters();
	Для каждого Кластер из Кластеры Цикл
		АдминистраторКластера = "Имя администратора кластера";
		ПарольКластера = "Пароль администратора кластера";
		Агент.Authenticate(Кластер, АдминистраторКластера, ПарольКластера);
		Процессы = Агент.GetWorkingProcesses(Кластер);
		Для каждого Процесс из Процессы Цикл
			Порт = Процесс.MainPort;
			// теперь есть адрес и порт для подключения к рабочему процессу
			РабПроц = Коннектор.ConnectWorkingProcess(ИмяСервера + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
			РабПроц.AddAuthentication("Имя администратора БД", "Пароль администратора БД");
			
			ИнформационнаяБаза = "";
			
			Базы = Агент.GetInfoBases(Кластер);
			Для каждого База из Базы Цикл
				Если База.Name = ИмяБазы Тогда
					ИнформационнаяБаза = База;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИнформационнаяБаза = "" Тогда
				// база не найдена
			КонецЕсли;
			
			Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
			Для каждого Сеанс из Сеансы Цикл
				Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "designer" ИЛИ нРег(Сеанс.AppID) = "comconsole" Тогда
					// если это сеансы конфигуратора или фонового задания, то не отключаем
					Продолжить;
				КонецЕсли;
				Если Сеанс.UserName = ИмяПользователя() Тогда
					// это текущий пользователь
					Продолжить;
				КонецЕсли;
				Агент.TerminateSession(Кластер, Сеанс);
			КонецЦикла;
			
			СоединенияБазы = Агент.GetInfoBaseConnections(Кластер, ИнформационнаяБаза);
			// Разорвать соединения клиентских приложений.
			Для Каждого Соединение Из СоединенияБазы Цикл
				Если нРег(Соединение.Application) = "backgroundjob" ИЛИ нРег(Соединение.Application) = "designer" ИЛИ нРег(Сеанс.AppID) = "comconsole" Тогда
					// если это соединение конфигуратора или фонового задания, то не отключаем
					Продолжить;
				КонецЕсли;
				Если Соединение.UserName = ИмяПользователя() Тогда
					// это текущий пользователь
					Продолжить;
				КонецЕсли;
				РабПроц.Disconnect(Соединение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Функция - Получить остатки по складу
//
// Параметры:
//  МассивСкладов		 - Массив - Массив элементов типа "СправочникСсылка.Склады", - по данному массиву будут сформированы свободные остатки. (В наличии - Резерв) 
//  ТаблицаНоменклатуры	 - ТаблицаЗначений	 - Таблица с колонками "Номенклатура" и "Характеристика" для отбора по искомым остаткам.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений с колонками "Склад", "Номенклатура", "Характеристика", "ВНаличии", "ВРезерве"
//
Функция ПолучитьОстаткиПоСкладу(МассивСкладов, ТаблицаНоменклатуры = Неопределено) Экспорт
	
	ЗапросОстатков = Новый Запрос;
	
	Если ТаблицаНоменклатуры <> Неопределено Тогда
		ЗапросОстатков.Текст = ПолучитьТекстЗапросаОстатков();
	Иначе
	  	ЗапросОстатков.Текст = ПолучитьТекстЗапросОстатковБезУказанияНоменклатуры();
	КонецЕсли;

	ЗапросОстатков.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ЗапросОстатков.УстановитьПараметр("Склад", МассивСкладов);
	
	Если ТаблицаНоменклатуры <> Неопределено Тогда
		ЗапросОстатков.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	КонецЕсли;
	
	Возврат ЗапросОстатков.Выполнить();
	
КонецФункции

// Функция - Сформировать дерево расстояний
// Формирует дерево значений с расстояниями в КМ от основного склада до остальных складов. Показывает аналитику по свободным остаткам товаров.
// Отображаются только те склады, где есть остатки по указанным отборам или где в принципе где есть остатки.
//
// Параметры:
//  ОсновнойСклад			 - СправочникСсылка.Склады	 - Основной склад, вокруг которого формируется дерево расстояний
//  ТаблицаНоменклатуры		 - ТаблицаЗначений	 - Таблица значений с колонками "Номенклатура" и "Характеристика". По данным отборам будут сформированы остатки на складах.
//  ОграничитьРасстояниеВКМ	 - Число	 - Ограничение по дальности километража от проверяемого склада до основного склада. Если километраж превышает указанный, то такое значение будет обрезано.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Дерево значений, которое содержит в себе колонки "Склад" (Составное значение из "СправочникСсылка.Склад", "СправочникСсылка.Номенклатура", "СправочникСсылка.ХарактеристикиНоменклатуры"),
//  "Широта", "Долгота", "РасстояниеДоОсновногоСклада", "Остаток", "Артикул" (Артикул + Код).
//
Функция СформироватьДеревоРасстояний(ОсновнойСклад, ТаблицаНоменклатуры = Неопределено, ОграничитьРасстояниеВКМ = 10000) Экспорт
	
	ЗапросДерева = Новый Запрос;
	
	ТаблицаСкладовСКоординатами = ПолучитьВсеСкладыСКоординатами(ОсновнойСклад, , Истина);
	МассивСкладовСКоординатами = ТаблицаСкладовСКоординатами.ВыгрузитьКолонку("Склад");
	
	ОтсортироватьМассивСкладовПоРасстоянию(ОсновнойСклад, МассивСкладовСКоординатами, ОграничитьРасстояниеВКМ);
	
	Если ТаблицаНоменклатуры <> Неопределено Тогда
		ЗапросДерева.Текст = ПолучитьТекстЗапросаДереваОстатковРасстояний();
		ЗапросДерева.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Иначе
	  	ЗапросДерева.Текст = ПолучитьТекстЗапросаДереваОстатковРасстоянийБезНоменклатуры();
	КонецЕсли;
	
	ЗапросДерева.УстановитьПараметр("Склады", МассивСкладовСКоординатами);
	ЗапросДерева.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
	РезультатДерево = ЗапросДерева.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОписаниеСоставнойКолонкиГруппировки = Новый ОписаниеТипов("СправочникСсылка.Склады, СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры");
	РезультатДерево.Колонки.Добавить("Группа", ОписаниеСоставнойКолонкиГруппировки);
	
	Для Каждого СтрокаДерева Из РезультатДерево.Строки Цикл
		СтруктураКоординат                       = ЗапросКоординатСклада(СтрокаДерева.Склад, ОсновнойСклад);	
		СтрокаДерева.Широта                      = СтруктураКоординат.Широта;
		СтрокаДерева.Долгота                     = СтруктураКоординат.Долгота;
		СтрокаДерева.РасстояниеДоОсновногоСклада = СтруктураКоординат.РасстояниеДоОсновногоСклада / 1000; //из М в КМ
		СтрокаДерева.Группа                      = СтрокаДерева.Склад;
		Для Каждого СтрокаДереваНоменклатура Из СтрокаДерева.Строки Цикл
			СтрокаДереваНоменклатура.Артикул = СтрокаДереваНоменклатура.Номенклатура.Артикул + " / " + СтрокаДереваНоменклатура.Номенклатура.Код;
			СтрокаДереваНоменклатура.Группа  = СтрокаДереваНоменклатура.Номенклатура;
			Для Каждого СтрокаДереваХарактеристика Из СтрокаДереваНоменклатура.Строки Цикл
				СтрокаДереваХарактеристика.Группа  = СтрокаДереваХарактеристика.Характеристика;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	РезультатДерево.Колонки.Удалить(РезультатДерево.Колонки.Найти("Склад"));
	РезультатДерево.Колонки["Группа"].Имя = "Склад";
	
	РезультатДерево.Строки.Сортировать("РасстояниеДоОсновногоСклада ВОЗР", Ложь);
	
	Возврат РезультатДерево;
	
КонецФункции

// Процедура - Отсортировать массив складов по расстоянию
// Из массива складов отсекает те значения, у которых расстояние в КМ до основного склада больше, чем указанное ограничение.
//
// Параметры:
//  ОсновнойСклад			 - СправочникСсылка.Склады	 -  Склад, до которого рассчитывается расстояние
//  МассивСкладов			 - Массив - Массив элементов типа "СправочникСсылка.Склады", склады, от которых рассчитывается расстояние до основного склада 
//  ОграничитьРасстояниеВКМ	 - Число  - Ограничение по километражу до основного склада. 
//
Процедура ОтсортироватьМассивСкладовПоРасстоянию(ОсновнойСклад, МассивСкладов, ОграничитьРасстояниеВКМ = 10000)
	
	МассивУдаления = Новый Массив();
	
	Для Каждого ТекСклад Из МассивСкладов Цикл
		СтруктураКоординат = ЗапросКоординатСклада(ТекСклад, ОсновнойСклад);
		Если (СтруктураКоординат.РасстояниеДоОсновногоСклада / 1000) > ОграничитьРасстояниеВКМ Тогда
			МассивУдаления.Добавить(ТекСклад);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекУдаление Из МассивУдаления Цикл
		МассивСкладов.Удалить(МассивСкладов.Найти(ТекУдаление));
	КонецЦикла;
	
КонецПроцедуры

// Функция - Запрос координат склада
// Возвращает широту, долготу и расстояние до основного склада по ссылке
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады	 - Склад, по которому происходит поиск координат 
//  ОсновнойСклад - СправочникСсылка.Склады - Склад, до которого рассчитывается растояние (Необязательный)
//
// Возвращаемое значение:
//  Структура - Структура координат. Склад (СправочникСсылка.Склады), Широта (Строка), Долгота (Строка), РасстояниеДоОсновогоСклада (Число) 
//
Функция ЗапросКоординатСклада(Склад, ОсновнойСклад = Неопределено) Экспорт
	
	Результат = Новый Структура("Склад, Широта, Долгота, РасстояниеДоОсновногоСклада", Неопределено, "", "", "9999999");
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	АС_PIS_ПриоритетыСкладов.Склад КАК Склад,
	|	АС_PIS_ПриоритетыСкладов.Широта КАК Широта,
	|	АС_PIS_ПриоритетыСкладов.Долгота КАК Долгота";
	Если ОсновнойСклад <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ",
		| 0 КАК РасстояниеДоОсновногоСклада";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	РегистрСведений.АС_PIS_ПриоритетыСкладов КАК АС_PIS_ПриоритетыСкладов
	|ГДЕ
	|	АС_PIS_ПриоритетыСкладов.Склад = &Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	АС_PIS_ПриоритетыСкладов.Широта,
	|	АС_PIS_ПриоритетыСкладов.Долгота,
	|	АС_PIS_ПриоритетыСкладов.Склад";
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатЗапрос = Запрос.Выполнить();
	Если НЕ РезультатЗапрос.Пустой() Тогда
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		Если ВыборкаЗапрос.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, ВыборкаЗапрос);
			
			Если ОсновнойСклад <> Неопределено Тогда
				КоординатыОсновногоСклада = ЗапросКоординатСклада(ОсновнойСклад);
				Результат.РасстояниеДоОсновногоСклада = РазностьКоординатВМетрах(ВыборкаЗапрос.Широта, ВыборкаЗапрос.Долгота,
				КоординатыОсновногоСклада.Широта, КоординатыОсновногоСклада.Долгота);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Отобразить запись
//
// Параметры:
//  ВидЗаписи	 - Строка	 - "Создание", "Изменение", "Удаление", вид записи в регистр координат
//  Склад		 - СправочникСсылка.Склады	 - Склад, которому присвоены координаты 
//  Широта		 - Строка	 - Широта в системе координат (Необязательный)
//  Долгота		 - Строка	 - Долгота в системе координат (Необзятельный) 
//
Процедура ОтобразитьЗапись(ВидЗаписи, Склад, Долгота = "", Широта = "") Экспорт
	
	ТекстСообщения = "";
	
	Если ВидЗаписи = "Создание" Тогда
		ТекстСообщения = "Создана новая запись о координатах склада. 
		|Склад: %1,
		|Широта: %2,
		|Долгота: %3.";	
	ИначеЕсли ВидЗаписи = "Изменение" Тогда
		ТекстСообщения = "Изменена запись о координатах склада. Новые данные: 
		|Склад: %1,
		|Широта: %2,
		|Долгота: %3.";	
	ИначеЕсли ВидЗаписи = "Удаление" Тогда
		ТекстСообщения = "Удалена запись о координатах склада.
		| Склад: %1";
		ТекстСообщения = СтрШаблон(ТекстСообщения, Склад);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	Если ВидЗаписи = "Создание" ИЛИ ВидЗаписи = "Изменение" Тогда
		ТекстСообщения = СтрШаблон(ТекстСообщения, Склад, Широта, Долгота);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Сформировать остатки и ближайшие склады
// Функция формирует табличный документ, где отображены склады, которые находятся рядом с основным и остатки на этих складах
//
// Параметры:
//  Склад				 - СправочникСсылка.Склады	 - Основной склад, для которого рассчитываются значения
//  КоличествоЗаписей	 - Число	 - Ограничение кол-ва записей по другим складам, которые находятся рядом (Необязательно)
//  ОграничениеКМ		 - Число	 - Ограничение по километражу для складов, которые находятся рядом (Необязательно)
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Табличный документ с аналитикой склада
//
Функция СформироватьОстаткиИБлижайшиеСклады(Склад, КоличествоЗаписей = 0, ОграничениеКМ = 10000) Экспорт
	
	ДокументОстатков = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("АС_PIS_ОстататкиНаСкладе");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаОстатков = Макет.ПолучитьОбласть("ОстаткиШапка");
	
	СтруктураКоординат = ЗапросКоординатСклада(Склад);
	
	ОбластьШапка.Параметры.Широта  = СтруктураКоординат.Широта;
	ОбластьШапка.Параметры.Долгота = СтруктураКоординат.Долгота;
	ОбластьШапка.Параметры.Организация = Склад.Арт_Организация;
	ОбластьШапка.Параметры.Склад = Склад.Наименование;
	ОбластьШапка.Параметры.Дата = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	
	ДокументОстатков.Вывести(ОбластьШапка);
	
	
	РасстоянияШапка = Макет.ПолучитьОбласть("РасстоянияШапка");
	ДокументОстатков.Вывести(РасстоянияШапка);
	
	ТЗРасстояний = АС_PIS_ОбщегоНазначенияСервер.ПолучитьТаблицуРасстоянийОтОсновногоСклада(Склад, КоличествоЗаписей);
	
	МассивСкладов = Новый Массив();
	МассивСкладов.Добавить(Склад);
	
	Для Каждого ТекСклад Из ТЗРасстояний Цикл
		Если ТекСклад.РасстояниеДоОсновногоСклада <= ОграничениеКМ Тогда
			МассивСкладов.Добавить(ТекСклад.Склад);
			ОбластьСтрокаРасстояний = Макет.ПолучитьОбласть("РасстоянияСтрока");
			ОбластьСтрокаРасстояний.Параметры.Заполнить(ТекСклад);
			ДокументОстатков.Вывести(ОбластьСтрокаРасстояний);
		КонецЕсли;
	КонецЦикла;
	
	ДокументОстатков.Вывести(ОбластьШапкаОстатков);
	
	РезультатЗапросаОстатков = ПолучитьОстаткиПоСкладу(МассивСкладов);
	
	ВыборкаСклады = РезультатЗапросаОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	
	СчетчикСклад = 1;
	Пока ВыборкаСклады.Следующий() Цикл
		СчетчикНоменклатура = 1;
		ОбластьСтрокаСклад = Макет.ПолучитьОбласть("ОстаткиСтрокаСклад");
		ОбластьСтрокаСклад.Параметры.N       = Строка(СчетчикСклад);
		ОбластьСтрокаСклад.Параметры.Склад   = ВыборкаСклады.Склад;
		ОбластьСтрокаСклад.Параметры.Остаток = ВыборкаСклады.СвободныйОстаток;
		ДокументОстатков.Вывести(ОбластьСтрокаСклад);
		ВыборкаНоменклатуры = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			СчетчикХарактеристика = 1;
			ОбластьСтрокаНоменклатуры = Макет.ПолучитьОбласть("ОстаткиСтрока");
			ОбластьСтрокаНоменклатуры.Параметры.N            = Строка(СчетчикСклад) + "." + Строка(СчетчикНоменклатура);
			ОбластьСтрокаНоменклатуры.Параметры.Номенклатура = Строка(ВыборкаСклады.Склад) + " / " + Строка(ВыборкаНоменклатуры.Номенклатура) + " (" + Строка(ВыборкаНоменклатуры.Номенклатура.Артикул) + ")";
			ОбластьСтрокаНоменклатуры.Параметры.Остаток      = ВыборкаНоменклатуры.СвободныйОстаток;
			ДокументОстатков.Вывести(ОбластьСтрокаНоменклатуры);
			ВыборкаХарактеристики = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаХарактеристики.Следующий() Цикл
				ОбластьСтрокаХарактеристики = Макет.ПолучитьОбласть("ОстаткиСтрокаХарактеристика");	
				ОбластьСтрокаХарактеристики.Параметры.N              = Строка(СчетчикСклад) + "." + Строка(СчетчикНоменклатура) + "." + Строка(СчетчикХарактеристика);
				ОбластьСтрокаХарактеристики.Параметры.Характеристика = Строка(ВыборкаСклады.Склад) + " / " + Строка(ВыборкаНоменклатуры.Номенклатура) + " (" + Строка(ВыборкаНоменклатуры.Номенклатура.Артикул) + ") / " +Строка(ВыборкаХарактеристики.Характеристика);
				ОбластьСтрокаХарактеристики.Параметры.Остаток        = ВыборкаХарактеристики.СвободныйОстаток;
				ДокументОстатков.Вывести(ОбластьСтрокаХарактеристики);
				СчетчикХарактеристика = СчетчикХарактеристика + 1;
			КонецЦикла;
			СчетчикНоменклатура = СчетчикНоменклатура + 1;
		КонецЦикла;
		СчетчикСклад = СчетчикСклад + 1;
	КонецЦикла;
	
	Возврат ДокументОстатков;
	
КонецФункции

// Функция - Получить все склады с координатами
// Функция получает координаты по всем складам, у которых они указаны. Далее формирует таблицу значений из складов и их координат и возвращает её.
//
// Параметры:
//  ИсключитьОсновной	 - СправочникСсылка.Склады	 - Ссылка на основной склад, по которому происходят расчеты. Исключает данный склад из результата функции.
//  КоличествоЗаписей	 - Число	 - Ограничение по количеству записей (Необязательный) 
//  ТолькоСклады		 - Булево	 - Если Истина, то функция вернет все склады с координатами и значения координат, - широту и долготу. Если Ложь, то вернет только ссылки на склады (Необязательный)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица со списком всех складов, у которых указаны координаты
//
Функция ПолучитьВсеСкладыСКоординатами(ИсключитьОсновной = Неопределено, КоличествоЗаписей = 0, ТолькоСклады = Ложь) Экспорт
	
	ЗапросСкладов = Новый Запрос;
	ЗапросСкладов.Текст = "ВЫБРАТЬ %КоличествоЗаписей%
	|	АС_PIS_ПриоритетыСкладов.Склад КАК Склад";
	
	Если НЕ ТолькоСклады Тогда
		ЗапросСкладов.Текст = ЗапросСкладов.Текст + ",
		|	АС_PIS_ПриоритетыСкладов.Широта КАК Широта,
		|	АС_PIS_ПриоритетыСкладов.Долгота КАК Долгота,
		|	0 КАК РасстояниеДоОсновногоСклада";
	КонецЕсли;
	
	ЗапросСкладов.Текст = ЗапросСкладов.Текст + "
	|ИЗ
	|	РегистрСведений.АС_PIS_ПриоритетыСкладов КАК АС_PIS_ПриоритетыСкладов";
	
	Если КоличествоЗаписей > 0 Тогда
		ЗапросСкладов.Текст = СтрЗаменить(ЗапросСкладов.Текст, "%КоличествоЗаписей%", "ПЕРВЫЕ " + КоличествоЗаписей);
	Иначе
		ЗапросСкладов.Текст = СтрЗаменить(ЗапросСкладов.Текст, "%КоличествоЗаписей%", "");
	КонецЕсли;
	Если ИсключитьОсновной <> Неопределено Тогда
		ЗапросСкладов.Текст = ЗапросСкладов.Текст + "
		|ГДЕ
		|	АС_PIS_ПриоритетыСкладов.Склад <> &Склад";
		ЗапросСкладов.УстановитьПараметр("Склад", ИсключитьОсновной);
	КонецЕсли;
	
	Результат = ЗапросСкладов.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Функция - Получить таблицу расстояний от основного склада
// Функция формирует значения по всем складам, у которых указаны координаты. От этих складов рассчитывыет расстояние в КМ до основного склада.
//
// Параметры:
//  ОсновнойСклад		 - СправочникСсылка.Склады	 - Основной склад, от которого рассчитывают расстояние все остальные склады
//  КоличествоЗаписей	 - Число	 - Ограничение по количеству записей
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений с колонками "Склад", "Долгота", "Широта", "РасстояниеДоОсновногоСклада"
//
Функция ПолучитьТаблицуРасстоянийОтОсновногоСклада(ОсновнойСклад, КоличествоЗаписей = 0) Экспорт
	
	ВсеСклады = ПолучитьВсеСкладыСКоординатами(ОсновнойСклад, КоличествоЗаписей);
	СтруктураКоординатОсновногоСклада = ЗапросКоординатСклада(ОсновнойСклад);
	
	ДолготаОсновногоСклада = СтруктураКоординатОсновногоСклада.Долгота;
	ШиротаОсновногоСклада  = СтруктураКоординатОсновногоСклада.Широта;
	
	Для Каждого Склад Из ВсеСклады Цикл
		Попытка
			РазностьВМетрах = РазностьКоординатВМетрах(
			ШиротаОсновногоСклада, ДолготаОсновногоСклада,
			Склад.Широта,          Склад.Долгота);
	
			Склад.РасстояниеДоОсновногоСклада = РазностьВМетрах / 1000;
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка PIS", УровеньЖурналаРегистрации, Метаданные.Справочники.Склады, ОсновнойСклад, ОписаниеОшибки());
			Склад.РасстояниеДоОсновногоСклада = 999999;
		КонецПопытки;
	КонецЦикла;
	
	ВсеСклады.Сортировать("РасстояниеДоОсновногоСклада ВОЗР");
		
	Возврат ВсеСклады;
	
КонецФункции

// Функция - Сформировать таблицу номенклатуры
// Функция формирует таблицу значений, которая используется в отборе для формирования таблицы или дерева расстояний.
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура	 - Номенклатура, которая попадет в отбор по остаткам складов
//  Характеристика	 - СправочникСсылка.Характеристика	 - Характеристика (связана с номенклатурой), которая попадет в отбор по остаткам складов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с одной строкой, которая формируется из переданной номенклатуры и характеристики. Нужна для отбора формирования дерева расстояний.
//
Функция СформироватьТаблицуНоменклатуры(Номенклатура, Характеристика) Экспорт
	
	ОписаниеХарактеристики = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ОписаниеНоменклатуры   = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   ОписаниеНоменклатуры);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеХарактеристики);
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		СтрокаТаблицы = ТаблицаНоменклатуры.Добавить();
		СтрокаТаблицы.Номенклатура   = Номенклатура;
		СтрокаТаблицы.Характеристика = Характеристика;
	КонецЕсли;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

#Область Разность_Координат

Функция ABS(Число)
   Если Число<0 Тогда 
       Возврат -1*Число; 
   Иначе 
       Возврат Число; 
   КонецЕсли; 
КонецФункции 

Функция РазностьКоординатВМетрах(Широта1, Долгота1, Широта2, Долгота2) Экспорт
	
	P       = 3.14; 
	Радиус  = 6372795; 
	
	Расстояние = 
	
	Радиус      * ATAN(Sqrt(Pow(COS(P      * Широта2  / 180)
	* SIN(ABS(P * Долгота2 / 180  - P      * Долгота1 / 180)), 2)
	+ POW(COS(P * Широта1  / 180) * SIN(P  * Широта2  / 180)
	- SIN(P     * Широта1  / 180) * COS(P  * Широта2  / 180)
	* COS(ABS(P * Долгота2 / 180  - P      * Долгота1 / 180)), 2))
	/ (SIN(P    * Широта1  / 180) * SIN(P  * Широта2  / 180)
	+ COS(P     * Широта1  / 180) * COS(P  * Широта2  / 180)
	* COS(ABS(P * Долгота2 / 180  - P      * Долгота1 / 180)))); 
	
	Возврат Расстояние;    
	
КонецФункции

Функция РазностьКоординатВГрадусах(Широта1, Долгота1, Широта2, Долгота2) Экспорт
//    COS(d) = SIN(φА)*SIN(φB) + COS(φА)*COS(φB)*COS(λА − λB),
//    где φА и φB & широты, λА, λB & долготы данных пунктов, d & расстояние между пунктами, измеряемое в радианах 
//      длиной дуги большого круга земного шара. 
//    Расстояние между пунктами, измеряемое в километрах, определяется по формуле:
//    L = d·R,
//    где R = 6371 км & средний радиус земного шара.

	СреднийРадиус = 6371;                                                                                     
	Расстояние = (ASIN(SIN(Широта1) * SIN(Широта2) + COS(Широта1) * COS(Широта2) * COS(Долгота1 - Долгота2))) * СреднийРадиус;
    Возврат Расстояние;     
КонецФункции  

#КонецОбласти

#Область Тексты_Запросов

Функция ПолучитьТекстЗапросаДереваОстатковРасстоянийБезНоменклатуры()
	
	Текст = "ВЫБРАТЬ
	        |	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	        |	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	        |	СвободныеОстаткиОстатки.Склад КАК Склад,
	        |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК ВНаличии,
	        |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ВРезерве,
	        |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток,
	        |	СвободныеОстаткиОстатки.Номенклатура.Артикул + "" / "" + СвободныеОстаткиОстатки.Номенклатура.Код КАК НоменклатураАртикул
	        |ПОМЕСТИТЬ ВТ_Остатки
	        |ИЗ
	        |	РегистрНакопления.СвободныеОстатки.Остатки(&ТекущаяДата, Склад В (&Склады)) КАК СвободныеОстаткиОстатки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	0 КАК Широта,
	        |	0 КАК Долгота,
	        |	0 КАК РасстояниеДоОсновногоСклада,
	        |	ВТ_Остатки.Номенклатура КАК Номенклатура,
	        |	ВТ_Остатки.Характеристика КАК Характеристика,
	        |	ВТ_Остатки.СвободныйОстаток КАК Остаток,
	        |	ВТ_Остатки.Склад КАК Склад,
	        |	ВТ_Остатки.НоменклатураАртикул КАК Артикул
	        |ИЗ
	        |	ВТ_Остатки КАК ВТ_Остатки
	        |ИТОГИ
	        |	СУММА(Остаток)
	        |ПО
	        |	Склад,
	        |	Номенклатура";
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьТекстЗапросаДереваОстатковРасстояний()
	
	Текст = "ВЫБРАТЬ
	        |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	        |	ТаблицаНоменклатуры.Характеристика КАК Характеристика
	        |ПОМЕСТИТЬ ВТ_ТаблицаНоменклатуры
	        |ИЗ
	        |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	        |	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	        |	СвободныеОстаткиОстатки.Склад КАК Склад,
	        |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК ВНаличии,
	        |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ВРезерве,
	        |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток,
	        |	СвободныеОстаткиОстатки.Номенклатура.Артикул + "" / "" + СвободныеОстаткиОстатки.Номенклатура.Код КАК НоменклатураАртикул
	        |ПОМЕСТИТЬ ВТ_Остатки
	        |ИЗ
	        |	РегистрНакопления.СвободныеОстатки.Остатки(
	        |			&ТекущаяДата,
	        |			Склад В (&Склады)
	        |				И Номенклатура В
	        |					(ВЫБРАТЬ
	        |						ВТ_ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	        |					ИЗ
	        |						ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры)
	        |				И Характеристика В
	        |					(ВЫБРАТЬ
	        |						ВТ_ТаблицаНоменклатуры.Характеристика КАК Характеристика
	        |					ИЗ
	        |						ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры)) КАК СвободныеОстаткиОстатки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	0 КАК Широта,
	        |	0 КАК Долгота,
	        |	0 КАК РасстояниеДоОсновногоСклада,
	        |	ВТ_Остатки.Номенклатура КАК Номенклатура,
	        |	ВТ_Остатки.Характеристика КАК Характеристика,
	        |	ВТ_Остатки.СвободныйОстаток КАК Остаток,
	        |	ВТ_Остатки.Склад КАК Склад,
	        |	ВТ_Остатки.НоменклатураАртикул КАК Артикул
	        |ИЗ
	        |	ВТ_Остатки КАК ВТ_Остатки
	        |ИТОГИ
	        |	СУММА(Остаток)
	        |ПО
	        |	Склад,
	        |	Номенклатура";
	Возврат Текст;
	
КонецФункции

Функция ПолучитьТекстЗапросаОстатков()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ТаблицаНоменклатуры.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_ТаблицаНоменклатуры
	               |ИЗ
	               |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	               |	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК ВНаличии,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ВРезерве,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			&ТекущаяДата,
	               |			Склад В (&Склад)
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	               |					ИЗ
	               |						ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры)
	               |				И Характеристика В
	               |					(ВЫБРАТЬ
	               |						ВТ_ТаблицаНоменклатуры.Характеристика КАК Характеристика
	               |					ИЗ
	               |						ВТ_ТаблицаНоменклатуры КАК ВТ_ТаблицаНоменклатуры)) КАК СвободныеОстаткиОстатки
	               |ИТОГИ
	               |	СУММА(ВНаличии),
	               |	СУММА(ВРезерве),
	               |	СУММА(СвободныйОстаток)
	               |ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросОстатковБезУказанияНоменклатуры()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	               |	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК ВНаличии,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ВРезерве,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(&ТекущаяДата, Склад В (&Склад)) КАК СвободныеОстаткиОстатки
	               |ИТОГИ
	               |	СУММА(ВНаличии),
	               |	СУММА(ВРезерве),
	               |	СУММА(СвободныйОстаток)
	               |ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


&НаСервере
Процедура ЗаполнитьОбновитьНаСервере()
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда			
		Если ЗначениеЗаполнено(ЭтотОбъект.Номенклатура) Тогда
			ТаблицаНоменклатуры = АС_PIS_ОбщегоНазначенияСервер.СформироватьТаблицуНоменклатуры(ЭтотОбъект.Номенклатура, ЭтотОбъект.Характеристика);
			ЗначениеВРеквизитФормы(АС_PIS_ОбщегоНазначенияСервер.СформироватьДеревоРасстояний(СкладПолучатель, ТаблицаНоменклатуры, ЭтотОбъект.КоличествоКМ), "ДеревоРасстояний");;
		Иначе
			ЗначениеВРеквизитФормы(АС_PIS_ОбщегоНазначенияСервер.СформироватьДеревоРасстояний(СкладПолучатель,,ЭтотОбъект.КоличествоКМ), "ДеревоРасстояний");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбновить(Команда)
	ЗаполнитьОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтотОбъект.СкладПолучатель = Параметры.СкладПолучатель;
	ЭтотОбъект.КоличествоКМ    = Параметры.КоличествоКМ;
КонецПроцедуры

&НаСервере
Процедура АС_PIS_ШиринаПриИзмененииПослеНаСервере()
	Если АС_PIS_ПроверитьСсылку(Объект.Ссылка) Тогда 
		Если ЗначениеЗаполнено(ЭтотОбъект.АС_PIS_Широта) И ЗначениеЗаполнено(ЭтотОбъект.АС_PIS_Долгота) Тогда
			НаборЗаписей = РегистрыСведений.АС_PIS_ПриоритетыСкладов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Склад.Установить(Объект.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].Широта  = Число(ЭтотОбъект.АС_PIS_Широта);
				НаборЗаписей[0].Долгота = Число(ЭтотОбъект.АС_PIS_Долгота);
				НаборЗаписей.Записать(Истина);
				АС_PIS_ОбщегоНазначенияСервер.ОтобразитьЗапись("Изменение", НаборЗаписей[0].Склад, НаборЗаписей[0].Долгота, НаборЗаписей[0].Широта); 
			Иначе
				НаборЗаписейНовый = РегистрыСведений.АС_PIS_ПриоритетыСкладов.СоздатьМенеджерЗаписи();
				НаборЗаписейНовый.Склад   = Объект.Ссылка;
				НаборЗаписейНовый.Долгота = Число(ЭтотОбъект.АС_PIS_Долгота);
				НаборЗаписейНовый.Широта  = Число(ЭтотОбъект.АС_PIS_Широта);
				НаборЗаписейНовый.Записать(Истина);
				АС_PIS_ОбщегоНазначенияСервер.ОтобразитьЗапись("Создание", НаборЗаписейНовый.Склад, НаборЗаписейНовый.Долгота, НаборЗаписейНовый.Широта);      
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(ЭтотОбъект.АС_PIS_Широта) И НЕ ЗначениеЗаполнено(ЭтотОбъект.АС_PIS_Долгота) Тогда
			НаборЗаписей = РегистрыСведений.АС_PIS_ПриоритетыСкладов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Склад.Установить(Объект.Ссылка);
			НаборЗаписей.Записать();
			АС_PIS_ОбщегоНазначенияСервер.ОтобразитьЗапись("Удаление", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЗапись(ВидЗаписи, Склад, Ширина, Долгота)
	
КонецПроцедуры

&НаКлиенте
Процедура АС_PIS_ШиринаПриИзмененииПосле(Элемент)
	АС_PIS_ШиринаПриИзмененииПослеНаСервере();
КонецПроцедуры

&НаСервере
Функция АС_PIS_ПроверитьСсылку(Ссылка)
	
	Если Ссылка <> Справочники.Склады.ПустаяСсылка() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура АС_PIS_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	Если АС_PIS_ПроверитьСсылку(Объект.Ссылка) Тогда
		СтруктураКоординат = АС_PIS_ОбщегоНазначенияСервер.ЗапросКоординатСклада(Объект.Ссылка);
		ЭтотОбъект.АС_PIS_Долгота = СтруктураКоординат.Долгота;
		ЭтотОбъект.АС_PIS_Широта  = СтруктураКоординат.Широта;
		ЭтотОбъект.ОграничениеКМ  = 5000;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура АС_PIS_ПросмотрОстатковПосле(Команда)
	Если АС_PIS_ПроверитьСсылку(Объект.Ссылка) Тогда	
		ДокументОстатков = АС_PIS_ОбщегоНазначенияСервер.СформироватьОстаткиИБлижайшиеСклады(Объект.Ссылка, 20, ЭтотОбъект.ОграничениеКМ);
		ДокументОстатков.Показать();
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура АС_PIS_ПросмотрБлижайшихСкладовПосле(Команда)
	Если АС_PIS_ПроверитьСсылку(Объект.Ссылка) И ЗначениеЗаполнено(ЭтотОбъект.АС_PIS_Долгота) И ЗначениеЗаполнено(ЭтотОбъект.АС_PIS_Широта) Тогда
		ПараметрыОткрытия = Новый Структура("СкладПолучатель, КоличествоКМ", Объект.Ссылка, ЭтотОбъект.ОграничениеКМ);
		ОткрытьФорму("ОбщаяФорма.АС_PIS_БлижайшиеСклады", ПараметрыОткрытия, ЭтаФорма, Новый УникальныйИдентификатор);
	Иначе
	КонецЕсли;
КонецПроцедуры

Функция АС_ОФД_ПолучитьДанныеПоИНН(Объект, ИНН = Неопределено, Ключ = Неопределено, Фильтр = Неопределено, Страница = Неопределено) Экспорт
	
	ТекстСообщения = "";
	
	Если ИНН = Неопределено Тогда
		Если ЗначениеЗаполнено(СокрЛП(Объект.АС_ИНН)) Тогда
			ИНН = СокрЛП(Объект.АС_ИНН);
		КонецЕсли;
	КонецЕсли;
	
	РазобранныйОтвет = Ложь;
	ОтветСервера = Ложь;
	
	ИсходящиеДанные = Новый Структура();
	ИсходящиеДанные.Вставить("q", СокрЛП(ИНН));
	ИсходящиеДанные.Вставить("key", Ключ);
	ИсходящиеДанные.Вставить("filter", Фильтр);
	ИсходящиеДанные.Вставить("page", Страница);
	
	Результат = Новый Структура();
	Результат.Вставить("АС_КодСубъекта", Неопределено);
	Результат.Вставить("АС_СубъектРФ", Неопределено);
	Результат.Вставить("АС_СубъектПредприятия", Неопределено);
	Результат.Вставить("АС_ОКВЭД2", Неопределено);
	Результат.Вставить("АС_ОКВЭД2Имя", Неопределено);
	Результат.Вставить("Отправитель", Неопределено);
	Результат.Вставить("ИНН", ИНН);
	Результат.Вставить("НаименованиеКонтрагента", "");
		
	//https://ofd.nalog.ru/search-proc.json - Адрес
	Попытка
		ОтветСервера = АС_ОФД_ПодготовитьДанныеЗапросаИОтправитьGET(Константы.АС_АдресЗапросаОФД.Получить(), ИсходящиеДанные, Истина);
	Исключение
		Сообщить("Не удалось получить данные по ИНН");
	КонецПопытки;
	
	Если ОтветСервера <> Ложь Тогда
		РазобранныйОтвет = РазобратьОтветСервера(ОтветСервера);
		Если РазобранныйОтвет <> Ложь Тогда
		
			Если ЗначениеЗаполнено(РазобранныйОтвет.regioncode) Тогда
				Результат.АС_КодСубъекта = Число(СокрЛП(РазобранныйОтвет.regioncode));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазобранныйОтвет.regioncode) Тогда
				Результат.АС_СубъектРФ = Справочники.СубъектыРФ_АС.НайтиПоКоду(Результат.АС_КодСубъекта, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазобранныйОтвет.category) Тогда
				Результат.АС_СубъектПредприятия = ПолучитьКатегориюСубъектаМСП(Число(СокрЛП(РазобранныйОтвет.category)));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазобранныйОтвет.okved1) Тогда
				Результат.АС_ОКВЭД2 = СокрЛП(РазобранныйОтвет.okved1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазобранныйОтвет.okved1name) Тогда
				Результат.АС_ОКВЭД2Имя = СокрЛП(РазобранныйОтвет.okved1name);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазобранныйОтвет.name_ex) Тогда
				Отправитель = ПолучитьОтправителя(СокрЛП(РазобранныйОтвет.name_ex), ИНН);
				Результат.НаименованиеКонтрагента = СокрЛП(РазобранныйОтвет.name_ex);
				Если Отправитель <> Ложь Тогда
					Результат.Отправитель = Отправитель;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если Отправитель = Ложь Тогда
			Результат.Отправитель = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если ОтветСервера <> Ложь И РазобранныйОтвет <> Ложь Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
	КонецЕсли;
	
	Если Отправитель = Ложь Тогда
		Результат.Отправитель = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКатегориюСубъектаМСП(КодСубъекта)
	
	Если ЗначениеЗаполнено(КодСубъекта) Тогда
		ЗапросОтправитель = Новый Запрос;
		ЗапросОтправитель.Текст = "ВЫБРАТЬ
		                          |	СоответствиеКатегорийСубъектовМСП_АС.СубъектМСП КАК Ссылка
		                          |ИЗ
		                          |	РегистрСведений.СоответствиеКатегорийСубъектовМСП_АС КАК СоответствиеКатегорийСубъектовМСП_АС
		                          |ГДЕ
		                          |	СоответствиеКатегорийСубъектовМСП_АС.СоответствиеССайта = &КодСубъекта";
		ЗапросОтправитель.УстановитьПараметр("КодСубъекта", Число(СокрЛП(КодСубъекта)));
		Результат = ЗапросОтправитель.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить("Не удалось получить категорию субъекта МСП");
	Возврат Справочники.СубъектыМСП_АС.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьОтправителя(Наименование, ИНН)	
	Если ЗначениеЗаполнено(Наименование) Тогда
		ЗапросОтправитель = Новый Запрос;
		ЗапросОтправитель.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.ИНН = &ИНН
		|			ИЛИ Контрагенты.Наименование = &Наименование)
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
		ЗапросОтправитель.УстановитьПараметр("Наименование", Лев(СокрЛП(Наименование), 150));
		ЗапросОтправитель.УстановитьПараметр("ИНН", СокрЛП(ИНН));
		Результат = ЗапросОтправитель.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		Иначе
			//Попросили убрать создание нового контрагента, если такой не найден по ИНН в ИБ
			//Попытка
			//	НачатьТранзакцию();
			//	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			//	НовыйКонтрагент.Наименование = Наименование;
			//	НовыйКонтрагент.НаименованиеПолное = Наименование;
			//	НовыйКонтрагент.ИНН = ИНН;
			//	НовыйКонтрагент.Записать();
			//	ЗафиксироватьТранзакцию();
			//	Возврат НовыйКонтрагент.Ссылка;
			//Исключение
			//	Если ТранзакцияАктивна() Тогда
			//		ОтменитьТранзакцию();
			//	КонецЕсли;
			//	Сообщить("Не удалось создать нового контрагента по данным ИНН");
			//	Возврат Справочники.Контрагенты.ПустаяСсылка();
			//КонецПопытки;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Сообщить("Не удалось получить контрагента по данным ИНН (не удалось получить наименование контрагента)");
	КонецЕсли;
КонецФункции

Функция РазобратьОтветСервера(ВходящиеДанные)
	
	data = Неопределено;
	Результат = Новый Структура();
	Результат.Вставить("regioncode", Неопределено);
	Результат.Вставить("name_ex", Неопределено);
	Результат.Вставить("okved1", Неопределено);
	Результат.Вставить("okved1name", Неопределено);
	Результат.Вставить("category", Неопределено);
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Соответствие") И ВходящиеДанные.Получить("data") <> Неопределено Тогда
		data = ВходящиеДанные.Получить("data");
		//Присылают соответствие из массивов, где в каждом массиве внутри ещё одно соответствие;
		Если data.Количество() > 0 Тогда
			data = data[0];
		Иначе
			Сообщить("Возникла ошибка при получении данных по ИНН - некорректный ответ с сервера.");
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(data) = Тип("Соответствие") И data.Получить("regioncode") <> Неопределено Тогда
			Результат.regioncode = data.Получить("regioncode");
		КонецЕсли;
		Если ТипЗнч(data) = Тип("Соответствие") И data.Получить("name_ex") <> Неопределено Тогда
			Результат.name_ex = data.Получить("name_ex");
		КонецЕсли;
		Если ТипЗнч(data) = Тип("Соответствие") И data.Получить("okved1") <> Неопределено Тогда
			Результат.okved1 = data.Получить("okved1");
		КонецЕсли;
		Если ТипЗнч(data) = Тип("Соответствие") И data.Получить("okved1name") <> Неопределено Тогда
			Результат.okved1name = data.Получить("okved1name");
		КонецЕсли;
		Если ТипЗнч(data) = Тип("Соответствие") И data.Получить("category") <> Неопределено Тогда
			Результат.category = data.Получить("category");
		КонецЕсли;
	Иначе
		Возврат Ложь;
		Сообщить("Возникла ошибка при получении данных по ИНН - некорректный ответ с сервера.");
	КонецЕсли;

	Возврат Результат;

	
КонецФункции

Функция АС_ОФД_ПодготовитьДанныеЗапросаИОтправитьGET(Адрес, ИсходящиеДанные, ВозвратитьJSON = Ложь)
	
	Данные = Новый Структура();
	Отказ = Ложь;
	
	
	Отказ = АС_ОФД_ПроверитьИЗаполнитьИсходящиеДанные("q",      Неопределено, Данные, ИсходящиеДанные, Отказ);	
	Отказ = АС_ОФД_ПроверитьИЗаполнитьИсходящиеДанные("key",    Неопределено, Данные, ИсходящиеДанные, Отказ, Истина);	
	Отказ = АС_ОФД_ПроверитьИЗаполнитьИсходящиеДанные("filter", Неопределено, Данные, ИсходящиеДанные, Отказ, Истина);	
	Отказ = АС_ОФД_ПроверитьИЗаполнитьИсходящиеДанные("page",   Неопределено, Данные, ИсходящиеДанные, Отказ, Истина);	
	
	Если НЕ Отказ Тогда
		Адрес = Адрес + "?query=" + Строка(Данные.q);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ВозвратитьJSON Тогда
			Результат = АС_PDF_СоединениеССервисомШтампа.GetJson(Адрес, Данные, Неопределено, Неопределено);	
		Иначе
			Результат = АС_PDF_СоединениеССервисомШтампа.Get(Адрес, Данные, Неопределено, Неопределено);	
		КонецЕсли;
		
		Возврат Результат;
	Иначе
		Сообщить("Не заполнен ИНН");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция АС_ОФД_ПроверитьИЗаполнитьИсходящиеДанные(Ключ, ЗначениеНезаполненности, ИсходящиеДанные, Источник, Отказ = Ложь, Опционально = Ложь)
	
	Если ((ТипЗнч(Источник) = Тип("Структура") И Источник.Свойство(Ключ) И Источник[Ключ] <> ЗначениеНезаполненности) 
		И ТипЗнч(ИсходящиеДанные) = Тип("Структура"))
		И НЕ Отказ Тогда
		Попытка
			Если Источник[Ключ] <> "" Тогда 
				ИсходящиеДанные.Вставить(Ключ, Источник[Ключ]);
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			Возврат Истина;	
		КонецПопытки
	ИначеЕсли Опционально И НЕ Отказ Тогда
		Возврат Отказ;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции

Функция АС_ОФД_СоздатьКнопкуПолученияДанных(Форма, Объект) Экспорт
			
		СозданиеКомандДляВызова(Форма);
		
		АС_ИНН = Форма.Элементы.Добавить("АС_ИНН", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ИНН.Вид = ВидПоляФормы.ПолеВвода;	
		АС_ИНН.Заголовок = "ИНН";
		АС_ИНН.ПутьКДанным = "Объект.АС_ИНН";
		
		АС_ОФД_ПолучитьДанныеИНН = Форма.Элементы.Добавить("АС_ОФД_ПолучитьДанные", Тип("КнопкаФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ОФД_ПолучитьДанныеИНН.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		АС_ОФД_ПолучитьДанныеИНН.ИмяКоманды = "AC_ОФД_ПолучитьДанныеПоИНН";	
		АС_ОФД_ПолучитьДанныеИНН.Заголовок = "Получить данные по ИНН";           
		АС_ОФД_ПолучитьДанныеИНН.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_ОФД_ПолучитьДанныеИНН.РасширеннаяПодсказка.Заголовок = "Получить данные по ИНН";
		АС_ОФД_ПолучитьДанныеИНН.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаПользователей;
		
		АС_СубъектПредприятия = Форма.Элементы.Добавить("АС_СубъектПредприятия", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_СубъектПредприятия.Вид = ВидПоляФормы.ПолеВвода;	
		АС_СубъектПредприятия.Заголовок = "Субъект предприятия";
		АС_СубъектПредприятия.ПутьКДанным = "Объект.АС_СубъектПредприятия";
		
		АС_ТипыЖалобы = Форма.Элементы.Добавить("АС_ТипыЖалобы", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ТипыЖалобы.Вид = ВидПоляФормы.ПолеВвода;	
		АС_ТипыЖалобы.Заголовок = "Тип документа";
		АС_ТипыЖалобы.ПутьКДанным = "Объект.АС_ТипыЖалобы";
		АС_ТипыЖалобы.УстановитьДействие("ПриИзменении", "АС_ОФД_ТипЖалобыПриИзменении");
		
		АС_КодСубъекта = Форма.Элементы.Добавить("АС_КодСубъекта", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_КодСубъекта.Вид = ВидПоляФормы.ПолеВвода;	
		АС_КодСубъекта.Заголовок = "Код субъекта Российской Федерации";
		АС_КодСубъекта.ПутьКДанным = "Объект.АС_КодСубъекта";
		
		АС_СубъектРФ = Форма.Элементы.Добавить("АС_СубъектРФ", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_СубъектРФ.Вид = ВидПоляФормы.ПолеВвода;	
		АС_СубъектРФ.Заголовок = "Субъект Российской Федерации";
		АС_СубъектРФ.ПутьКДанным = "Объект.АС_СубъектРФ";
		
		АС_ОКВЭД2 = Форма.Элементы.Добавить("АС_ОКВЭД2", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ОКВЭД2.Вид = ВидПоляФормы.ПолеВвода;	
		АС_ОКВЭД2.Заголовок = "ОКВЭД2";
		АС_ОКВЭД2.ПутьКДанным = "Объект.АС_ОКВЭД2";
		
		АС_ОКВЭД2Имя = Форма.Элементы.Добавить("АС_ОКВЭД2Имя", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ОКВЭД2Имя.Вид = ВидПоляФормы.ПолеВвода;	
		АС_ОКВЭД2Имя.Заголовок = "Наименование ОКВЭД2";
		АС_ОКВЭД2Имя.ПутьКДанным = "Объект.АС_ОКВЭД2Имя";
		
		АС_НаименованиеЗаказчика = Форма.Элементы.Добавить("АС_НаименованиеЗаказчика", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_НаименованиеЗаказчика.Вид = ВидПоляФормы.ПолеВвода;	
		АС_НаименованиеЗаказчика.Заголовок = "Наименование заказчика";
		АС_НаименованиеЗаказчика.ПутьКДанным = "Объект.АС_НаименованиеЗаказчика";
		
		АС_ИННЗаказчика = Форма.Элементы.Добавить("АС_ИННЗаказчика", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ИННЗаказчика.Вид = ВидПоляФормы.ПолеВвода;	
		АС_ИННЗаказчика.Заголовок = "ИНН Заказчика";
		АС_ИННЗаказчика.ПутьКДанным = "Объект.АС_ИННЗаказчика";
		
		АС_СостояниеОбращения = Форма.Элементы.Добавить("АС_СостояниеОбращения", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_СостояниеОбращения.Вид = ВидПоляФормы.ПолеВвода;	
		АС_СостояниеОбращения.Заголовок = "Состояние обращения";
		АС_СостояниеОбращения.ПутьКДанным = "Объект.АС_СостояниеОбращения";
		
		АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление = Форма.Элементы.Добавить("АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление", Тип("КнопкаФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.ИмяКоманды = "АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление";	
		АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.Заголовок = "Обновить (запустить) отложенное уведомление";           
		АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.РасширеннаяПодсказка.Заголовок = "Запускает уведомление, если оно не запущено. Обновляет, если запущено. Только если документ зарегистрирован.";
		//АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаПользователей;
		
		АС_ОФД_ОбновитьТаймер = Форма.Элементы.Добавить("АС_ОФД_ОбновитьТаймер", Тип("КнопкаФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ОФД_ОбновитьТаймер.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		АС_ОФД_ОбновитьТаймер.ИмяКоманды = "АС_ОФД_ОбновитьТаймер";	
		АС_ОФД_ОбновитьТаймер.Заголовок = "Обновить таймер";           
		АС_ОФД_ОбновитьТаймер.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_ОФД_ОбновитьТаймер.РасширеннаяПодсказка.Заголовок = "Обновляет таймер уведомления.";
		АС_ОФД_ОбновитьТаймер.Картинка = БиблиотекаКартинок.Обновить;

		АС_ДокументИсполнен = Форма.Элементы.Добавить("АС_ДокументИсполнен", Тип("ПолеФормы"), Форма.Элементы.ГруппаОтправитель);
		АС_ДокументИсполнен.Вид = ВидПоляФормы.ПолеВвода;	
		АС_ДокументИсполнен.Заголовок = "Документ исполнен";
		АС_ДокументИсполнен.ПутьКДанным = "Объект.АС_ДокументИсполнен";

		АС_ОФД_СоздатьТаймерНаФорме(Форма, Объект);
		
		АС_ОФД_ПриИзмененииВидаТипаДокумента(Форма, Объект);
КонецФункции

Процедура СозданиеКомандДляВызова(Форма)

	АС_ОФД_КомандаДляПолученияДанныхИзОФД = Форма.Команды.Добавить("AC_ОФД_ПолучитьДанныеПоИНН");
    АС_ОФД_КомандаДляПолученияДанныхИзОФД.Действие = "AC_ОФД_ПолучитьДанныеПоИНН";
    АС_ОФД_КомандаДляПолученияДанныхИзОФД.Заголовок = "Получить данные по ИНН (АС)";
	
	АС_ОФД_ТипЖалобыПриИзменении = Форма.Команды.Добавить("АС_ОФД_ТипЖалобыПриИзменении");
    АС_ОФД_ТипЖалобыПриИзменении.Действие = "AC_ОФД_ТипЖалобыПриИзменении";
    АС_ОФД_ТипЖалобыПриИзменении.Заголовок = "Тип жалобы при изменении (АС)";
	
	АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление = Форма.Команды.Добавить("АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление");
	АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.Действие = "АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление";
	АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.Заголовок = "Обновить (запустить) отложенное уведомление (АС)";
	
	АС_ОФД_ОбновитьТаймер = Форма.Команды.Добавить("АС_ОФД_ОбновитьТаймер");
	АС_ОФД_ОбновитьТаймер.Действие = "АС_ОФД_ОбновитьТаймер";
	АС_ОФД_ОбновитьТаймер.Заголовок = "Обновить таймер (АС)";
	
КонецПроцедуры

Функция АС_ОФД_ПриИзмененииВидаТипаДокумента(Форма, Объект, ИспользуетсяВМодулеФормы = Ложь) Экспорт
		
	Если Объект.ВидДокумента = Константы.ВидДокументаЖалоба_АС.Получить() Тогда
		Если ИспользуетсяВМодулеФормы Тогда
			Возврат УстановитьВидимостьОФД(Истина, Форма, Объект, Истина, Истина);
		Иначе
			УстановитьВидимостьСтандартные(Ложь, Форма);
			УстановитьВидимостьОФД(Истина, Форма, Объект);
			Объект.АС_СостояниеОбращения = Перечисления.АС_СостоянияОбращений.НаРассмотренииВКорпорации;
			Если Объект.АС_ТипыЖалобы = Неопределено ИЛИ Объект.АС_ТипыЖалобы = Перечисления.АС_ТипыЖалобы.ПустаяСсылка() Тогда
				Объект.Заголовок = "Электронное обращение через Сервис";
			КонецЕсли;
			Объект.Заголовок = "Электронное обращение через Сервис - " + Строка(Объект.АС_ТипыЖалобы);
		КонецЕсли;
	Иначе
		Если ИспользуетсяВМодулеФормы Тогда
			Возврат УстановитьВидимостьОФД(Истина, Форма, Объект, Истина, Ложь);
		Иначе
			УстановитьВидимостьСтандартные(Истина, Форма);
			УстановитьВидимостьОФД(Ложь, Форма, Объект);
			Объект.АС_ТипыЖалобы = Неопределено;
			Объект.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция УстановитьВидимостьОФД(Видимость, Форма, Объект, ИспользуетсяВМодулеФормы = Ложь, Добавлять = Ложь)
	
	Если ИспользуетсяВМодулеФормы Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ТипыЖалобы, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ОФД_ПолучитьДанные, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_СубъектПредприятия, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_СубъектРФ, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_КодСубъекта, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ОКВЭД2, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ОКВЭД2Имя, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ИНН, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.СрокИсполнения, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.ИсходящаяДата, Добавлять));
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.ИсходящийНомер, Добавлять));
		//Попросили сделать необязательным к заполнению
		МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_СостояниеОбращения, Ложь));
		Если Объект.АС_ТипыЖалобы = Перечисления.АС_ТипыЖалобы.Закупки И Видимость Тогда
			МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_НаименованиеЗаказчика, Добавлять));
			МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ИННЗаказчика, Добавлять));
		Иначе
			МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_НаименованиеЗаказчика, Ложь));
			МассивЭлементов.Добавить(Новый Структура("Элемент, Добавлять", Форма.Элементы.АС_ИННЗаказчика, Ложь));
		КонецЕсли;
		Возврат МассивЭлементов;
	Иначе
		Форма.Элементы.АС_ТипыЖалобы.Видимость         = Видимость;
		Форма.Элементы.АС_ОФД_ПолучитьДанные.Видимость = Видимость;
		Форма.Элементы.АС_СубъектПредприятия.Видимость = Видимость;
		Форма.Элементы.АС_СубъектРФ.Видимость          = Видимость;
		Форма.Элементы.АС_КодСубъекта.Видимость        = Видимость;
		Форма.Элементы.АС_ОКВЭД2.Видимость             = Видимость;
		Форма.Элементы.АС_ОКВЭД2Имя.Видимость          = Видимость;
		Форма.Элементы.АС_ИНН.Видимость                = Видимость;
		Форма.Элементы.АС_СостояниеОбращения.Видимость = Видимость;
		Форма.Элементы.Содержание.Видимость            = Видимость;
		Форма.Элементы.АС_ОФД_Таймер.Видимость         = Видимость;
		Форма.Элементы.АС_ОФД_Время.Видимость          = Видимость;
		Форма.Элементы.АС_ОФД_ОбновитьТаймер.Видимость = Видимость;
		Форма.Элементы.АС_ДокументИсполнен.Видимость   = Видимость;
		Форма.Элементы.АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление.Видимость = Видимость;
		
		Если НЕ РольДоступна("ПолныеПрава") Тогда
			Форма.Элементы.АС_СостояниеОбращения.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Объект.АС_ТипыЖалобы = Перечисления.АС_ТипыЖалобы.Закупки И Видимость Тогда 
			Форма.Элементы.АС_НаименованиеЗаказчика.Видимость = Истина;
			Форма.Элементы.АС_ИННЗаказчика.Видимость          = Истина;
		Иначе
			Форма.Элементы.АС_НаименованиеЗаказчика.Видимость = Ложь;
			Форма.Элементы.АС_ИННЗаказчика.Видимость          = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции
	
Процедура УстановитьВидимостьСтандартные(Видимость, Форма)	
	Форма.Элементы.Заголовок.Видимость             = Видимость;
	Форма.Элементы.АБ_ТипДокумента.Видимость       = Видимость;
КонецПроцедуры

Процедура УстановитьПодразделениеПоТипуЖалобы(Объект) Экспорт
	ЗапросПодразделение = Новый Запрос;
	ЗапросПодразделение.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                            |	АС_СоответвиеПодразделенийЖалоба.Подразделение,
	                            |	АС_СоответвиеПодразделенийЖалоба.Адресат
	                            |ИЗ
	                            |	РегистрСведений.АС_СоответвиеПодразделенийЖалоба КАК АС_СоответвиеПодразделенийЖалоба
	                            |ГДЕ
	                            |	АС_СоответвиеПодразделенийЖалоба.Подразделение.ПометкаУдаления = ЛОЖЬ
	                            |	И АС_СоответвиеПодразделенийЖалоба.ТипДокумента.Ссылка = &ТипЖалобы";
	ЗапросПодразделение.УстановитьПараметр("ТипЖалобы", Объект.АС_ТипыЖалобы);
	Результат = ЗапросПодразделение.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Подразделение = Выборка.Подразделение;
			Если ЗначениеЗаполнено(Выборка.Адресат) Тогда
				Объект.Адресат = Выборка.Адресат;
			Иначе
				Объект.Адресат = Выборка.Подразделение.Руководитель;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("Не найдено подразделение по типу документа.");
	КонецЕсли;
КонецПроцедуры

Функция АС_ОФД_ПроверитьДатуОтправки(Знач ДатаПроверки, Знач КоличествоЧасов, Знач ДатаНачала) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаПроверки",  ДатаПроверки);
	Результат.Вставить("ЭтоБуднийДень", Истина);
	Результат.Вставить("ТекстОшибки",   "");
	Результат.Вставить("Отказ",         Ложь);
	
	МассивОшибок = Новый Массив;
	
	КоличествоДней = КоличествоЧасов / 24;
	Если КоличествоДней < 1 Тогда
		КоличествоДней = 1;
	КонецЕсли;
	
	КоличествоДней = Окр(КоличествоДней, 0, РежимОкругления.Окр15как10) + 1;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.АС_ИспользоватьКалендарьПриПроверкеДаты.Получить() И ЗначениеЗаполнено(Константы.АС_КалендарьДляОтправки.Получить()) Тогда
		ВидДня = ПолучитьВидДня(Результат.ДатаПроверки);
		Если ВидДня = "РАБОЧИЙ" Тогда
			КоличествоДней = КоличествоДней - 1;
		КонецЕсли;
		
		Если КоличествоЧасов < 24 И День(ДатаНачала) = День(ДатаНачала + (60 * 60 * КоличествоЧасов)) Тогда
			ВидДня = ПолучитьВидДня(Результат.ДатаПроверки);	
			Если ВидДня = "РАБОЧИЙ" Тогда
				Результат.ДатаПроверки = Результат.ДатаПроверки + (60 * 60 * КоличествоЧасов);
				Возврат Результат;
			КонецЕсли; 
		КонецЕсли;
			
		Пока КоличествоДней > 0 Цикл
			Результат.ДатаПроверки = Результат.ДатаПроверки + (60 * 60 * 24);
			ВидДня = ПолучитьВидДня(Результат.ДатаПроверки);
			Если ВидДня = "РАБОЧИЙ" Тогда
				КоличествоДней = КоличествоДней - 1;
			КонецЕсли;
		КонецЦикла;
		
		//Пока ПолучитьВидДня(Результат.ДатаПроверки) = "ВЫХОДНОЙ" Цикл
		//	Результат.ДатаПроверки = Результат.ДатаПроверки + (60 * 60 * 24);
		//	ВидДня = ПолучитьВидДня(Результат.ДатаПроверки);
		//КонецЦикла;
		
		//Если ВидДня = "РАБОЧИЙ" Тогда
		Возврат Результат;	
		//КонецЕсли;
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Константы.АС_КалендарьДляОтправки.Получить()) И Константы.АС_ИспользоватьКалендарьПриПроверкеДаты.Получить() Тогда
			Сообщить("Не заполнен календарь для отправки, будут произведены вычисления без учета календаря.");	
		КонецЕсли;
		
		Попытка
			Если НЕ ТипЗнч(ДатаПроверки) = Тип("Дата") Тогда
				Результат.ЭтоБуднийДень = Ложь;
				Результат.Отказ         = Истина;
				МассивОшибок.Добавить("Передан неправильный тип данных - " + ТипЗнч(ДатаПроверки)); 	
			КонецЕсли; 
						
			Если НЕ ЗначениеЗаполнено(ДатаПроверки) Тогда
				Результат.ЭтоБуднийДень = Ложь;
				Результат.Отказ         = Истина;
				МассивОшибок.Добавить("Не заполнена дата проверки"); 
			КонецЕсли;
			
			Если Результат.Отказ Тогда
				Для Каждого Ошибка Из МассивОшибок Цикл
					Результат.ТекстОшибки = Результат.ТекстОшибки + Строка(Ошибка) + Символы.ПС;
				КонецЦикла;
				Возврат Результат;
			КонецЕсли;	
			
			Если КоличествоЧасов < 24 И День(ДатаНачала) = День(ДатаНачала + (60 * 60 * КоличествоЧасов)) Тогда
				ВидДня = ПолучитьВидДня(Результат.ДатаПроверки);	
				Если ДеньНедели(Результат.ДатаПроверки) <> 6 И ДеньНедели(Результат.ДатаПроверки) <> 7 Тогда
					Результат.ДатаПроверки = Результат.ДатаПроверки + (60 * 60 * КоличествоЧасов);
					Возврат Результат;
				КонецЕсли; 
			КонецЕсли;
			
			Если ДеньНедели(Результат.ДатаПроверки) <> 6 И ДеньНедели(Результат.ДатаПроверки) <> 7 Тогда
				КоличествоДней = КоличествоДней - 1;
			КонецЕсли;

			Пока КоличествоДней > 0 Цикл
				Результат.ДатаПроверки = Результат.ДатаПроверки + (60 * 60 * 24);
				Если ДеньНедели(Результат.ДатаПроверки) <> 6 И ДеньНедели(Результат.ДатаПроверки) <> 7 Тогда
					КоличествоДней = КоличествоДней - 1;	
				КонецЕсли;
			КонецЦикла;
			
			Возврат Результат;
				
		Исключение
			Результат.ЭтоБуднийДень = Ложь;
			Результат.Отказ         = Истина;
			Результат.ТекстОшибки   = ОписаниеОшибки(); 
			ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ВходящиеДокументы,
			,
			ОписаниеОшибки());
		КонецПопытки;
		
		Возврат Результат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция АС_ОФД_ПрибавитьДатуОтправки(СтруктураИзмерений, НоваяДатаОтправки)
	
	Результат = Новый Структура();
	Результат.Вставить("ДатаОбновленаУспешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
	НаборУведомлений.Отбор.ВходящийДокумент.Установить(СтруктураИзмерений.ВходящийДокумент);
	НаборУведомлений.Отбор.ДатаОтправки.Установить(СтруктураИзмерений.ДатаОтправки);
	НаборУведомлений.Отбор.ДатаНачала.Установить(СтруктураИзмерений.ДатаНачала);
	НаборУведомлений.Отбор.Заявитель.Установить(СтруктураИзмерений.Заявитель);
	НаборУведомлений.Отбор.СостояниеДокумента.Установить(СтруктураИзмерений.СостояниеДокумента);
	НаборУведомлений.Отбор.UID.Установить(Лев(СтруктураИзмерений.ВходящийДокумент.УникальныйИдентификатор, 20));
	
	
	НаборУведомлений.Прочитать();
	
	Попытка
		НачатьТранзакцию();
			Если НаборУведомлений.Количество() = 1 Тогда
				НаборУведомлений[0].ДатаОтправки = НоваяДатаОтправки;
				НаборУведомлений.Записать(Истина);
			КонецЕсли;
		ЗафиксироватьТранзакцию();
		Результат.ДатаОбновленаУспешно = Ложь;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВходящиеДокументы,
		,
		ОписаниеОшибки());
		Результат.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура АС_ОФД_ОтправитьУведомление(Источник, СтруктураУведомления)
	
	Отказ = Ложь;
	МассивОшибок = Новый Массив;
	ТекстОшибки = "";
	
	
	ДатаОтправки            = СтруктураУведомления.ДатаОтправки;
	ВходящийДокумент        = СтруктураУведомления.ВходящийДокумент;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.АС_УведомленияВРежимеОтладки.Получить() = Истина Тогда
		ПочтовыйАдресПолучателя = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();	
	Иначе
		ПочтовыйАдресПолучателя = АС_ОФД_ЗапросДополнительныхЗначений(СтруктураУведомления.ВходящийДокумент, "E-mail заявителя");
		//ПочтовыйАдресПолучателя = СтруктураУведомления.ПочтовыйАдресПолучателя;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Заявитель               = СтруктураУведомления.Заявитель;
	СостояниеДокумента      = СтруктураУведомления.СостояниеДокумента;
	
	ТекстУведомления  = СтруктураУведомления.ТекстУведомления;
	Адресат           = СтруктураУведомления.Адресат;
	Подразделение     = СтруктураУведомления.Подразделение;
	ПричинаОтправки   = Источник;
	ОтправленоУспешно = Ложь;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура АС_ОФД_СоздатьОчередьОтправки(Ссылка, ПараметрыЗаписи = Неопределено, ПриРегистрации = Ложь, Отдельно = Ложь, ПриЗаписи = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Ссылка.ВидДокумента = Константы.ВидДокументаЖалоба_АС.Получить() И Константы.АС_ОтпралятьУведомленияНаПочту.Получить() Тогда
		Если ЗначениеЗаполнено(Ссылка.РегистрационныйНомер)
			И ЗначениеЗаполнено(Ссылка.ДатаРегистрации) Тогда
			
			Если ПриРегистрации И (ПараметрыЗаписи <> Неопределено И ПараметрыЗаписи.Свойство("Регистрация") И ПараметрыЗаписи.Регистрация) Тогда
				АС_ОФД_СоздатьОчередьПриРегистрации(Ссылка, ПараметрыЗаписи);
			ИначеЕсли Отдельно ИЛИ (ПриЗаписи И ПараметрыЗаписи <> Неопределено И ПараметрыЗаписи.Свойство("ЭтоНовый") И НЕ ПараметрыЗаписи.ЭтоНовый) Тогда
				АС_ОФД_СоздатьОбновитьОчередьОтдельно(Ссылка);
			Иначе
				Сообщить("Не заполнен регистрационный номер или дата регистрации. После заполнения запустите отложенное уведомление вручную.");
			КонецЕсли;
		Иначе
			ПервоеУдалено = Ложь;
			НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
			НаборУведомлений.Отбор.ВходящийДокумент.Установить(Ссылка);
			НаборУведомлений.Отбор.UID.Установить(Лев(Строка(Ссылка.УникальныйИдентификатор()), 20));
			
			НаборУведомлений.Прочитать();
			Если НаборУведомлений.Количество() = 1 Тогда
				Если НЕ ЗначениеЗаполнено(Ссылка.РегистрационныйНомер) ИЛИ НЕ ЗначениеЗаполнено(Ссылка.ДатаРегистрации) Тогда
					Если НаборУведомлений[0].Отправлено Тогда
						Возврат;
					КонецЕсли;
					НаборУведомлений.Удалить(НаборУведомлений[0]);
					НаборУведомлений.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если ПервоеУдалено Тогда
			НаборУведомлений = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьНаборЗаписей();
			НаборУведомлений.Отбор.ВходящийДокумент.Установить(Ссылка);
			НаборУведомлений.Отбор.UID.Установить(Лев(Строка(Ссылка.УникальныйИдентификатор()), 20));
			НаборУведомлений.Отбор.ПричинаОтправки = Перечисления.АС_ПричиныОтправкиУведомлений.ПриРегистрации;
			
			НаборУведомлений.Прочитать();
			Если НаборУведомлений.Количество() = 1 Тогда
				Если НЕ ЗначениеЗаполнено(Ссылка.РегистрационныйНомер) ИЛИ НЕ ЗначениеЗаполнено(Ссылка.ДатаРегистрации) Тогда
					НаборУведомлений.Удалить(НаборУведомлений[0]);
					НаборУведомлений.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
	Иначе
		ПервоеУдалено = Ложь;
		НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
		НаборУведомлений.Отбор.ВходящийДокумент.Установить(Ссылка);
		НаборУведомлений.Отбор.UID.Установить(Лев(Строка(Ссылка.УникальныйИдентификатор()), 20));
		
		НаборУведомлений.Прочитать();
		Если НаборУведомлений.Количество() = 1 Тогда
			Если Ссылка.ВидДокумента <> Константы.ВидДокументаЖалоба_АС.Получить() Тогда
				Если НаборУведомлений[0].Отправлено Тогда
					Возврат;
				КонецЕсли;
				НаборУведомлений.Удалить(НаборУведомлений[0]);
				НаборУведомлений.Записать(Истина);
				ПервоеУдалено = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПервоеУдалено Тогда
			НаборУведомлений = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьНаборЗаписей();
			НаборУведомлений.Отбор.ВходящийДокумент.Установить(Ссылка);
			НаборУведомлений.Отбор.UID.Установить(Лев(Строка(Ссылка.УникальныйИдентификатор()), 20));
			НаборУведомлений.Отбор.ПричинаОтправки = Перечисления.АС_ПричиныОтправкиУведомлений.ПриРегистрации;
			
			НаборУведомлений.Прочитать();
			Если НаборУведомлений.Количество() = 1 Тогда
				Если Ссылка.ВидДокумента <> Константы.ВидДокументаЖалоба_АС.Получить() Тогда
					НаборУведомлений.Удалить(НаборУведомлений[0]);
					НаборУведомлений.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура АС_ОФД_СоздатьОчередьПриРегистрации(Ссылка, ПараметрыЗаписи)
	Если Ссылка.ВидДокумента = Константы.ВидДокументаЖалоба_АС.Получить() И ПараметрыЗаписи.Свойство("Регистрация") И ПараметрыЗаписи.Регистрация И НЕ Ссылка.АС_ДокументИсполнен Тогда
		
			Отказ = Ложь;
		
			НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
			НаборУведомлений.Отбор.ВходящийДокумент.Установить(Ссылка);
			НаборУведомлений.Отбор.UID.Установить(Лев(Строка(Ссылка.УникальныйИдентификатор()), 20));
			
			НаборУведомлений.Прочитать();
			Если НаборУведомлений.Количество() > 0 Тогда
				Возврат;
			Иначе
				НовоеУведомление = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьМенеджерЗаписи();
				
				УстановитьПривилегированныйРежим(Истина);
				Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
					НовоеУведомление.ПочтовыйАдресПолучателя = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();		
				Иначе
					НовоеУведомление.ПочтовыйАдресПолучателя = АС_ОФД_ЗапросДополнительныхЗначений(Ссылка, "E-mail заявителя");
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);

				Если НЕ СтрДлина(НовоеУведомление.ПочтовыйАдресПолучателя) > 0 Тогда
					Отказ = Истина;
					Сообщить("По данному документу не создано отложенное уведомление, так как не заполнен E-mail заявителя. После внесения данных обновите уведомление.");
					Возврат;
				КонецЕсли;

				НовоеУведомление.UID                = Лев(Строка(Ссылка.УникальныйИдентификатор()), 20);
				НовоеУведомление.ВходящийДокумент   = Ссылка;
				НовоеУведомление.Адресат            = Ссылка.Адресат;
				НовоеУведомление.ДатаНачала         = ТекущаяДата();
				НовоеУведомление.Заявитель          = Ссылка.Отправитель;
				НовоеУведомление.Подразделение      = Ссылка.Подразделение;
				НовоеУведомление.Регистратор        = Ссылка;
				НовоеУведомление.СостояниеДокумента = Ссылка.АС_СостояниеОбращения;
				НовоеУведомление.ДатаРегистрации = Ссылка.ДатаРегистрации;
				НовоеУведомление.РегистрационныйНомер = Ссылка.РегистрационныйНомер;
				Если Константы.АС_КоличествоЧасовДоОтправки.Получить() > 0 Тогда
					СтруктураДаты = АС_ОФД_ПроверитьДатуОтправки(ТекущаяДата(), Константы.АС_КоличествоЧасовДоОтправки.Получить(), НовоеУведомление.ДатаНачала);
					НовоеУведомление.ДатаОтправки       = СтруктураДаты.ДатаПроверки;
				Иначе
					Отказ = Истина;
					Сообщить("Не заполнено количество часов до отправки уведомления.");
					Возврат;
				КонецЕсли;
				
				НовоеУведомление.ТекстУведомления = АС_ОФД_ЗаполнитьТекстУведомления(НовоеУведомление.ДатаРегистрации,
					НовоеУведомление.РегистрационныйНомер,
					НовоеУведомление.СостояниеДокумента,
					НовоеУведомление.Адресат,
					НовоеУведомление.ВходящийДокумент.ИсходящаяДата,
					НовоеУведомление.ВходящийДокумент.ИсходящийНомер);	
					
				Если НовоеУведомление.ТекстУведомления <> "" Тогда
					Отказ = Истина;
					Сообщить("Не удалось сформировать текст уведомления. Проверьте заполненность следующих полей и попробуйте сформировать уведомление ещё раз. Поля: Рег. номер, Рег. дата, Состояние, Адресат.");
					Возврат;	
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					НовоеУведомление.Записать(Истина); 
				Иначе
					Сообщить("Не удалось сформировать отложенное уведомление.");
					Возврат;
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Функция АС_ОФД_ЗаполнитьТекстУведомления(РегДата, РегНомер, Состояние, Адресат, ИсхДата, ИсхНомер)
	Попытка
		УстановитьПривилегированныйРежим(Истина);
			Текст = Константы.АС_ТекстУведомленияПриРегистрации.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		Текст = СтрЗаменить(Текст, "[РегДата]", Строка(Формат(РегДата, "ДФ=dd.MM.yyyy")));
		Текст = СтрЗаменить(Текст, "[РегНомер]", Строка(РегНомер));
		Текст = СтрЗаменить(Текст, "[Статус]", Строка(Состояние));
		Текст = СтрЗаменить(Текст, "[ФИО]", Строка(Адресат));
		Текст = СтрЗаменить(Текст, "[ИсхДата]", Строка(Формат(ИсхДата, "ДФ=dd.MM.yyyy")));
		Текст = СтрЗаменить(Текст, "[ИсхНомер]", Строка(ИсхНомер));
	Исключение
		ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВходящиеДокументы,
		,
		ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Возврат Текст;
КонецФункции

Функция АС_ОФД_ЗаполнитьТекстУведомленияСменаАдресата(РегДата, РегНомер, Состояние, Адресат, ИсхДата, ИсхНомер)
	Попытка
		УстановитьПривилегированныйРежим(Истина);
			Текст = Константы.АС_ТекстУведомленияПриСменеАдресата.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		Текст = СтрЗаменить(Текст, "[РегДата]", Строка(Формат(РегДата, "ДФ=dd.MM.yyyy")));
		Текст = СтрЗаменить(Текст, "[РегНомер]", Строка(РегНомер));
		Текст = СтрЗаменить(Текст, "[Статус]", Строка(Состояние));
		Текст = СтрЗаменить(Текст, "[ФИО]", Строка(Адресат));
		Текст = СтрЗаменить(Текст, "[ИсхДата]", Строка(Формат(ИсхДата, "ДФ=dd.MM.yyyy")));
		Текст = СтрЗаменить(Текст, "[ИсхНомер]", Строка(ИсхНомер));
	Исключение
		ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВходящиеДокументы,
		,
		ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Возврат Текст;
КонецФункции

Процедура АС_ОФД_СоздатьОбновитьОчередьОтдельно(Ссылка)
	Если Ссылка.ВидДокумента = Константы.ВидДокументаЖалоба_АС.Получить() И НЕ Ссылка.АС_ДокументИсполнен Тогда
		
			Отказ = Ложь;
		
			НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
			НаборУведомлений.Отбор.ВходящийДокумент.Установить(Ссылка);
			НаборУведомлений.Отбор.UID.Установить(Лев(Строка(Ссылка.УникальныйИдентификатор()), 20));
			
			НаборУведомлений.Прочитать();
			Если НаборУведомлений.Количество() = 1 Тогда
				Попытка
					Если НаборУведомлений[0].Отправлено Тогда
						Возврат;
					КонецЕсли;
					НаборУведомлений[0].Адресат = Ссылка.Адресат;
					НаборУведомлений[0].Заявитель = Ссылка.Отправитель;
					НаборУведомлений[0].Подразделение      = Ссылка.Подразделение;
					НаборУведомлений[0].СостояниеДокумента = Ссылка.АС_СостояниеОбращения;
					РезультатДаты = АС_ОФД_ПроверитьДатуОтправки(НаборУведомлений[0].ДатаНачала, Константы.АС_КоличествоЧасовДоОтправки.Получить(), НаборУведомлений[0].ДатаНачала);
					НаборУведомлений[0].ДатаОтправки = РезультатДаты.ДатаПроверки;
					
					УстановитьПривилегированныйРежим(Истина);
					Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
						НаборУведомлений[0].ПочтовыйАдресПолучателя = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();		
					Иначе
						НаборУведомлений[0].ПочтовыйАдресПолучателя = АС_ОФД_ЗапросДополнительныхЗначений(Ссылка, "E-mail заявителя");
					КонецЕсли;
					УстановитьПривилегированныйРежим(Ложь);
				
					НаборУведомлений[0].ТекстУведомления = АС_ОФД_ЗаполнитьТекстУведомления(Ссылка.ДатаРегистрации,
					Ссылка.РегистрационныйНомер,
					Ссылка.АС_СостояниеОбращения,
					Ссылка.Адресат,
					Ссылка.ИсходящаяДата,
					Ссылка.ИсходящийНомер);
					
					Если Не ЗначениеЗаполнено(НаборУведомлений[0].ТекстУведомления) Тогда
						Отказ = Истина;
						Сообщить("Не удалось обновить текст уведомления");
						Возврат;	
					КонецЕсли;
					
					Если НЕ Отказ Тогда
						НаборУведомлений.Записать(Истина);
					Иначе
						Сообщить("Не удалось обновить уведомление");
						Возврат;
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
        			УровеньЖурналаРегистрации.Ошибка,
        			Метаданные.Справочники.ВходящиеДокументы,
        			Ссылка,
        			ОписаниеОшибки());	
				КонецПопытки
			ИначеЕсли НаборУведомлений.Количество() < 1 Тогда 
				НовоеУведомление = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьМенеджерЗаписи();
				
				УстановитьПривилегированныйРежим(Истина);
				Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
					НовоеУведомление.ПочтовыйАдресПолучателя = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();		
				Иначе
					НовоеУведомление.ПочтовыйАдресПолучателя = АС_ОФД_ЗапросДополнительныхЗначений(Ссылка, "E-mail заявителя");
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
				
				Если НЕ СтрДлина(НовоеУведомление.ПочтовыйАдресПолучателя) > 0 Тогда
					Отказ = Истина;
					Сообщить("По данному документу не создано отложенное уведомление, так как не заполнен E-mail заявителя. После внесения данных обновите уведомление.");
					Возврат;
				КонецЕсли;

				НовоеУведомление.UID                = Лев(Строка(Ссылка.УникальныйИдентификатор()), 20);
				НовоеУведомление.ВходящийДокумент   = Ссылка;
				НовоеУведомление.Адресат            = Ссылка.Адресат;
				НовоеУведомление.ДатаНачала         = ТекущаяДата();
				НовоеУведомление.Заявитель          = Ссылка.Отправитель;
				НовоеУведомление.Подразделение      = Ссылка.Подразделение;
				НовоеУведомление.Регистратор        = Ссылка;
				НовоеУведомление.СостояниеДокумента = Ссылка.АС_СостояниеОбращения;
				НовоеУведомление.ДатаРегистрации = Ссылка.ДатаРегистрации;
				НовоеУведомление.РегистрационныйНомер = Ссылка.РегистрационныйНомер;
				Если Константы.АС_КоличествоЧасовДоОтправки.Получить() > 0 Тогда
					СтруктураДаты = АС_ОФД_ПроверитьДатуОтправки(НовоеУведомление.ДатаНачала, Константы.АС_КоличествоЧасовДоОтправки.Получить(), НовоеУведомление.ДатаНачала);
					НовоеУведомление.ДатаОтправки = СтруктураДаты.ДатаПроверки;
				Иначе
					Отказ = Истина;
					Сообщить("Не заполнено количество часов до отправки уведомления.");
					Возврат;
				КонецЕсли;
				
				НовоеУведомление.ТекстУведомления = АС_ОФД_ЗаполнитьТекстУведомления(НовоеУведомление.ДатаРегистрации,
					НовоеУведомление.РегистрационныйНомер,
					НовоеУведомление.СостояниеДокумента,
					НовоеУведомление.Адресат,
					НовоеУведомление.ВходящийДокумент.ИсходящаяДата,
					НовоеУведомление.ВходящийДокумент.ИсходящийНомер);				
					
				Если НЕ ЗначениеЗаполнено(НовоеУведомление.ТекстУведомления) Тогда
					Отказ = Истина;
					Сообщить("Не удалось сформировать текст уведомления. Проверьте заполненность следующих полей и попробуйте сформировать уведомление ещё раз. Поля: Рег. номер, Рег. дата, Состояние, Адресат.");
					Возврат;	
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					НовоеУведомление.Записать(Истина); 
				Иначе
					Сообщить("Не удалось сформировать отложенное уведомление.");
					Возврат;
				КонецЕсли; 
			КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Функция АС_ОФД_ЗапросДополнительныхЗначений(Ссылка, Наименование) Экспорт
	
	EmailЗаявителяСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("E-mail заявителя");
	EmailЗаявителяЗначение = Ссылка.ДополнительныеРеквизиты.Найти(EmailЗаявителяСвойство);
	СтруктураЗначения = Новый Структура("Значение", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураЗначения, EmailЗаявителяЗначение);
	Если СтруктураЗначения.Значение <> Неопределено Тогда
		Возврат СтруктураЗначения.Значение;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидДня(ДатаПроверки)
	
		ВидДня = "РАБОЧИЙ";
			
		ЗапросДаты = Новый Запрос();
		ЗапросДаты.Текст = "ВЫБРАТЬ
		                   |	КалендарныеГрафики.Год,
		                   |	КалендарныеГрафики.ДатаГрафика,
		                   |	ВЫБОР
		                   |		КОГДА КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА
		                   |			ТОГДА ""РАБОЧИЙ""
		                   |		ИНАЧЕ ""ВЫХОДНОЙ""
		                   |	КОНЕЦ КАК ВидДня
		                   |ИЗ
		                   |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		                   |ГДЕ
		                   |	КалендарныеГрафики.ДатаГрафика = &ДатаДляПроверки
		                   |	И КалендарныеГрафики.Календарь = &КалендарьДляПроверки";
		//ЗапросДаты.УстановитьПараметр("Год", Год(ДатаПроверки));
		ЗапросДаты.УстановитьПараметр("ДатаДляПроверки", НачалоДня(ДатаПроверки));
		
		УстановитьПривилегированныйРежим(Истина);
		ЗапросДаты.УстановитьПараметр("КалендарьДляПроверки", Константы.АС_КалендарьДляОтправки.Получить());
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатДата = ЗапросДаты.Выполнить();
		
		Если НЕ РезультатДата.Пустой() Тогда
			ВыборкаДата = РезультатДата.Выбрать();
			Если ВыборкаДата.Следующий() Тогда
				ВидДня = ВыборкаДата.ВидДня;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ВидДня;		
КонецФункции

Функция АС_ОФД_ВыполнитьЗапрос(Текст, НужныПараметры = Ложь, КоличествоПараметров = 0,
	Параметр1Имя = "", Параметр1Значение = Неопределено,
	Параметр2Имя = "", Параметр2Значение = Неопределено,
	Параметр3Имя = "", Параметр3Значение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Если НужныПараметры Тогда
		Если КоличествоПараметров >= 1 Тогда
			Запрос.УстановитьПараметр(Параметр1Имя, Параметр1Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 2 Тогда
			Запрос.УстановитьПараметр(Параметр2Имя, Параметр2Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 3 Тогда
			Запрос.УстановитьПараметр(Параметр3Имя, Параметр3Значение);
		КонецЕсли;
	КонецЕсли;
	Попытка
		Результат = Запрос.Выполнить().Выгрузить();
		Возврат Результат;
	Исключение
		ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВходящиеДокументы,
		,
		ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции
	
Функция АС_ОФД_ПолучитьДеньНедели(Дата) Экспорт
	Если ДеньНедели(Дата) = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли ДеньНедели(Дата) = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли ДеньНедели(Дата) = 3 Тогда
		Возврат "Среда";
	ИначеЕсли ДеньНедели(Дата) = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли ДеньНедели(Дата) = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли ДеньНедели(Дата) = 6 Тогда
		Возврат "Суббота";
	ИначеЕсли ДеньНедели(Дата) = 7 Тогда
		Возврат "Воскресенье";
	КонецЕсли;
КонецФункции

Функция АС_ОФД_ПолучитьРазницуДатВЧасах(Время1, Время2) Экспорт
	
	Разность = Время1 - Время2;
	
	Если Разность > 0 Тогда
		Часов = Цел(Разность / 3600);
		Минут = Цел((Разность - Часов * 3600) / 60);
		
		Возврат ?(Часов > 0, Строка(Часов) + " часов ", "") + ?(Минут > 0, Строка(Минут) + " минут", "");
		
	Иначе
		Возврат "Будет отправлено при следующей проверке\на паузе";
	КонецЕсли;
	
КонецФункции

Процедура АС_ОФД_ОбновитьТаймерНаФорме(Форма, Объект) Экспорт
	
	Результат = АС_ОФД_ПолучитьВремяОтправкиПоUID(Лев(Строка(Объект.Ссылка.УникальныйИдентификатор()), 20));
	
	Форма.Элементы.АС_ОФД_Таймер.Заголовок = Результат.ДоОтправки;	
	Форма.Элементы.АС_ОФД_Время.Заголовок = Результат.ВремяОтправки;
	
КонецПроцедуры

Процедура АС_ОФД_СоздатьТаймерНаФорме(Форма, Объект) Экспорт
	
	Результат = АС_ОФД_ПолучитьВремяОтправкиПоUID(Лев(Строка(Объект.Ссылка.УникальныйИдентификатор()), 20));
	
	ЭлементТаймер = Форма.Элементы.Добавить("АС_ОФД_Таймер", Тип("ДекорацияФормы"), Форма.Элементы.ГруппаОтправитель);
	ЭлементТаймер.Заголовок = Результат.ДоОтправки;	
	
	ЭлементВремя = Форма.Элементы.Добавить("АС_ОФД_Время", Тип("ДекорацияФормы"), Форма.Элементы.ГруппаОтправитель);
	ЭлементВремя.Заголовок = Результат.ВремяОтправки;
	
КонецПроцедуры

Функция АС_ОФД_ПолучитьВремяОтправкиПоUID(UID) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДоОтправки", "");
	Результат.Вставить("ВремяОтправки", "");
	
	Попытка
		ТаблицаОтправки = АС_ОФД_ВыполнитьЗапрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                                         |	АС_УведомленияКОтправкеВФоне.ДатаОтправки,
		                                         |	АС_УведомленияКОтправкеВФоне.ДатаНачала,
		                                         |	АС_УведомленияКОтправкеВФоне.Отправлено
		                                         |ИЗ
		                                         |	РегистрСведений.АС_УведомленияКОтправкеВФоне КАК АС_УведомленияКОтправкеВФоне
		                                         |ГДЕ
		                                         |	АС_УведомленияКОтправкеВФоне.UID = &UID", Истина, 1, "UID", Лев(UID, 20));
		Если ТаблицаОтправки <> ЛОЖЬ И ТаблицаОтправки.Количество() = 1 Тогда
			Если НЕ ТаблицаОтправки[0].Отправлено Тогда
				Результат.ДоОтправки = "До отправки Заявителю: " + АС_ОФД_ПолучитьРазницуДатВЧасах(ТаблицаОтправки[0].ДатаОтправки, ТекущаяДата());
				Результат.ВремяОтправки = "Время отправки Заявителю: " + Строка(Формат(ТаблицаОтправки[0].ДатаОтправки, "ДЛФ=DDT")) + " (" + АС_ОФД_ПолучитьДеньНедели(ТаблицаОтправки[0].ДатаОтправки) + ")";
			Иначе
				Результат.ДоОтправки = "До отправки Заявителю: Уведомление уже отправлено";
				Результат.ВремяОтправки = "Было отправлено Заявителю: " + Строка(Формат(ТаблицаОтправки[0].ДатаОтправки, "ДЛФ=DDT")) + " (" + АС_ОФД_ПолучитьДеньНедели(ТаблицаОтправки[0].ДатаОтправки) + ")";
			КонецЕсли;
		Иначе
			Результат.ДоОтправки = "До отправки Заявителю: Не найдено уведомление";
			Результат.ВремяОтправки = "Время отправки Заявителю: Не найдено уведомление";		
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВходящиеДокументы,
		,
		ОписаниеОшибки());
		Сообщить("Возникла ошибка при обновлении таймера");
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Процедура АС_ОФД_ВыполнитьПроверкуИОтправитьУведомления() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	АС_ОФД_УдалитьУведомленияПомеченныхИОбновитьОчередь();
	
	Если Константы.АС_ОтпралятьУведомленияНаПочту.Получить() Тогда
		АС_ОФД_ВыполнитьПроверкуСменыАдресатов();
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	АС_УведомленияКОтправкеВФоне.ВходящийДокумент,
		               |	АС_УведомленияКОтправкеВФоне.ДатаОтправки,
		               |	АС_УведомленияКОтправкеВФоне.ДатаНачала,
		               |	АС_УведомленияКОтправкеВФоне.Заявитель,
		               |	АС_УведомленияКОтправкеВФоне.СостояниеДокумента,
		               |	АС_УведомленияКОтправкеВФоне.UID,
		               |	АС_УведомленияКОтправкеВФоне.Отправлено,
		               |	АС_УведомленияКОтправкеВФоне.ТекстУведомления,
		               |	АС_УведомленияКОтправкеВФоне.ПочтовыйАдресПолучателя,
		               |	АС_УведомленияКОтправкеВФоне.Адресат,
		               |	АС_УведомленияКОтправкеВФоне.Подразделение,
		               |	АС_УведомленияКОтправкеВФоне.ДатаРегистрации,
		               |	АС_УведомленияКОтправкеВФоне.РегистрационныйНомер
		               |ИЗ
		               |	РегистрСведений.АС_УведомленияКОтправкеВФоне КАК АС_УведомленияКОтправкеВФоне
		               |ГДЕ
		               |	АС_УведомленияКОтправкеВФоне.Отправлено = ЛОЖЬ
		               |	И АС_УведомленияКОтправкеВФоне.ВходящийДокумент.ПометкаУдаления = ЛОЖЬ
		               |	И АС_УведомленияКОтправкеВФоне.ДатаОтправки <= &ТекущаяДатаСеанса
		               |	И АС_УведомленияКОтправкеВФоне.ВходящийДокумент.АС_ДокументИсполнен = ЛОЖЬ";
		
		ТаблицаОчереди = АС_ОФД_ВыполнитьЗапрос(ТекстЗапроса, Истина, 1, "ТекущаяДатаСеанса", ТекущаяДата());
		
		Если ТаблицаОчереди <> Ложь И ТаблицаОчереди.Количество() > 0 Тогда
			Для Каждого Уведомление Из ТаблицаОчереди Цикл
				
				Отказ = Ложь;
				
				Если Уведомление.Отправлено Тогда
					Отказ = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Уведомление.ВходящийДокумент) ИЛИ НЕ ЗначениеЗаполнено(Уведомление.ТекстУведомления) Тогда
					Отказ = Истина;	
				КонецЕсли;
				
				Если ДеньНедели(Уведомление.ДатаОтправки) = 6 ИЛИ ДеньНедели(Уведомление.ДатаОтправки) = 7 Тогда
					Отказ = Истина;		
				КонецЕсли;
				
				Если Уведомление.ДатаОтправки <= ТекущаяДата() Тогда
					Если НЕ Отказ Тогда
						Попытка
							НачатьТранзакцию();
							Отправлено = АС_ОФД_ОтправитьУведомлениеЗаявителю(Уведомление.ПочтовыйАдресПолучателя, Уведомление.ТекстУведомления, Уведомление.ВходящийДокумент);
							Если Отправлено Тогда
								ЗафиксироватьТранзакцию();
								АС_ОФД_ЗафиксироватьОтправление(Уведомление, Перечисления.АС_ПричиныОтправкиУведомлений.ПриРегистрации);
							Иначе
								Если ТранзакцияАктивна() Тогда
									ОтменитьТранзакцию();
								КонецЕсли;
							КонецЕсли;
						Исключение
							Если ТранзакцияАктивна() Тогда
								ОтменитьТранзакцию();
							КонецЕсли;
							ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.Справочники.ВходящиеДокументы,
							Уведомление.ВходящийДокумент,
							ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция АС_ОФД_ОтправитьУведомлениеЗаявителю(АдресПочты, Текст, ВходящийДокумент, ПриСменеАдресата = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.АС_ОтпралятьУведомленияНаПочту.Получить() И Константы.АС_КоличествоЧасовДоОтправки.Получить() > 0 Тогда
		Если ЗначениеЗаполнено(Константы.АС_УчетныеЗаписиПочты.Получить()) Тогда
			
			Попытка
				Отправитель = Константы.АС_УчетныеЗаписиПочты.Получить();
				
				ПараметрыОтправки = Новый Структура();
				Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
					ПараметрыОтправки.Вставить("Кому", Константы.АС_АдресУведомленийДляРежимаОтладки.Получить());
				Иначе	
					ПараметрыОтправки.Вставить("Кому", АдресПочты);	
				КонецЕсли;
				
				ПараметрыОтправки.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.ПростойТекст);
				ПараметрыОтправки.Вставить("Текст", Текст);
				ПараметрыОтправки.Вставить("ОтображаемоеИмя", "АО «Корпорация «МСП»");
		
				Если ПриСменеАдресата Тогда
					//По обращению № [id обращения из карточки] от [дата обращения из карточки] по теме [тип документа из карточки] произошли изменения
					ПараметрыОтправки.Вставить("Тема", "По обращению №" + Строка(ВходящийДокумент.ИсходящийНомер) + " от " + Строка(Формат(ВходящийДокумент.ИсходящаяДата, "ДЛФ=DD")) + " по теме " + Строка(ВходящийДокумент.АС_ТипыЖалобы) + " произошли изменения");
				Иначе
					//Ваше обращение № [id обращения из карточки] от [дата обращения из карточки] по теме [тип документа из карточки] зарегистрировано
					ПараметрыОтправки.Вставить("Тема", "Ваше обращение №" + Строка(ВходящийДокумент.ИсходящийНомер) + " от " + Строка(Формат(ВходящийДокумент.ИсходящаяДата, "ДЛФ=DD")) + " по теме " + Строка(ВходящийДокумент.АС_ТипыЖалобы) + " зарегистрировано");
				КонецЕсли;
				РезультатОтправления = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыОтправки, Отправитель);
				
				Возврат Истина;
			Исключение
				ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ВходящиеДокументы,
				,
				ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ложь;	
КонецФункции

Процедура АС_ОФД_ВыполнитьПроверкуСменыАдресатов()
	//Если адресат сменился после последней отправки
	ТЗОтправленныхСменилсяАдресат = АС_ОФД_ВыполнитьЗапрос("ВЫБРАТЬ
	                                                       |	АС_ОтправленныеУведомления.ВходящийДокумент,
	                                                       |	АС_ОтправленныеУведомления.Адресат,
	                                                       |	АС_ОтправленныеУведомления.ПочтовыйАдресПолучателя,
	                                                       |	АС_ОтправленныеУведомления.UID,
	                                                       |	АС_ОтправленныеУведомления.Заявитель,
	                                                       |	АС_ОтправленныеУведомления.СостояниеДокумента,
	                                                       |	АС_ОтправленныеУведомления.ПричинаОтправки,
	                                                       |	АС_ОтправленныеУведомления.ТекстУведомления,
	                                                       |	АС_ОтправленныеУведомления.Подразделение,
	                                                       |	АС_ОтправленныеУведомления.ОтправленоУспешно
	                                                       |ИЗ
	                                                       |	РегистрСведений.АС_ОтправленныеУведомления КАК АС_ОтправленныеУведомления
	                                                       |ГДЕ
	                                                       |	АС_ОтправленныеУведомления.ОтправленоУспешно = ИСТИНА
	                                                       |	И АС_ОтправленныеУведомления.ВходящийДокумент.ПометкаУдаления = ЛОЖЬ
	                                                       |	И АС_ОтправленныеУведомления.Адресат <> АС_ОтправленныеУведомления.ВходящийДокумент.Адресат
	                                                       |	И АС_ОтправленныеУведомления.ПричинаОтправки = ЗНАЧЕНИЕ(Перечисление.АС_ПричиныОтправкиУведомлений.ПриРегистрации)
	                                                       |	И АС_ОтправленныеУведомления.ВходящийДокумент.АС_ДокументИсполнен = ЛОЖЬ");
	
	Для Каждого Уведомление Из ТЗОтправленныхСменилсяАдресат Цикл
		ТекстУведомления = АС_ОФД_ЗаполнитьТекстУведомленияСменаАдресата(Уведомление.ВходящийДокумент.ДатаРегистрации,
		Уведомление.ВходящийДокумент.РегистрационныйНомер,
		Уведомление.ВходящийДокумент.АС_СостояниеОбращения,
		Уведомление.ВходящийДокумент.Адресат,
		Уведомление.ВходящийДокумент.ИсходящаяДата,
		Уведомление.ВходящийДокумент.ИсходящийНомер);
		
		Уведомление.ТекстУведомления = ТекстУведомления;
		
		Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
			ПочтовыйАдрес = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();
		Иначе
			ПочтовыйАдрес = АС_ОФД_ЗапросДополнительныхЗначений(Уведомление.ВходящийДокумент, "E-mail заявителя");
			//ПочтовыйАдрес = Уведомление.ПочтовыйАдресПолучателя;	
		КонецЕсли;
		
		Причина = Перечисления.АС_ПричиныОтправкиУведомлений.ПриСменеАдресата;
		
		Попытка
			НачатьТранзакцию();
			Отправлено = АС_ОФД_ОтправитьУведомлениеЗаявителю(ПочтовыйАдрес, ТекстУведомления, Уведомление.ВходящийДокумент, Истина);
			Если Отправлено Тогда
				ЗафиксироватьТранзакцию();
				АС_ОФД_ЗафиксироватьОтправление(Уведомление, Причина);
				НаборЗаписей = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.UID.Установить(Уведомление.UID);
				НаборЗаписей.Отбор.ВходящийДокумент.Установить(Уведомление.ВходящийДокумент);
				НаборЗаписей.Отбор.ПричинаОтправки.Установить(Перечисления.АС_ПричиныОтправкиУведомлений.ПриРегистрации);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					НаборЗаписей[0].Адресат = Уведомление.ВходящийДокумент.Адресат;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			Иначе
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
			КонецЕсли;
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ВходящиеДокументы,
			Уведомление.ВходящийДокумент,
			ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

Процедура АС_ОФД_ЗафиксироватьОтправление(Уведомление, Причина)
	Если Причина = Перечисления.АС_ПричиныОтправкиУведомлений.ПриРегистрации Тогда
		НаборЗаписей = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.UID.Установить(Лев(Уведомление.UID, 20));
		НаборЗаписей.Отбор.ВходящийДокумент.Установить(Уведомление.ВходящийДокумент);
		НаборЗаписей.Отбор.ПричинаОтправки.Установить(Причина);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() < 1 Тогда
			Попытка
				ЗаписьОтправлено = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьМенеджерЗаписи();
				ЗаписьОтправлено.ВходящийДокумент        = Уведомление.ВходящийДокумент;
				ЗаписьОтправлено.ДатаОтправки            = ТекущаяДата();
				ЗаписьОтправлено.Заявитель               = Уведомление.Заявитель;
				ЗаписьОтправлено.СостояниеДокумента      = Уведомление.СостояниеДокумента;
				ЗаписьОтправлено.UID                     = Уведомление.UID;
				ЗаписьОтправлено.ТекстУведомления        = Уведомление.ТекстУведомления;
				УстановитьПривилегированныйРежим(Истина);
				Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
					ПочтовыйАдрес = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();
				Иначе
					ПочтовыйАдрес = АС_ОФД_ЗапросДополнительныхЗначений(ЗаписьОтправлено.ВходящийДокумент, "E-mail заявителя");	
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
				ЗаписьОтправлено.ПочтовыйАдресПолучателя = ПочтовыйАдрес;
				ЗаписьОтправлено.Адресат                 = Уведомление.ВходящийДокумент.Адресат;
				ЗаписьОтправлено.Подразделение           = Уведомление.Подразделение;
				ЗаписьОтправлено.ПричинаОтправки         = Причина;
				ЗаписьОтправлено.ОтправленоУспешно       = Истина;
				
				ЗаписьОтправлено.Записать(Истина);
				
				НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
				НаборУведомлений.Отбор.ВходящийДокумент.Установить(Уведомление.ВходящийДокумент);
				НаборУведомлений.Отбор.UID.Установить(Лев(Уведомление.UID, 20));
				
				НаборУведомлений.Прочитать();
				Если НаборУведомлений.Количество() = 1 Тогда
					Если НаборУведомлений[0].Отправлено Тогда
						Возврат;
					КонецЕсли;
					НаборУведомлений[0].Отправлено = Истина;
					НаборУведомлений.Записать(Истина);
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ВходящиеДокументы,
				Уведомление.ВходящийДокумент,
				ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			ЗаписьОтправлено = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьМенеджерЗаписи();
			ЗаписьОтправлено.ВходящийДокумент        = Уведомление.ВходящийДокумент;
			ЗаписьОтправлено.ДатаОтправки            = ТекущаяДата();
			ЗаписьОтправлено.Заявитель               = Уведомление.Заявитель;
			ЗаписьОтправлено.СостояниеДокумента      = Уведомление.СостояниеДокумента;
			ЗаписьОтправлено.UID                     = Уведомление.UID;
			ЗаписьОтправлено.ТекстУведомления        = Уведомление.ТекстУведомления;
			УстановитьПривилегированныйРежим(Истина);
			Если Константы.АС_УведомленияВРежимеОтладки.Получить() Тогда
				ПочтовыйАдрес = Константы.АС_АдресУведомленийДляРежимаОтладки.Получить();
			Иначе
				ПочтовыйАдрес = АС_ОФД_ЗапросДополнительныхЗначений(ЗаписьОтправлено.ВходящийДокумент, "E-mail заявителя");	
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			ЗаписьОтправлено.ПочтовыйАдресПолучателя = ПочтовыйАдрес;
			ЗаписьОтправлено.Адресат                 = Уведомление.ВходящийДокумент.Адресат;
			ЗаписьОтправлено.Подразделение           = Уведомление.Подразделение;
			ЗаписьОтправлено.ПричинаОтправки         = Причина;
			ЗаписьОтправлено.ОтправленоУспешно       = Истина;
			
			ЗаписьОтправлено.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ВходящиеДокументы,
			Уведомление.ВходящийДокумент,
			ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура АС_ОФД_УдалитьУведомленияПомеченныхИОбновитьОчередь()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	АС_УведомленияКОтправкеВФоне.ВходящийДокумент,
	               |	АС_УведомленияКОтправкеВФоне.UID,
	               |	АС_УведомленияКОтправкеВФоне.Отправлено
	               |ИЗ
	               |	РегистрСведений.АС_УведомленияКОтправкеВФоне КАК АС_УведомленияКОтправкеВФоне
	               |ГДЕ
	               |	АС_УведомленияКОтправкеВФоне.Отправлено = ЛОЖЬ
	               |	И АС_УведомленияКОтправкеВФоне.ВходящийДокумент.АС_ДокументИсполнен = ЛОЖЬ";
	
	ТаблицаОчереди = АС_ОФД_ВыполнитьЗапрос(ТекстЗапроса);
	
	Если ТаблицаОчереди <> Ложь И ТаблицаОчереди.Количество() > 0 Тогда
		Для Каждого ТекСтр Из ТаблицаОчереди Цикл
			ПервоеУдалено = Ложь;
			НаборУведомлений = РегистрыСведений.АС_УведомленияКОтправкеВФоне.СоздатьНаборЗаписей();
			НаборУведомлений.Отбор.ВходящийДокумент.Установить(ТекСтр.ВходящийДокумент);
			НаборУведомлений.Отбор.UID.Установить(Лев(Строка(ТекСтр.UID), 20));
			
			НаборУведомлений.Прочитать();
			Если НаборУведомлений.Количество() = 1 Тогда
				Если ТекСтр.ВходящийДокумент.ВидДокумента <> Константы.ВидДокументаЖалоба_АС.Получить() Тогда
					Если НаборУведомлений[0].Отправлено Тогда
						Продолжить;
					КонецЕсли;
					НаборУведомлений.Удалить(НаборУведомлений[0]);
					НаборУведомлений.Записать(Истина);
					ПервоеУдалено = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПервоеУдалено Тогда
				НаборУведомлений = РегистрыСведений.АС_ОтправленныеУведомления.СоздатьНаборЗаписей();
				НаборУведомлений.Отбор.ВходящийДокумент.Установить(ТекСтр.ВходящийДокумент);
				НаборУведомлений.Отбор.UID.Установить(Лев(Строка(ТекСтр.UID), 20));
				НаборУведомлений.Отбор.ПричинаОтправки = Перечисления.АС_ПричиныОтправкиУведомлений.ПриРегистрации;
				
				НаборУведомлений.Прочитать();
				Если НаборУведомлений.Количество() = 1 Тогда
					Если ТекСтр.ВходящийДокумент.ВидДокумента <> Константы.ВидДокументаЖалоба_АС.Получить() Тогда
						НаборУведомлений.Удалить(НаборУведомлений[0]);
						НаборУведомлений.Записать(Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтр Из ТаблицаОчереди Цикл
			АС_ОФД_СоздатьОчередьОтправки(ТекСтр.ВходящийДокумент,,,Истина);
		КонецЦикла;
	КонецЕсли
	
	
КонецПроцедуры

Процедура АС_ОФД_ИзменитьИсполнителя(Задача) Экспорт
	Попытка
		ЗадачаСсылка = Задача;
		Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
			Для Каждого Предмет Из ЗадачаСсылка.Предметы Цикл
				Если Предмет.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
					Если ТипЗнч(Предмет.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
						Если Предмет.Предмет.ВидДокумента = Константы.ВидДокументаЖалоба_АС.Получить() Тогда
							Если ЗначениеЗаполнено(Предмет.Предмет.РегистрационныйНомер) И ЗначениеЗаполнено(Предмет.Предмет.ДатаРегистрации) Тогда
								ВхДокументОбъект = Предмет.Предмет.ПолучитьОбъект();
								ВхДокументОбъект.Адресат = Задача.Исполнитель;
								ВхДокументОбъект.Записать();
								Сообщить("Изменен Адресат во входящем документе " + Строка(Предмет.Предмет));
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Отправка уведомлений 360 (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВходящиеДокументы,
		Задача,
		ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьАдресСервиса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АС_PDF_АдресСервисаШтамповPDF.Значение КАК Адрес
	               |ИЗ
	               |	Константа.АС_PDF_АдресСервисаШтамповPDF КАК АС_PDF_АдресСервисаШтамповPDF";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьВерсиюФайла(Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ВерсииФайлов.Ссылка
	               |ИЗ
	               |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	               |ГДЕ
	               |	ВерсииФайлов.Ссылка = &Владелец
	               |	И ВерсииФайлов.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВерсииФайлов.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

	
КонецФункции

Функция ПодписатьФайл(Файл)	
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(Файл);
	
	Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(Файл);
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеФайла.Зашифрован Тогда
		ТекстПредупреждения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(Файл);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АС_PDF_ПоставитьШтамп(СправочникФайл, Документ) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат("Произошла ошибка при выборе документа");
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") ИЛИ ТипЗнч(Документ) = Тип("СправочникСсылка.ВходящиеДокументы") ИЛИ ТипЗнч(Документ) = Тип("СправочникСсылка.ИсходящиеДокументы")) Тогда
		Сообщить("Неверный тип документа для установки штампа.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.ДатаРегистрации) ИЛИ НЕ ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
		Сообщить("Нельзя установить штамп на незарегистрированный документ.");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолучитьАдресСервиса() = Ложь Тогда
		Сообщить("Адрес сервиса по штампу PDF не найден. Пожалуйста, заполните константу Адрес сервиса штампов PDF (АС).");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СправочникФайл) Тогда
		Сообщить("Файл, на который вы пытаетесь поставить штамп, пуст. Пожалуйста, перепроверьте содержимое файла.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СправочникФайл.ТекущаяВерсия) Тогда
		Сообщить("Не найдена текущая версия штампа");
		Возврат Ложь;
	КонецЕсли;
	
	Если СправочникФайл.ТекущаяВерсия.АС_УстановленШтамп Тогда
		Сообщить("Штамп на эту версию файла уже установлен");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПодписатьФайл(СправочникФайл) Тогда
		Сообщить("На редактируемый или подписанный файл нельзя поставить штамп.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СправочникФайл.ТекущаяВерсияТом) ИЛИ НЕ ЗначениеЗаполнено(СправочникФайл.ТекущаяВерсияПутьКФайлу) Тогда
		Сообщить("У выбранного PDF файла отутствует путь к тому хранения или самому файлу.");
		Возврат Ложь;
	КонецЕсли;
	
	СтарыйПутьКФайлу = Строка(СправочникФайл.ТекущаяВерсияПутьКФайлу);
	
	Попытка
		СистемнаяИнфо = Новый СистемнаяИнформация;
		ТипПлатформыСервера = СистемнаяИнфо.ТипПлатформы;
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
			Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			СтарыйТом = Строка(СправочникФайл.ТекущаяВерсияТом.ПолныйПутьWindows);
		Иначе
			СтарыйТом = Строка(СправочникФайл.ТекущаяВерсияТом.ПолныйПутьLinux);
		КонецЕсли;
	Исключение
		Сообщить("Не удалось определить тип ОС для получения тома");
		Возврат Ложь; 	
	КонецПопытки;
	
	СтарыйФайлPDF = Новый Файл(СтарыйТом + СтарыйПутьКФайлу);
	
	Если НЕ (СтарыйФайлPDF.Расширение = ".pdf" ИЛИ СтарыйФайлPDF.Расширение = "pdf") Тогда
		Сообщить("Выбранный файл должен являться PDF для установки штампа");
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ СтарыйФайлPDF.Существует() Тогда
		Сообщить("Файл не найден на диске.");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтарыйФайлPDF.Размер() <= 0 Тогда
		Сообщить("Выбранный файл поврежден, невозможно установить штамп");
		Возврат Ложь;
	КонецЕсли;

	
	СтароеНаименованиеИзСправочника = СправочникФайл.Наименование;
	ИдентификаторНовогоФайла = "_" + Лев(Строка(Новый УникальныйИдентификатор), 10);
	Постфикс = "[СО ШТАМПОМ] " + Строка(Формат( ТекущаяДата(), "ДФ=yyyy-MM-dd")) + " " + СтрЗаменить(Строка(Формат(ТекущаяДата(), "ДЛФ=T")), ":", "-");
	
	ДД_PDF = Новый ДвоичныеДанные(СтарыйТом + СтарыйПутьКФайлу);
	
	СтараяВерсия = СправочникФайл.ТекущаяВерсияНомерВерсии;
	
	Файлы = Новый Структура;
	Файлы.Вставить("Имя", "file");
	Файлы.Вставить("ИмяФайла", "FileToPDF");
	Файлы.Вставить("Данные", ДД_PDF);
	Файлы.Вставить("Тип", "application/pdf");
	
	Номер = Строка(Документ.РегистрационныйНомер);
	
	
	Данные = Новый Структура();
	Данные.Вставить("date", Строка(Формат(Документ.ДатаРегистрации, "ДФ=yyyy-MM-dd")));
	Данные.Вставить("number", Строка(Документ.РегистрационныйНомер));
	Данные.Вставить("classified", Строка(Документ.ГрифДоступа));
	
	Результат = Post(ПолучитьАдресСервиса(), Неопределено, Новый Структура("Файлы, Данные", Файлы, Данные));
	
	Если НЕ (Результат.КодСостояния > 199 И Результат.КодСостояния < 300)  Тогда
		Возврат Ложь;	
	КонецЕсли;	
		
	НовыйPDF = Результат.Тело;
	ДанныеДляСохранения = ЗаписатьДДВФайл(НовыйPDF);
	
	ВременноеХранилищеФайла = ПоместитьВоВременноеХранилище(ДанныеДляСохранения);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляСохранения) Тогда
		Сообщить("Новый файл с подписью не найден.");
		Возврат Ложь;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = ВременноеХранилищеФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = Неопределено;
	СведенияОФайле.ВремяИзменения = ТекущаяДата();
	СведенияОФайле.Комментарий = "Файл подписан с помощью сервиса HTTP для подписи документов PDF"; 
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
	СведенияОФайле.Размер = ДанныеДляСохранения.Размер();
	СведенияОФайле.ИмяБезРасширения = СтароеНаименованиеИзСправочника + " " + Постфикс;
	СведенияОФайле.РасширениеБезТочки = "pdf";
	СведенияОФайле.ЗаписатьВИсторию = Истина;
	СведенияОФайле.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	
	Попытка
		НачатьТранзакцию();
		Если ПодписатьФайл(СправочникФайл) Тогда
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(СправочникФайл, СведенияОФайле);
			ТекущаяВерсияОбъект = СправочникФайл.ТекущаяВерсия.ПолучитьОбъект();
			ТекущаяВерсияОбъект.Комментарий = "Вставка регистрационного штампа";
			ТекущаяВерсияОбъект.АС_УстановленШтамп = Истина;
			ТекущаяВерсияОбъект.Записать();			
			
			ФайлОбъект = СправочникФайл.ПолучитьОбъект();
			ФайлОбъект.Записать();
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
		Сообщить("При установке штампа на файл " + Строка(СправочникФайл.Наименование) + " версии " + Строка(СправочникФайл.ТекущаяВерсияНомерВерсии) + " произошла непредвиденная ошибка");
	КонецПопытки;

	Возврат Истина;
КонецФункции

Функция ЗаписатьДДВФайл(ДД)
	ХранилищеДанных = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	ДанныеДляСохранения = ХранилищеДанных.Получить();
	Возврат ДанныеДляСохранения;
КонецФункции

Функция ЗаписатьДДВХранилище(ДД)
	ХранилищеДанных = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	Возврат ХранилищеДанных;
КонецФункции

// Отправляет GET запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?).
//                                                См. описание Сессия.ПараметрыЗапроса.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Get(URL, ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, ПараметрыЗапроса, Неопределено, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "GET", URL, ДополнительныеПараметры);
	
КонецФункции

// Отправляет OPTIONS запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Options(URL, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт
	
	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Неопределено, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "OPTIONS", URL, ДополнительныеПараметры);
	
КонецФункции

// Отправляет HEAD запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Head(URL, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт
	
	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Неопределено, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "HEAD", URL, ДополнительныеПараметры);
	
КонецФункции

// Отправляет POST запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие, Строка, ДвоичныеДанные - см. описание ДополнительныеПараметры.Данные.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Post(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт
	
	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Данные, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "POST", URL, ДополнительныеПараметры);

КонецФункции

// Отправляет PUT запрос
//
// Параметры:
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие, Строка, ДвоичныеДанные - см. описание ДополнительныеПараметры.Данные.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Put(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Данные, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "PUT", URL, ДополнительныеПараметры);
	
КонецФункции

// Отправляет PATCH запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие, Строка, ДвоичныеДанные - см. описание ДополнительныеПараметры.Данные.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Patch(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Данные, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "PATCH", URL, ДополнительныеПараметры);
	
КонецФункции

// Отправляет DELETE запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие, Строка, ДвоичныеДанные - см. описание ДополнительныеПараметры.Данные.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетод.
//

Функция Delete(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Данные, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, "DELETE", URL, ДополнительныеПараметры);
	
КонецФункции

// Отправляет GET запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?).
//                                                См. описание Сессия.ПараметрыЗапроса.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Соответствие, Структура - ответ, десериализованный из JSON. 
//                             Параметры преобразования см. ДополнительныеПараметры.ПараметрыПреобразованияJSON.
//

Функция GetJson(URL, ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, ПараметрыЗапроса, Неопределено, Неопределено);
	ПараметрыПреобразованияJSON = 
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыПреобразованияJSON", Неопределено);
	Возврат КакJson(ВызватьHTTPМетод(ТекущаяСессия, "GET", URL, ДополнительныеПараметры), ПараметрыПреобразованияJSON);
	
КонецФункции

// Отправляет POST запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Json - Структура, Соответствие - данные, которые необходимо сериализовать в JSON.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Соответствие, Структура - ответ, десериализованный из JSON. 
//                             Параметры преобразования см. ДополнительныеПараметры.ПараметрыПреобразованияJSON 
//

Функция PostJson(URL, Json, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт
	
	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Неопределено, Json);
	ПараметрыПреобразованияJSON = 
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыПреобразованияJSON", Неопределено);
	Возврат КакJson(ВызватьHTTPМетод(ТекущаяСессия, "POST", URL, ДополнительныеПараметры), ПараметрыПреобразованияJSON);

КонецФункции

// Отправляет PUT запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Json - Структура, Соответствие - данные, которые необходимо сериализовать в JSON.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Соответствие, Структура - ответ, десериализованный из JSON. 
//                             Параметры преобразования см. ДополнительныеПараметры.ПараметрыПреобразованияJSON 
//

Функция PutJson(URL, Json, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Неопределено, Json);
	ПараметрыПреобразованияJSON = 
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыПреобразованияJSON", Неопределено);
	Возврат КакJson(ВызватьHTTPМетод(ТекущаяСессия, "PUT", URL, ДополнительныеПараметры), ПараметрыПреобразованияJSON);
	
КонецФункции

// Отправляет DELETE запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Json - Структура, Соответствие - данные, которые необходимо сериализовать в JSON.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетод.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Соответствие, Структура - ответ, десериализованный из JSON. 
//                             Параметры преобразования см. ДополнительныеПараметры.ПараметрыПреобразованияJSON 
// 

Функция DeleteJson(URL, Json, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Неопределено, Json);
	ПараметрыПреобразованияJSON = 
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыПреобразованияJSON", Неопределено);
	Возврат КакJson(ВызватьHTTPМетод(ТекущаяСессия, "DELETE", URL, ДополнительныеПараметры), ПараметрыПреобразованияJSON);
	
КонецФункции

// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода.
//
// Параметры:
//   Метод - Строка - имя HTTP-метода для запроса.
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - позволяет задать дополнительные параметры:
//      *Заголовки - Соответствие - см. описание Сессия.Заголовки.
//      *Аутентификация - Структура - см. описание Сессия.Аутентификация
//      *Прокси - ИнтернетПрокси - см. описание Сессия.Прокси.
//      *ПараметрыЗапроса - Структура, Соответствие - см. описание Сессия.ПараметрыЗапроса.
//      *ПроверятьSSL - Булево - см. описание Сессия.ПроверятьSSL.
//      *КлиентскийСертификатSSL - см. описание Сессия.КлиентскийСертификатSSL.
//      *Cookies - Массив - см. описание Сессия.Cookies.
//      *Таймаут - Число - время ожидания осуществляемого соединения и операций, в секундах.
//                 Значение по умолчанию - 30 сек.
//      *РазрешитьПеренаправление - Булево - Истина - редиректы будут автоматически разрешены.
//                                           Ложь - будет выполнен только один запрос к серверу.
//      *Json - Структура, Соответствие - данные, которые необходимо сериализовать в JSON.
//      *ПараметрыПреобразованияJSON - Структура - задает параметры преобразования JSON:
//          **ПрочитатьВСоответствие - Булево - Если Истина, чтение объекта JSON будет выполнено в Соответствие.
//                                              Если Ложь, объекты будут считываться в объект типа Структура.
//          **ФорматДатыJSON - ФорматДатыJSON - формат, в котором представлена дата в строке,
//                             подлежащей преобразованию. 
//          **ИменаСвойствСоЗначениямиДата -  Массив, Строка - имена свойств JSON,
//                                            для которых нужно вызывать восстановление даты из строки.
//      *ПараметрыЗаписиJSON - Структура - параметры, используемые при записи объекта JSON.
//                                         См. в синтаксис-помощнике описание ПараметрыЗаписиJSON.
//      *Данные - Структура, Соответствие - поля формы, которые необходимо отправить в запрос:
//          **<Ключ> - Строка - имя поля.
//          **<Значение> - Строка - значение поля.
//              - Строка, ДвоичныеДанные - произвольные данные, которые необходимо отправить в запросе.
//      *Файлы - Структура, Массив - файлы, которые необходимо отправить в запросе:
//          **Имя - Строка - имя поля формы.
//          **Данные - ДвоичныеДанные - двоичные данные файла.
//          **ИмяФайла - Строка - имя файла.
//          **Тип - Строка - MIME-тип файла.
//          **Заголовки - Соответствие, Неопределено - HTTP заголовки запроса.
//      *МаксимальноеКоличествоПовторов - Число - количество повторных попыток соединения/отправки запроса.
//                                        Между попытками выполняется задержка, растущая по экспоненте.
//                                        Но если код состояния один из 413, 429, 503
//                                        и в ответе есть заголовок Retry-After,
//                                        то время задержки формируется из значения этого заголовка
//                                        Значение по умолчанию: 0 - повторы не выполняются.
//      *МаксимальноеВремяПовторов - Число - максимальное общее время (в секундах) отправки запроса с учетом повторов.
//                                   Значение по умолчанию: 600.
//      *КоэффициентЭкспоненциальнойЗадержки - Число - коэффициент изменения экспоненциальной задержки.
//                                             1 формирует последовательность задержек: 1, 2, 4, 8 и т.д.
//                                             2 формируется последовательность задержек: 2, 4, 8, 16 и т.д.
//                                             ...
//                                             Значение по умолчанию: 1.
//      *ПовторятьДляКодовСостояний - Неопределено - повторы будут выполняться для кодов состояний >= 500.
//                                  - Массив - повторы будут выполняться для конкретных кодов состояний.
//                                    Значение по умолчанию: Неопределено.
//   Сессия - Структура - см. возвращаемое значение функции СоздатьСессию.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос:
//      *ВремяВыполнения - Число - время выполнения запроса в миллисекундах.
//      *Cookies - Соответствие - cookies полученные с сервера.
//      *Заголовки - Соответствие - HTTP заголовки ответа.
//      *ЭтоПостоянныйРедирект - Булево - признак постоянного редиректа.
//      *ЭтоРедирект - Булево - признак редиректа.
//      *Кодировка - Строка - кодировка текста ответа.
//      *Тело - ДвоичныеДанные - тело ответа.
//      *КодСостояния - Число - код состояния ответа.
//      *URL - Строка - итоговый URL, по которому был выполнен запрос.
//

Функция ВызватьМетод(Метод, URL, ДополнительныеПараметры = Неопределено, Сессия = Неопределено) Экспорт 

	ТекущаяСессия = ?(Сессия = Неопределено, СоздатьСессию(), Сессия);
	ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, Неопределено, Неопределено, Неопределено);
	Возврат ВызватьHTTPМетод(ТекущаяСессия, Метод, URL, ДополнительныеПараметры);
	
КонецФункции

// Создает объект для хранения параметров сессии.
//
// Возвращаемое значение:
//   Структура - параметры сессии:
//      *Заголовки - Соответствие - HTTP заголовки запроса.
//      *Аутентификация - Структура - параметры аутентификации запроса.
//          *ИспользоватьАутентификациюОС - Булево - включает использование аутентификации NTLM или Negotiate.
//                                                   Значение по умолчанию: Ложь.
//          *Тип - Строка - тип аутентификации. Для Basic Тип можно не указывать.
//       Если Тип = Digest или Basic: 
//          *Пользователь - Строка - имя пользователя.
//          *Пароль - Строка - пароль пользователя.
//       Если Тип = AWS4-HMAC-SHA256:
//          *ИдентификаторКлючаДоступа - Строка - идентификатор ключа доступа.
//          *СекретныйКлюч - Строка - секретный ключ.
//          *Сервис - Строка - сервис, к которому выполняется подключение.
//          *Регион - Строка - регион, к которому выполняется подключение.
//      *Прокси - ИнтернетПрокси - параметры прокси, которые будут использованы при отправке запроса.
//                Значение по умолчанию: Неопределено. При этом если в конфигурации используется БСП, 
//                                                     то значения прокси будет взято из БСП.
//      *ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?):
//          *<Ключ> - Строка - ключ параметра в URL.
//          *<Значение> - Строка - значение параметра URL
//                      - Массив - сформирует строку из нескольких параметров: key=value1&key=value2 и т.д.
//      *ПроверятьSSL - Булево - Ложь - проверка сертификата сервера не выполняется.
//                             - Истина - используется значение СертификатыУдостоверяющихЦентровОС. 
//                    - СертификатыУдостоверяющихЦентровФайл - см. в синтаксис-помощнике описание
//                                                             СертификатыУдостоверяющихЦентровФайл.
//                      Значение по умолчанию: Истина.
//      *КлиентскийСертификатSSL - СертификатКлиентаФайл - см. в синтаксис-помощнике описание СертификатКлиентаФайл.
//                               - СертификатКлиентаWindows - см. в синтаксис-помощнике описание
//                                                            СертификатКлиентаWindows.
//                                 Значение по умолчанию: Неопределено.
//      *МаксимальноеКоличествоПеренаправлений - Число - максимальное количество редиректов. Защита от зацикливания.
//                                               Значение по умолчанию:
//                                               см. функцию МаксимальноеКоличествоПеренаправлений 
//      *Cookies - Соответствие - хранилище cookies.
//

Функция СоздатьСессию() Экспорт
	
	Сессия = Новый Структура;
	Сессия.Вставить("Заголовки", ЗаголовкиПоУмолчанию());
	Сессия.Вставить("Аутентификация", Неопределено);
	Сессия.Вставить("Прокси", Неопределено);
	Сессия.Вставить("ПараметрыЗапроса", Новый Структура);
	Сессия.Вставить("ПроверятьSSL", Истина);
	Сессия.Вставить("КлиентскийСертификатSSL", Неопределено);
	Сессия.Вставить("МаксимальноеКоличествоПеренаправлений", МаксимальноеКоличествоПеренаправлений());
	Сессия.Вставить("Cookies", Новый Соответствие);
	Сессия.Вставить("СлужебныеДанные", Новый Структура("ПараметрыDigest"));
	
	Возврат Сессия;
	
КонецФункции

// Возвращает ответ сервера в виде десериализованного значения JSON.
//
// Параметры:
//   Ответ - Структура - ответ сервера на отправленный запрос. 
//                      См. описание возвращаемого значения ВызватьМетод.
//   ПараметрыПреобразованияJSON - Структура - задает параметры преобразования JSON.
//      *ПрочитатьВСоответствие - Булево - Если Истина, чтение объекта JSON будет выполнено в Соответствие.
//                                         Если Ложь, объекты будут считываться в объект типа Структура.
//      *ФорматДатыJSON - ФорматДатыJSON - формат, в котором представлена дата в строке, подлежащей преобразованию. 
//      *ИменаСвойствСоЗначениямиДата -  Массив, Строка - имена свойств JSON,
//                                       для которых нужно вызывать восстановление даты из строки.
// 
// Возвращаемое значение:
//   Соответствие - ответ сервера в виде десериализованного значения JSON.
//                  Если ПараметрыПреобразования.ПрочитатьВСоответствие = Истина (по умолчанию).
//   Структура - если ПараметрыПреобразования.ПрочитатьВСоответствие = Ложь. 
//

Функция КакJson(Ответ, ПараметрыПреобразованияJSON = Неопределено) Экспорт
	
	Возврат JsonВОбъект(РаспаковатьОтвет(Ответ), Ответ.Кодировка, ПараметрыПреобразованияJSON);
	
КонецФункции

// Возвращает ответ сервера в виде текста.
//
// Параметры:
//   Ответ - Структура - ответ сервера на отправленный запрос. 
//                       См. описание возвращаемого значения ВызватьМетод.
//   Кодировка - Строка, КодировкаТекста - определяет кодировку текста.
//                                         Если значение не задано, то кодировка извлекается из Ответ.Кодировка.
// 
// Возвращаемое значение:
//   Строка - ответ сервера в виде текста. 
//

Функция КакТекст(Ответ, Кодировка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = Ответ.Кодировка;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(РаспаковатьОтвет(Ответ).ОткрытьПотокДляЧтения(), Кодировка);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если Текст = Неопределено Тогда
		Текст = "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает ответ сервера в двоичных данных.
//
// Параметры:
//   Ответ - Структура - ответ сервера на отправленный запрос. 
//                       См. описание возвращаемого значения ВызватьМетод.
//
// Возвращаемое значение:
//   Строка - ответ сервера в виде двоичных данных. 
//

Функция КакДвоичныеДанные(Ответ) Экспорт
	
	Возврат РаспаковатьОтвет(Ответ);
	
КонецФункции

// Возвращает структурированное представление URL.
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//
// Возвращаемое значение:
//   Структура - структура URL:
//      *Схема - Строка - схема обращения к серверу (http, https).
//      *Аутентификация - Структура - параметры аутентификации:
//          *Пользователь - Строка - имя пользователя.
//          *Пароль - Строка - пароль пользователя.
//      *Сервер - Строка - адрес сервера.
//      *Порт - Число - порт сервера.
//      *Путь - Строка - адрес ресурса на сервере.
//      *ПараметрыЗапроса - Соответствие - параметры запроса передаваемые на сервер в URL (часть после ?):
//          *<Ключ> - Строка - ключ параметра в URL.
//          *<Значение> - Строка - значение параметра URL;
//                      - Массив - значения параметра (key=value1&key=value2).
//      *Фрагмент - Строка - часть URL после #. 
//

Функция РазобратьURL(Знач URL) Экспорт

	Схема = "";
	Путь = "";
	Аутентификация = Новый Структура("Пользователь, Пароль", "", "");
	Сервер = "";
	Порт = "";
	Фрагмент = "";
	
	ДопустимыеСхемы = СтрРазделить("http,https", ",");
	
	URLБезСхемы = URL;
	РазбитьСтрокуПоРазделителю(Схема, URLБезСхемы, "://");
	Если ДопустимыеСхемы.Найти(НРег(Схема)) <> Неопределено Тогда
		URL = URLБезСхемы;
	Иначе
		Схема = "";
	КонецЕсли;
	
	Результат = РазделитьПоПервомуНайденномуРазделителю(URL, СтрРазделить("/,?,#", ","));
	URL = Результат[0];
	Если ЗначениеЗаполнено(Результат[2]) Тогда
		Путь = Результат[2] + Результат[1];
	КонецЕсли;
	
	АутентификацияСтрока = "";
	РазбитьСтрокуПоРазделителю(АутентификацияСтрока, URL, "@");
	Если ЗначениеЗаполнено(АутентификацияСтрока) Тогда
		АутентификацияЧасти = СтрРазделить(АутентификацияСтрока, ":");
		Аутентификация.Пользователь = АутентификацияЧасти[0];
		Аутентификация.Пароль       = АутентификацияЧасти[1];
	КонецЕсли;

	// IPv6
	РазбитьСтрокуПоРазделителю(Сервер, URL, "]");
	Если ЗначениеЗаполнено(Сервер) Тогда
		Сервер = Сервер + "]";
	КонецЕсли;
	
	URL = СтрЗаменить(URL, "/", "");
	
	РазбитьСтрокуПоРазделителю(Порт, URL, ":", Истина);
	
	Если Не ЗначениеЗаполнено(Сервер) Тогда
		Сервер = URL;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порт) Тогда 
		Порт = Число(Порт);
	Иначе
		Порт = 0;
	КонецЕсли;
	
	РазбитьСтрокуПоРазделителю(Фрагмент, Путь, "#", Истина);
	
	ПараметрыЗапроса = ЗаполнитьПараметрыЗапроса(Путь);
	
	Если Не ЗначениеЗаполнено(Схема) Тогда
		Схема = "http";
	КонецЕсли;
	Путь = ?(ЗначениеЗаполнено(Путь), Путь, "/");
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Аутентификация", Аутентификация);
	Результат.Вставить("Сервер", Сервер);
	Результат.Вставить("Порт", Порт);
	Результат.Вставить("Путь", Путь);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	Результат.Вставить("Фрагмент", Фрагмент);

	Возврат Результат;
	
КонецФункции

// Преобразование Объекта в JSON.
//
// Параметры:
//   Объект - Произвольный - данные, которые необходимо преобразовать в JSON.
//   ПараметрыПреобразования - Структура - кодировка текста JSON. Значение по умолчанию - utf-8.
//      *ФорматДатыJSON - ФорматДатыJSON - определяет формат сериализации дат JSON-объектов.
//   ПараметрыЗаписи - Структура - параметры преобразования JSON:
//      *ПереносСтрок - ПереносСтрокJSON - определяет способ переноса строк,
//                      который будет использован при записи данных JSON.
//      *СимволыОтступа - Строка - определяет символы отступа, используемые при записи данных JSON.
//      *ИспользоватьДвойныеКавычки - Булево - определяет, будут ли при записи имена свойств JSON
//                                    записываться в двойных кавычках.
//      *ЭкранированиеСимволов - ЭкранированиеСимволовJSON - определяет используемый способ экранирования (замены)
//                               символов при записи данных JSON.
//      *ЭкранироватьУгловыеСкобки - Булево - определяет, будут ли при записи экранироваться символы "<" и ">".
//      *ЭкранироватьРазделителиСтрок - Булево - определяет, будут ли экранироваться разделители строк
//                                      U+2028 (line-separator) и U+2029 (page-separator).
//      *ЭкранироватьАмперсанд - Булево - определяет, будет ли при записи экранироваться символ амперсанда "&".
//      *ЭкранироватьОдинарныеКавычки - Булево - определяет, будут ли экранироваться одинарные кавычки.
//      *ЭкранироватьСлеш - Булево - определяет, будет ли экранироваться слеш (косая черта) при записи значения.
// 
// Возвращаемое значение:
//   Строка - объект в формате JSON. 
//

Функция ОбъектВJson(Объект, Знач ПараметрыПреобразования = Неопределено, Знач ПараметрыЗаписи = Неопределено) Экспорт
	
	ПараметрыПреобразованияJSON = ДополнитьПараметрыПреобразованияJSON(ПараметрыПреобразования);
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ПараметрыПреобразованияJSON.ФорматДатыJSON;
	
	ПараметрыЗаписи = ДополнитьПараметрыЗаписиJSON(ПараметрыЗаписи);
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(
		ПараметрыЗаписи.ПереносСтрок,
		ПараметрыЗаписи.СимволыОтступа,
		ПараметрыЗаписи.ИспользоватьДвойныеКавычки,
		ПараметрыЗаписи.ЭкранированиеСимволов,
		ПараметрыЗаписи.ЭкранироватьУгловыеСкобки,
		ПараметрыЗаписи.ЭкранироватьРазделителиСтрок,
		ПараметрыЗаписи.ЭкранироватьАмперсанд,
		ПараметрыЗаписи.ЭкранироватьОдинарныеКавычки,
		ПараметрыЗаписи.ЭкранироватьСлеш);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Объект, НастройкиСериализации);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Преобразование JSON в Объект.
//
// Параметры:
//   Json - Поток, ДвоичныеДанные - данные в формате JSON.
//   Кодировка - Строка - кодировка текста JSON. Значение по умолчанию - utf-8.
//   ПараметрыПреобразования - Структура - параметры преобразования JSON:
//      *ПрочитатьВСоответствие - Булево - если Истина, чтение объекта JSON будет выполнено в Соответствие,
//                                         иначе в Структура.
//      *ИменаСвойствСоЗначениямиДата - Массив, Строка, ФиксированныйМассив - имена свойств JSON,
//                                      для которых нужно вызывать восстановление даты из строки.
//      *ФорматДатыJSON - ФорматДатыJSON - определяет формат десериализации дат JSON-объектов.
// 
// Возвращаемое значение:
//   Произвольный - значение, десериализованное из JSON. 
//

Функция JsonВОбъект(Json, Кодировка = "utf-8", ПараметрыПреобразования = Неопределено) Экспорт
	
	ПараметрыПреобразованияJSON = ДополнитьПараметрыПреобразованияJSON(ПараметрыПреобразования);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Если ТипЗнч(Json) = Тип("ДвоичныеДанные") Тогда
		ЧтениеJSON.ОткрытьПоток(Json.ОткрытьПотокДляЧтения(), Кодировка);
	Иначе
		ЧтениеJSON.ОткрытьПоток(Json, Кодировка);
	КонецЕсли;
	Значение = ПрочитатьJSON(
		ЧтениеJSON, 
		ПараметрыПреобразованияJSON.ПрочитатьВСоответствие,
		ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата,
		ПараметрыПреобразованияJSON.ФорматДатыJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;

КонецФункции

// Вычисляет HMAC (hash-based message authentication code).
//
// Параметры:
//   Ключ - ДвоичныеДанные - секретный ключ.
//   Данные - ДвоичныеДанные - данные, для которых нужно посчитать HMAC.
//   Алгоритм - ХешФункция - алгоритм, используемый для вычисления хеша.
//
// Возвращаемое значение:
//   ДвоичныеДанные - вычисленное значение HMAC. 
//

Функция HMAC(Ключ, Данные, Алгоритм) Экспорт
	
	ДлинаБлока = 64;
	
	Если Ключ.Размер() > ДлинаБлока Тогда
		Хеширование = Новый ХешированиеДанных(Алгоритм);
		Хеширование.Добавить(Ключ);
		
		КлючБуфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Хеширование.ХешСумма);
	Иначе
		КлючБуфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Ключ);
	КонецЕсли;
	
	ИзмененныйКлюч = Новый БуферДвоичныхДанных(ДлинаБлока);
	ИзмененныйКлюч.Записать(0, КлючБуфер);
	
	ВнутреннийКлюч = ИзмененныйКлюч.Скопировать();
	ВнешнийКлюч = ИзмененныйКлюч;
	
	ВнутреннееВыравнивание = Новый БуферДвоичныхДанных(ДлинаБлока);
	ВнешнееВыравнивание = Новый БуферДвоичныхДанных(ДлинаБлока);
	Для Индекс = 0 По ДлинаБлока - 1 Цикл
		ВнутреннееВыравнивание.Установить(Индекс, 54);
		ВнешнееВыравнивание.Установить(Индекс, 92);
	КонецЦикла;
	
	ВнутреннееХеширование = Новый ХешированиеДанных(Алгоритм);
	ВнешнееХеширование = Новый ХешированиеДанных(Алгоритм);
	
	ВнутреннийКлюч.ЗаписатьПобитовоеИсключительноеИли(0, ВнутреннееВыравнивание);
	ВнешнийКлюч.ЗаписатьПобитовоеИсключительноеИли(0, ВнешнееВыравнивание);
	
	ВнешнееХеширование.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ВнешнийКлюч));
	ВнутреннееХеширование.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ВнутреннийКлюч));
	
	Если ЗначениеЗаполнено(Данные) Тогда
		ВнутреннееХеширование.Добавить(Данные);
	КонецЕсли;
	
	ВнешнееХеширование.Добавить(ВнутреннееХеширование.ХешСумма);
	
	Возврат ВнешнееХеширование.ХешСумма;

КонецФункции

// Возвращает структуру именованных кодов состояний HTTP.
//
// Возвращаемое значение:
//   Структура - именованные коды состояний HTTP.
//

Функция КодыСостоянияHTTP() Экспорт

	КодыСостояния = Новый Структура;
	КодыСостояния.Вставить("ПеремещеноНавсегда_301", 301);
	КодыСостояния.Вставить("ПеремещеноВременно_302", 302);
	КодыСостояния.Вставить("СмотретьДругое_303", 303);
	КодыСостояния.Вставить("ВременноеПеренаправление_307", 307);
	КодыСостояния.Вставить("ПостоянноеПеренаправление_308", 308);
	КодыСостояния.Вставить("НеверныйЗапрос_400", 400);
	КодыСостояния.Вставить("ПолезнаяНагрузкаСлишкомВелика_413", 413);
	КодыСостояния.Вставить("СлишкомМногоЗапросов_429", 429);
	КодыСостояния.Вставить("ВнутренняяОшибкаСервера_500", 500);
	КодыСостояния.Вставить("ОшибочныйШлюз_502", 502);
	КодыСостояния.Вставить("СервисНедоступен_503", 503);
	КодыСостояния.Вставить("ШлюзНеОтвечает_504", 504);
	
	Возврат КодыСостояния;

КонецФункции

// Выполняет чтение данных из архива GZip.
//
// Параметры:
//   СжатыеДанные - ДвоичныеДанные - данные упакованные GZip.
//
// Возвращаемое значение:
//   ДвоичныеДанные - распакованные данные. 
//

Функция ПрочитатьGZip(СжатыеДанные) Экспорт
	
	РазмерПрефиксаGZip = 10;
	РазмерПостфиксаGZip = 8;
	
	ЧтениеДанных = Новый ЧтениеДанных(СжатыеДанные);
	ЧтениеДанных.Пропустить(РазмерПрефиксаGZip);
	РазмерСжатыхДанных = ЧтениеДанных.ИсходныйПоток().Размер() - РазмерПрефиксаGZip - РазмерПостфиксаGZip; 
	
	ПотокZip = Новый ПотокВПамяти(ZipРазмерLFH() + РазмерСжатыхДанных + ZipРазмерDD() + ZipРазмерCDH() + ZipРазмерEOCD());
	ЗаписьДанных = Новый ЗаписьДанных(ПотокZip);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(ZipLFH());
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	
	ЗаписьДанных.Закрыть();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокZip);
	
	CRC32 = ЧтениеДанных.ПрочитатьЦелое32();
	РазмерНесжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	ЧтениеДанных.Закрыть();
	
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(ZipDD(CRC32, РазмерСжатыхДанных, РазмерНесжатыхДанных));
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(ZipCDH(CRC32, РазмерСжатыхДанных, РазмерНесжатыхДанных));
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(ZipEOCD(РазмерСжатыхДанных));
	ЗаписьДанных.Закрыть();
		
	Возврат ПрочитатьZip(ПотокZip);
	
КонецФункции

// Выполняет запись данных в архив GZip.
//
// Параметры:
//   Данные - ДвоичныеДанные - исходные данные.
//
// Возвращаемое значение:
//   ДвоичныеДанные - данные упакованные GZip.
//

Функция ЗаписатьGZip(Данные) Экспорт

	ЧтениеДанных = Новый ЧтениеДанных(ЗаписатьZip(Данные));

	НачальноеСмещение = 14;
	ЧтениеДанных.Пропустить(НачальноеСмещение);
	CRC32 = ЧтениеДанных.ПрочитатьЦелое32();

	РазмерСжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	РазмерИсходныхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	
	РазмерИмениФайла = ЧтениеДанных.ПрочитатьЦелое16();
	РазмерДополнительногоПоля = ЧтениеДанных.ПрочитатьЦелое16();
	ЧтениеДанных.Пропустить(РазмерИмениФайла + РазмерДополнительногоПоля);

	ПотокGZip = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокGZip);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(GZipHeader());
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	ЗаписьДанных.Закрыть();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокGZip);

	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(GZipFooter(CRC32, РазмерИсходныхДанных));

	Возврат ПотокGZip.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции


Функция ПодготовитьЗапрос(Сессия, Метод, URL, ДополнительныеПараметры) Экспорт
	
	Cookies = ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Cookies", Новый Массив);
	Cookies = ОбъединитьCookies(ДозаполнитьCookie(Сессия.Cookies, URL), ДозаполнитьCookie(Cookies, URL));
	
	АутентификацияИзДополнительныхПараметров =
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Аутентификация", Новый Структура);
	ПараметрыЗапросаИзДополнительныхПараметров =
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыЗапроса", Новый Структура);
	ЗаголовкиИзДополнительныхПараметров =
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Заголовки", Новый Соответствие);

	Аутентификация = ОбъединитьПараметрыАутентификации(АутентификацияИзДополнительныхПараметров, Сессия.Аутентификация);
	ПараметрыЗапроса = ОбъединитьПараметрыЗапроса(ПараметрыЗапросаИзДополнительныхПараметров, Сессия.ПараметрыЗапроса);
	Заголовки = ОбъединитьЗаголовки(ЗаголовкиИзДополнительныхПараметров, Сессия.Заголовки);
	ПараметрыПреобразованияJSON = 
		ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыПреобразованияJSON", Неопределено);
		
	ПодготовленныйЗапрос = Новый Структура;
	ПодготовленныйЗапрос.Вставить("Cookies", Cookies);
	ПодготовленныйЗапрос.Вставить("Аутентификация", Аутентификация);
	ПодготовленныйЗапрос.Вставить("Метод", Метод);
	ПодготовленныйЗапрос.Вставить("Заголовки", Заголовки);
	ПодготовленныйЗапрос.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ПодготовленныйЗапрос.Вставить("URL", ПодготовитьURL(URL, ПараметрыЗапроса));
	ПодготовленныйЗапрос.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
	
	ПодготовитьCookies(ПодготовленныйЗапрос);

	Данные = ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Данные", Новый Структура);
	Файлы = ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Файлы", Новый Массив);
	Json = ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Json", Неопределено);
	ПараметрыЗаписиJSON = ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "ПараметрыЗаписиJSON", Неопределено);

	ПодготовитьТелоЗапроса(ПодготовленныйЗапрос, Данные, Файлы, Json, ПараметрыЗаписиJSON);
	ПодготовитьАутентификацию(ПодготовленныйЗапрос);

	Возврат ПодготовленныйЗапрос;
	
КонецФункции


Функция ЭтоКодСостоянияПриКоторомНужноУчитыватьЗаголовокRetryAfter(КодСостояния)

	Коды = КодыСостоянияHTTP();
	Возврат КодСостояния = Коды.ПолезнаяНагрузкаСлишкомВелика_413
		ИЛИ КодСостояния = Коды.СлишкомМногоЗапросов_429
		ИЛИ КодСостояния = Коды.СервисНедоступен_503;

КонецФункции


Функция ЧислоИзСтроки(Знач Строка) Экспорт

	ОписаниеТипа = Новый ОписаниеТипов("Число");
	Возврат ОписаниеТипа.ПривестиЗначение(Строка);

КонецФункции


Функция ДатаИзСтроки(Знач Строка) Экспорт

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеТипа = Новый ОписаниеТипов("Дата", Неопределено, Неопределено, КвалификаторДаты);
	Возврат ОписаниеТипа.ПривестиЗначение(Строка);

КонецФункции


Функция ДатаИзСтрокиRFC7231(Знач Строка) Экспорт
	
	Разделители = ",-:/\.";
	Для Индекс = 1 По СтрДлина(Разделители) Цикл
		Разделитель = Сред(Разделители, Индекс, 1);
		Строка = СтрЗаменить(Строка, Разделитель, " ");
	КонецЦикла;
	Строка = СтрЗаменить(Строка, "  ", " ");
	СоставляющиеДаты = СтрРазделить(Строка, " ");
	МесяцСтр = СоставляющиеДаты[2];

	Месяцы = СтрРазделить("Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec", ",");
	Месяц = Месяцы.Найти(МесяцСтр);
	Если Месяц = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Дата = СоставляющиеДаты[3] + Формат(Месяц + 1, "ЧЦ=2; ЧВН=;") + СоставляющиеДаты[1];
	Время = СоставляющиеДаты[4] + СоставляющиеДаты[5] + СоставляющиеДаты[6];

	Возврат ДатаИзСтроки(Дата + Время);
 
КонецФункции


Функция ВызватьHTTPМетод(Сессия, Метод, URL, ДополнительныеПараметры)
	
	КодыСостоянияHTTP = КодыСостоянияHTTP();
	
	ПодготовленныйЗапрос = ПодготовитьЗапрос(Сессия, Метод, URL, ДополнительныеПараметры);
	
	НастройкиПодключения = ПолучитьНастройкиПодключения(Метод, URL, ДополнительныеПараметры);
	
	Ответ = ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, НастройкиПодключения);
	
	Перенаправление = 0;
	Пока Перенаправление < Сессия.МаксимальноеКоличествоПеренаправлений Цикл
		Если Не НастройкиПодключения.РазрешитьПеренаправление ИЛИ Не Ответ.ЭтоРедирект Тогда
			Возврат Ответ;
		КонецЕсли;
		
		НовыйURL = СформироватьНовыйURLПриПеренаправлении(Ответ);

		ПодготовленныйЗапрос.URL = КодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
		НовыйHTTPЗапрос = Новый HTTPЗапрос(СобратьАдресРесурса(РазобратьURL(НовыйURL), Неопределено));
		ПереопределитьМетод(ПодготовленныйЗапрос, Ответ);
			
		Если Ответ.КодСостояния <> КодыСостоянияHTTP.ВременноеПеренаправление_307 
			И Ответ.КодСостояния <> КодыСостоянияHTTP.ПостоянноеПеренаправление_308 Тогда
			УдалитьЗаголовки(ПодготовленныйЗапрос.Заголовки, "content-length,content-type,transfer-encoding");
			НовыйHTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
		Иначе
			ИсходныйПоток = ПодготовленныйЗапрос.HTTPЗапрос.ПолучитьТелоКакПоток();
			ИсходныйПоток.КопироватьВ(НовыйHTTPЗапрос.ПолучитьТелоКакПоток());
		КонецЕсли;
		ПодготовленныйЗапрос.HTTPЗапрос = НовыйHTTPЗапрос;
		УдалитьЗаголовки(ПодготовленныйЗапрос.Заголовки, "cookies");

		ПодготовленныйЗапрос.Cookies = ОбъединитьCookies(Сессия.Cookies, ПодготовленныйЗапрос.Cookies);
		ПодготовитьCookies(ПодготовленныйЗапрос);
		
		// INFO: по хорошему аутентификацию нужно привести к новых параметрам, но пока будем игнорировать.
		
		Ответ = ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, НастройкиПодключения);
		
		Перенаправление = Перенаправление + 1;
	КонецЦикла;
	
	ВызватьИсключение("СлишкомМногоПеренаправлений");
	
КонецФункции


Функция СформироватьНовыйURLПриПеренаправлении(Ответ)

	НовыйURL = ПолучитьЗначениеЗаголовка("location", Ответ.Заголовки);
	НовыйURL = РаскодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
	
	// Редирект без схемы
	Если СтрНачинаетсяС(НовыйURL, "//") Тогда
		СтруктураURL = РазобратьURL(Ответ.URL);
		НовыйURL = СтруктураURL.Схема + ":" + НовыйURL;
	КонецЕсли;

	СтруктураURL = РазобратьURL(НовыйURL);
	Если Не ЗначениеЗаполнено(СтруктураURL.Сервер) Тогда
		СтруктураURLОтвета = РазобратьURL(Ответ.URL);
		БазовыйURL = СтрШаблон("%1://%2", СтруктураURLОтвета.Схема, СтруктураURLОтвета.Сервер);
		Если ЗначениеЗаполнено(СтруктураURLОтвета.Порт) Тогда
			БазовыйURL = БазовыйURL + Формат(СтруктураURLОтвета.Порт, "ЧРГ=; ЧГ=");
		КонецЕсли;
		НовыйURL = БазовыйURL + НовыйURL;
	КонецЕсли;

	Возврат НовыйURL;

КонецФункции


Процедура УдалитьЗаголовки(Заголовки, СписокЗаголовковСтрокой)

	ЗаголовкиДляУдаления = Новый Массив;
	СписокЗаголовков = СтрРазделить(СписокЗаголовковСтрокой, ",", Ложь);
	Для Каждого Заголовок Из Заголовки Цикл
		Если СписокЗаголовков.Найти(НРег(Заголовок.Ключ)) <> Неопределено Тогда
			ЗаголовкиДляУдаления.Добавить(Заголовок.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЗаголовокДляУдаления Из ЗаголовкиДляУдаления Цикл
		Заголовки.Удалить(ЗаголовокДляУдаления);
	КонецЦикла;

КонецПроцедуры


Функция ПолучитьНастройкиПодключения(Метод, URL, ДополнительныеПараметры) 

	РазрешитьПеренаправление = 
		ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "РазрешитьПеренаправление", ВРег(Метод) <> "HEAD");
	ПроверятьSSL = ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "ПроверятьSSL", Истина);
	КлиентскийСертификатSSL = ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "КлиентскийСертификатSSL");
	Прокси = ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "Прокси", ПолучитьПроксиПоУмолчанию(URL));
	МаксимальноеКоличествоПовторов = ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "МаксимальноеКоличествоПовторов", 0);
	ПовторятьДляКодовСостояний = 
		ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "ПовторятьДляКодовСостояний", Неопределено);
	КоэффициентЭкспоненциальнойЗадержки = 
		ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "КоэффициентЭкспоненциальнойЗадержки", 1);
	МаксимальноеВремяПовторов = ПолучитьЗначениеПоКлючу(ДополнительныеПараметры, "МаксимальноеВремяПовторов", 600);

	Настройки = Новый Структура;
	Настройки.Вставить("Таймаут", ПолучитьТаймаут(ДополнительныеПараметры));
	Настройки.Вставить("РазрешитьПеренаправление", РазрешитьПеренаправление);
	Настройки.Вставить("ПроверятьSSL", ПроверятьSSL);
	Настройки.Вставить("КлиентскийСертификатSSL", КлиентскийСертификатSSL);
	Настройки.Вставить("Прокси", Прокси);
	Настройки.Вставить("МаксимальноеКоличествоПовторов", МаксимальноеКоличествоПовторов);
	Настройки.Вставить("ПовторятьДляКодовСостояний", ПовторятьДляКодовСостояний);
	Настройки.Вставить("КоэффициентЭкспоненциальнойЗадержки", КоэффициентЭкспоненциальнойЗадержки);
	Настройки.Вставить("МаксимальноеВремяПовторов", МаксимальноеВремяПовторов);

	Возврат Настройки;

КонецФункции


Функция ПолучитьТаймаут(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("Таймаут") И ЗначениеЗаполнено(ДополнительныеПараметры.Таймаут) Тогда
		Таймаут = ДополнительныеПараметры.Таймаут;
	Иначе
		Таймаут = СтандартныйТаймаут();
	КонецЕсли;
	
	Возврат Таймаут;
	
КонецФункции


Функция ПолучитьПроксиПоУмолчанию(URL)
	
	ПроксиПоУмолчанию = Новый ИнтернетПрокси;
	Если Метаданные.ОбщиеМодули.Найти("ПолучениеФайловИзИнтернетаКлиентСервер") = Неопределено Тогда
		ПолучениеФайловИзИнтернетаКлиентСервер = Неопределено;
	Иначе
		СтруктураURL = РазобратьURL(URL);
		ПроксиПоУмолчанию = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураURL.Схема);
	КонецЕсли;
	
	Возврат ПроксиПоУмолчанию;
	
КонецФункции


Функция ДозаполнитьCookie(Cookies, URL)
	
	СтруктураURL = РазобратьURL(URL);
	НовыеCookies = Новый Массив;
	Если ТипЗнч(Cookies) = Тип("Массив") Тогда
		Для Каждого Cookie Из Cookies Цикл
			НовыйCookie = КонструкторCookie(Cookie.Наименование, Cookie.Значение);
			ЗаполнитьЗначенияСвойств(НовыйCookie, Cookie);
			
			Если Не ЗначениеЗаполнено(НовыйCookie.Домен) Тогда
				НовыйCookie.Домен = СтруктураURL.Сервер;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовыйCookie.Путь) Тогда
				НовыйCookie.Путь = "/";
			КонецЕсли;
			
			НовыеCookies.Добавить(НовыйCookie);
		КонецЦикла;
		
		Возврат НовыеCookies;
	КонецЕсли;
	
	Возврат Cookies;
	
КонецФункции


Процедура УдалитьCookieИзХранилища(ХранилищеCookies, Cookie)

	Если ХранилищеCookies.Получить(Cookie.Домен) <> Неопределено
		И ХранилищеCookies[Cookie.Домен].Получить(Cookie.Путь) <> Неопределено
		И ХранилищеCookies[Cookie.Домен][Cookie.Путь].Получить(Cookie.Наименование) <> Неопределено Тогда
		ХранилищеCookies[Cookie.Домен][Cookie.Путь].Удалить(Cookie.Наименование);
	КонецЕсли;

КонецПроцедуры


Процедура ДобавитьCookieВХранилище(ХранилищеCookies, Cookie, Замещать = Ложь)
	
	Если ХранилищеCookies.Получить(Cookie.Домен) = Неопределено Тогда
		ХранилищеCookies[Cookie.Домен] = Новый Соответствие;
	КонецЕсли;
	Если ХранилищеCookies[Cookie.Домен].Получить(Cookie.Путь) = Неопределено Тогда
		ХранилищеCookies[Cookie.Домен][Cookie.Путь] = Новый Соответствие;
	КонецЕсли;
	Если ХранилищеCookies[Cookie.Домен][Cookie.Путь].Получить(Cookie.Наименование) = Неопределено ИЛИ Замещать Тогда
		ХранилищеCookies[Cookie.Домен][Cookie.Путь][Cookie.Наименование] = Cookie;
	КонецЕсли;
	
КонецПроцедуры


Функция ДобавитьЛидирующуюТочку(Знач Домен)
	
	Если Не СтрНачинаетсяС(Домен, ".") Тогда
		Домен = "." + Домен;
	КонецЕсли;
	
	Возврат Домен;
	
КонецФункции


Процедура ЗаполнитьСписокОтфильтрованнымиCookies(Cookies, СтруктураURL, Список)

	Для Каждого Cookie Из Cookies Цикл
		Если Cookie.Значение.ТолькоБезопасноеСоединение = Истина И СтруктураURL.Схема <> "https" Тогда
			Продолжить;
		КонецЕсли;
		// INFO: проверка срока действия игнорируется (Cookie.Значение.СрокДействия)
		// INFO: проверка порта игнорируется
		
		Список.Добавить(Cookie.Значение);
	КонецЦикла;

КонецПроцедуры


Функция ОтобратьCookiesДляЗапроса(СтруктураURL, Cookies)
	
	СерверВЗапросе = ДобавитьЛидирующуюТочку(СтруктураURL.Сервер);
	
	Результат = Новый Массив;
	Для Каждого Домен Из Cookies Цикл
		Если Не СтрЗаканчиваетсяНа(СерверВЗапросе, Домен.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Путь Из Домен.Значение Цикл
			Если Не СтрНачинаетсяС(СтруктураURL.Путь, Путь.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьСписокОтфильтрованнымиCookies(Путь.Значение, СтруктураURL, Результат);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция ПодготовитьЗаголовокCookie(ПодготовленныйЗапрос)
	
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
	
	Cookies = Новый Массив;
	Для Каждого Cookie Из ОтобратьCookiesДляЗапроса(СтруктураURL, ПодготовленныйЗапрос.Cookies) Цикл
		Cookies.Добавить(СтрШаблон("%1=%2", Cookie.Наименование, Cookie.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(Cookies, "; ");
	
КонецФункции


Процедура ПодготовитьCookies(ПодготовленныйЗапрос)
	
	ЗаголовокCookie = ПодготовитьЗаголовокCookie(ПодготовленныйЗапрос);
	Если ЗначениеЗаполнено(ЗаголовокCookie) Тогда
		ПодготовленныйЗапрос.Заголовки["Cookie"] = ЗаголовокCookie;
	КонецЕсли;
	
КонецПроцедуры


Функция КодироватьПараметрыЗапроса(ПараметрыЗапроса)
	
	ЧастиПараметрыЗапроса = Новый Массив;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			Значения = Параметр.Значение;
		Иначе
			Значения = Новый Массив;
			Значения.Добавить(Параметр.Значение);
		КонецЕсли;
		
		Если Параметр.Значение = Неопределено Тогда
			ЧастиПараметрыЗапроса.Добавить(Параметр.Ключ);
		Иначе
			Для Каждого Значение Из Значения Цикл
				ЗначениеПараметра = КодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL);
				ЧастиПараметрыЗапроса.Добавить(СтрШаблон("%1=%2", Параметр.Ключ, ЗначениеПараметра));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПараметрыЗапроса, "&");
	
КонецФункции


Функция ПодготовитьURL(Знач URL, ПараметрыЗапроса = Неопределено)
	
	URL = СокрЛ(URL);
	
	СтруктураURL = РазобратьURL(URL);
	
	ПодготовленныйURL = СтруктураURL.Схема + "://";
	Если ЗначениеЗаполнено(СтруктураURL.Аутентификация.Пользователь) Тогда
		ПодготовленныйURL = ПодготовленныйURL 
			+ СтруктураURL.Аутентификация.Пользователь + ":"
			+ СтруктураURL.Аутентификация.Пароль + "@";
	КонецЕсли;
	ПодготовленныйURL = ПодготовленныйURL + СтруктураURL.Сервер;
	Если ЗначениеЗаполнено(СтруктураURL.Порт) Тогда
		ПодготовленныйURL = ПодготовленныйURL + ":" + Формат(СтруктураURL.Порт, "ЧРГ=; ЧГ=");
	КонецЕсли;
	
	ПодготовленныйURL = ПодготовленныйURL + СобратьАдресРесурса(СтруктураURL, ПараметрыЗапроса);
		
	Возврат ПодготовленныйURL;
	
КонецФункции


Функция ЗаголовкиВСтроку(Заголовки)
	
	РазделительСтрок = Символы.ВК + Символы.ПС;
	Строки = Новый Массив;
	
	СортированныеЗаголовки = "Content-Disposition,Content-Type,Content-Location";
	Для Каждого Ключ Из СтрРазделить(СортированныеЗаголовки, ",") Цикл
		Значение = ПолучитьЗначениеЗаголовка(Ключ, Заголовки);
		Если Значение <> Ложь И ЗначениеЗаполнено(Значение) Тогда
			Строки.Добавить(СтрШаблон("%1: %2", Ключ, Значение));
		КонецЕсли;
	КонецЦикла;
	
	Ключи = СтрРазделить(ВРег(СортированныеЗаголовки), ",");
	Для Каждого ДЗаголовок Из Заголовки Цикл
		Если Ключи.Найти(ВРег(ДЗаголовок.Ключ)) = Неопределено Тогда
			Строки.Добавить(СтрШаблон("%1: %2", ДЗаголовок.Ключ, ДЗаголовок.Значение));
		КонецЕсли;
	КонецЦикла;
	Строки.Добавить(РазделительСтрок);
	
	Возврат СтрСоединить(Строки, РазделительСтрок);
	
КонецФункции


Функция ПолучитьЗначениеПоКлючу(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Если ТипЗнч(Структура) = Тип("Структура") И Структура.Свойство(Ключ) Тогда
		Значение = Структура[Ключ];
	ИначеЕсли ТипЗнч(Структура) = Тип("Соответствие") И Структура.Получить(Ключ) <> Неопределено Тогда
		Значение = Структура.Получить(Ключ);
	Иначе
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

	
Функция СоздатьПолеФормы(ИсходныеПараметры)
	
	Поле = Новый Структура("Имя,ИмяФайла,Данные,Тип,Заголовки");
	Поле.Имя = ИсходныеПараметры.Имя;
	Поле.Данные = ИсходныеПараметры.Данные;
	
	Поле.Тип = ПолучитьЗначениеПоКлючу(ИсходныеПараметры, "Тип");
	Поле.Заголовки = ПолучитьЗначениеПоКлючу(ИсходныеПараметры, "Заголовки", Новый Соответствие);
	Поле.ИмяФайла = ПолучитьЗначениеПоКлючу(ИсходныеПараметры, "ИмяФайла");
	
	Ключ = "Content-Disposition";
	Если ПолучитьЗначениеЗаголовка("content-disposition", Поле.Заголовки, Ключ) = Ложь Тогда
		Поле.Заголовки.Вставить("Content-Disposition", "form-data");
	КонецЕсли;
	
	Части = Новый Массив;
	Части.Добавить(Поле.Заголовки[Ключ]);
	Части.Добавить(СтрШаблон("name=""%1""", Поле.Имя));
	Если ЗначениеЗаполнено(Поле.ИмяФайла) Тогда
		Части.Добавить(СтрШаблон("filename=""%1""", Поле.ИмяФайла));
	КонецЕсли;
	
	Поле.Заголовки[Ключ] = СтрСоединить(Части, "; ");
	Поле.Заголовки["Content-Type"] = Поле.Тип;
	
	Возврат Поле;
	
КонецФункции


Функция ЗакодироватьФайлы(HTTPЗапрос, Файлы, Данные)
	
	Части = Новый Массив;
	Если ЗначениеЗаполнено(Данные) Тогда
		Для Каждого Поле Из Данные Цикл
			Части.Добавить(СоздатьПолеФормы(Новый Структура("Имя,Данные", Поле.Ключ, Поле.Значение)));
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(Файлы) = Тип("Массив") Тогда
		Для Каждого Файл Из Файлы Цикл
			Части.Добавить(СоздатьПолеФормы(Файл));
		КонецЦикла;
	Иначе
		Части.Добавить(СоздатьПолеФормы(Файлы));
	КонецЕсли;
	
	Разделитель = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	РазделительСтрок = Символы.ВК + Символы.ПС;
	
	ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакПоток();
	ЗаписьДанных = Новый ЗаписьДанных(ТелоЗапроса, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, "", "", Ложь);
	Для Каждого Часть Из Части Цикл
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + РазделительСтрок);
		ЗаписьДанных.ЗаписатьСтроку(ЗаголовкиВСтроку(Часть.Заголовки));
		Если ТипЗнч(Часть.Данные) = Тип("ДвоичныеДанные") Тогда
			ЗаписьДанных.Записать(Часть.Данные);
		Иначе
			ЗаписьДанных.ЗаписатьСтроку(Часть.Данные);
		КонецЕсли;
		ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	КонецЦикла;
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--" + РазделительСтрок);
	ЗаписьДанных.Закрыть();
	
	Возврат СтрШаблон("multipart/form-data; boundary=%1", Разделитель);
	
КонецФункции


Процедура ПодготовитьТелоЗапроса(ПодготовленныйЗапрос, Данные, Файлы, Json, ПараметрыЗаписиJSON)
	
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = СобратьАдресРесурса(СтруктураURL, ПодготовленныйЗапрос.ПараметрыЗапроса);
	Если ЗначениеЗаполнено(Файлы) Тогда
		ContentType = ЗакодироватьФайлы(HTTPЗапрос, Файлы, Данные);
	ИначеЕсли ЗначениеЗаполнено(Данные) Тогда
		ContentType = "application/x-www-form-urlencoded";
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Данные);
		Иначе
			Если ТипЗнч(Данные) = Тип("Строка") Тогда
				Тело = Данные;
			Иначе
				Тело = КодироватьПараметрыЗапроса(Данные);
			КонецЕсли;
			HTTPЗапрос.УстановитьТелоИзСтроки(Тело, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	ИначеЕсли Json <> Неопределено Тогда
		ContentType = "application/json";
		СтрокаJson = ОбъектВJson(Json, ПодготовленныйЗапрос.ПараметрыПреобразованияJSON, ПараметрыЗаписиJSON);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJson, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Иначе
		ContentType = Неопределено;
	КонецЕсли;
	ЗначениеЗаголовка = ПолучитьЗначениеЗаголовка("content-type", ПодготовленныйЗапрос.Заголовки);
	Если ЗначениеЗаголовка = Ложь И ЗначениеЗаполнено(ContentType) Тогда
		ПодготовленныйЗапрос.Заголовки.Вставить("Content-Type", ContentType);
	КонецЕсли;
	
	HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
	
	УпаковатьЗапрос(HTTPЗапрос);

	ПодготовленныйЗапрос.Вставить("HTTPЗапрос", HTTPЗапрос);
	
КонецПроцедуры


Процедура ПодготовитьАутентификацию(ПодготовленныйЗапрос)
	
	ПодготовленныйЗапрос.Вставить("СобытияНаОтвет", Новый Массив);
	Если Не ЗначениеЗаполнено(ПодготовленныйЗапрос.Аутентификация) Тогда
		СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
		Если ЗначениеЗаполнено(СтруктураURL.Аутентификация) Тогда
			ПодготовленныйЗапрос.Аутентификация = СтруктураURL.Аутентификация;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодготовленныйЗапрос.Аутентификация) Тогда
		Если ПодготовленныйЗапрос.Аутентификация.Свойство("Тип") Тогда
			ТипАутентификации = НРег(ПодготовленныйЗапрос.Аутентификация.Тип);
			Если ТипАутентификации = "digest" Тогда
				ПодготовленныйЗапрос.СобытияНаОтвет.Добавить("ОбработкаОтветаСКодом401");
			КонецЕсли;
			Если ТипАутентификации = "aws4-hmac-sha256" Тогда
				ПодготовитьАутентификациюAWS4(ПодготовленныйЗапрос);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция ОбъединитьCookies(ГлавныйИсточник, ДополнительныйИсточник)
	
	Cookies = Новый Соответствие;
	Для Каждого Cookie Из ПреобразоватьХранилищеCookiesВМассивCookies(ГлавныйИсточник) Цикл
		ДобавитьCookieВХранилище(Cookies, Cookie, Ложь);
	КонецЦикла;
	Для Каждого Cookie Из ПреобразоватьХранилищеCookiesВМассивCookies(ДополнительныйИсточник) Цикл
		ДобавитьCookieВХранилище(Cookies, Cookie, Ложь);
	КонецЦикла;
	
	Возврат Cookies;
	
КонецФункции


Функция ПреобразоватьХранилищеCookiesВМассивCookies(ХранилищеCookies)
	
	Cookies = Новый Массив;
	Если ТипЗнч(ХранилищеCookies) = Тип("Массив") Тогда
		Для Каждого Cookie Из ХранилищеCookies Цикл
			НоваяCookie = КонструкторCookie();
			ЗаполнитьЗначенияСвойств(НоваяCookie, Cookie);
			Cookies.Добавить(НоваяCookie);
		КонецЦикла;
		
		Возврат Cookies;
	КонецЕсли;
	
	Для Каждого Домен Из ХранилищеCookies Цикл
		Для Каждого Путь Из Домен.Значение Цикл
			Для Каждого Наименование Из Путь.Значение Цикл
				Cookies.Добавить(Наименование.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Cookies;
	
КонецФункции


Функция ОбъединитьПараметрыАутентификации(ГлавныйИсточник, ДополнительныйИсточник)
	
	ПараметрыАутентификации = Новый Структура;
	Если ТипЗнч(ГлавныйИсточник) = Тип("Структура") Тогда
		Для Каждого Параметр Из ГлавныйИсточник Цикл
			ПараметрыАутентификации.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДополнительныйИсточник) = Тип("Структура") Тогда
		Для Каждого Параметр Из ДополнительныйИсточник Цикл
			Если Не ПараметрыАутентификации.Свойство(Параметр) Тогда
				ПараметрыАутентификации.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции


Функция ОбъединитьЗаголовки(ГлавныйИсточник, ДополнительныйИсточник)
	
	Заголовки = Новый Соответствие;
	Для Каждого ДЗаголовок Из ГлавныйИсточник Цикл
		Заголовки.Вставить(ДЗаголовок.Ключ, ДЗаголовок.Значение);
	КонецЦикла;
	Для Каждого ДЗаголовок Из ДополнительныйИсточник Цикл
		Если Заголовки.Получить(ДЗаголовок.Ключ) = Неопределено Тогда
			Заголовки.Вставить(ДЗаголовок.Ключ, ДЗаголовок.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заголовки;
	
КонецФункции


Функция ОбъединитьПараметрыЗапроса(ГлавныйИсточник, ДополнительныйИсточник)
	
	ПараметрыЗапроса = Новый Соответствие;
	Если ТипЗнч(ГлавныйИсточник) = Тип("Структура") ИЛИ ТипЗнч(ГлавныйИсточник) = Тип("Соответствие") Тогда
		Для Каждого Параметр Из ГлавныйИсточник Цикл
			ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДополнительныйИсточник) = Тип("Структура") ИЛИ ТипЗнч(ДополнительныйИсточник) = Тип("Соответствие") Тогда
		Для Каждого Параметр Из ДополнительныйИсточник Цикл
			Если ПараметрыЗапроса.Получить(Параметр) = Неопределено Тогда
				ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции


Функция ОтправитьHTTPЗапрос(Сессия, ПодготовленныйЗапрос, Настройки)
	
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
	Соединение = ПолучитьСоединение(СтруктураURL, ПодготовленныйЗапрос.Аутентификация, Настройки, Сессия);
	
	Ответ = Соединение.ВызватьHTTPМетод(ПодготовленныйЗапрос.Метод, ПодготовленныйЗапрос.HTTPЗапрос);
	
	Для Каждого Обработчик Из ПодготовленныйЗапрос.СобытияНаОтвет Цикл
		Если Обработчик = "ОбработкаОтветаСКодом401" Тогда
			ОбработкаОтветаСКодом401(Сессия, ПодготовленныйЗапрос, Настройки, Ответ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции


Функция РассчитатьДлительностьПриостановки(Повтор, КоэффициентЭкспоненциальнойЗадержки, ЗаголовокRetryAfter, Остаток)

	Если ЗаголовокRetryAfter <> Ложь Тогда
		Длительность = ЧислоИзСтроки(ЗаголовокRetryAfter);

		Если Длительность = 0 Тогда
			Дата = ДатаИзСтрокиRFC7231(ЗаголовокRetryAfter);
			Если ЗначениеЗаполнено(Дата) Тогда
				Длительность = Дата - ТекущаяУниверсальнаяДата();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Длительность = КоэффициентЭкспоненциальнойЗадержки * Pow(2, Повтор - 1);
	КонецЕсли;

	Длительность = Мин(Длительность, Остаток);

	Если Длительность < 0 Тогда
		Длительность = 0;
	КонецЕсли;

	Возврат Длительность;

КонецФункции


Функция НеобходимоПовторитьЗапрос(Ответ, Настройки, ОшибкаВыполненияЗапроса)

	Если Настройки.МаксимальноеКоличествоПовторов < 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаВыполненияЗапроса <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	ПовторПриЛюбомКодеСостоянияБольшеИлиРавным500 = Настройки.ПовторятьДляКодовСостояний = Неопределено
		И Ответ.КодСостояния >= КодыСостоянияHTTP().ВнутренняяОшибкаСервера_500;
	КодСостоянияСоответствуетКодуСостоянияПовтора = ТипЗнч(Настройки.ПовторятьДляКодовСостояний) = Тип("Массив")
		И Настройки.ПовторятьДляКодовСостояний.Найти(Ответ.КодСостояния) <> Неопределено;
	Если ПовторПриЛюбомКодеСостоянияБольшеИлиРавным500 ИЛИ КодСостоянияСоответствуетКодуСостоянияПовтора Тогда
		Возврат Истина;
	КонецЕсли;

	ЗаголовокRetryAfter = ПолучитьЗначениеЗаголовка("retry-after", Ответ.Заголовки);
	Возврат ЗаголовокRetryAfter <> Ложь 
		И ЭтоКодСостоянияПриКоторомНужноУчитыватьЗаголовокRetryAfter(Ответ.КодСостояния);

КонецФункции


Функция ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, Настройки)
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МиллисекундВСекунде = 1000;

	Повтор = 0;
	Длительность = 0;
	Пока Истина Цикл
		Попытка
			Ответ = ОтправитьHTTPЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
		Исключение
			ОшибкаВыполненияЗапроса = ИнформацияОбОшибке();
		КонецПопытки;

		Повтор = Повтор + 1;
		Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / МиллисекундВСекунде;

		Если Не НеобходимоПовторитьЗапрос(Ответ, Настройки, ОшибкаВыполненияЗапроса) Тогда
			Прервать;
		КонецЕсли;

		Если Повтор > Настройки.МаксимальноеКоличествоПовторов 
			ИЛИ Длительность > Настройки.МаксимальноеВремяПовторов Тогда
			Прервать;
		КонецЕсли;
	
		Если ОшибкаВыполненияЗапроса <> Неопределено 
			ИЛИ НЕ ЭтоКодСостоянияПриКоторомНужноУчитыватьЗаголовокRetryAfter(Ответ.КодСостояния) Тогда
			ЗаголовокRetryAfter = Ложь;
		Иначе
			ЗаголовокRetryAfter = ПолучитьЗначениеЗаголовка("retry-after", Ответ.Заголовки);
		КонецЕсли;
		ДлительностьПриостановки = РассчитатьДлительностьПриостановки(
			Повтор,
			Настройки.КоэффициентЭкспоненциальнойЗадержки,
			ЗаголовокRetryAfter,
			Настройки.МаксимальноеВремяПовторов - Длительность);
		Приостановить(ДлительностьПриостановки);
	КонецЦикла;
	
	Если ОшибкаВыполненияЗапроса <> Неопределено Тогда
		ВызватьИсключение(ПодробноеПредставлениеОшибки(ОшибкаВыполненияЗапроса));
	КонецЕсли;

	ЗаголовокContentType = ПолучитьЗначениеЗаголовка("content-type", Ответ.Заголовки);
	Если ЗаголовокContentType = Ложь Тогда
		ЗаголовокContentType = "";
	КонецЕсли;
	
	ПодготовленныйОтвет = Новый Структура;
	ПодготовленныйОтвет.Вставить("ВремяВыполнения", ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	ПодготовленныйОтвет.Вставить("Cookies", ИзвлечьCookies(Ответ.Заголовки, ПодготовленныйЗапрос.URL)); 
	ПодготовленныйОтвет.Вставить("Заголовки", Ответ.Заголовки);
	ПодготовленныйОтвет.Вставить("ЭтоПостоянныйРедирект", ЭтоПостоянныйРедирект(Ответ.КодСостояния, Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("ЭтоРедирект", ЭтоРедирект(Ответ.КодСостояния, Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("Кодировка", ПолучитьКодировкуИзЗаголовка(ЗаголовокContentType));
	ПодготовленныйОтвет.Вставить("Тело", Ответ.ПолучитьТелоКакДвоичныеДанные());
	ПодготовленныйОтвет.Вставить("КодСостояния", Ответ.КодСостояния);
	ПодготовленныйОтвет.Вставить("URL", ПодготовленныйЗапрос.URL);
	Если НЕ (Ответ.КодСостояния > 199 И Ответ.КодСостояния < 300)  Тогда
		СообщениеОшибка = "Ошибка отправки запроса: " + Строка(Ответ.ПолучитьТелоКакСтроку()) + Символы.ПС + "Код состояния: " + Строка(Ответ.КодСостояния + Символы.ПС) + Символы.ПС + "Время выполнения: " + Строка(ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) + Символы.ПС + "Кодировка: " + Строка(ПолучитьКодировкуИзЗаголовка(ЗаголовокContentType)) + Символы.ПС + "Заголовки: " + Символы.ПС;
		Для Каждого Заголовок Из ПодготовленныйОтвет.Заголовки Цикл
			СообщениеОшибка = СообщениеОшибка + Символы.ПС + Строка(Заголовок.Ключ) + ": " + Строка(Заголовок.Значение);	
		КонецЦикла;
		
		Сообщить(СообщениеОшибка, СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Сессия.Cookies = ОбъединитьCookies(Сессия.Cookies, ПодготовленныйОтвет.Cookies);
	
	Возврат ПодготовленныйОтвет;
	
КонецФункции


Процедура ПереопределитьМетод(ПодготовленныйЗапрос, Ответ)
	
	КодыСостоянияHTTP = КодыСостоянияHTTP();
	
	Метод = ПодготовленныйЗапрос.Метод;

	// http://tools.ietf.org/html/rfc7231#section-6.4.4
	Если Ответ.КодСостояния = КодыСостоянияHTTP.СмотретьДругое_303 И Метод <> "HEAD" Тогда
		Метод = "GET";
	КонецЕсли;
	
	// Поведение браузеров
	Если Ответ.КодСостояния = КодыСостоянияHTTP.ПеремещеноВременно_302 И Метод <> "HEAD" Тогда
		Метод = "GET";
	КонецЕсли;
	
	ПодготовленныйЗапрос.Метод = Метод;
	
КонецПроцедуры	


Функция ИзвлечьCookies(Заголовки, URL)
	
	ТекущееВремя = ТекущаяУниверсальнаяДата();
	Cookies = Новый Соответствие;
	Для Каждого ОчереднойЗаголовок Из Заголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = "set-cookie" Тогда
			Для Каждого ЗаголовокCookie Из РазбитьНаОтдельныеЗаголовкиCookies(ОчереднойЗаголовок.Значение) Цикл
				Cookie = РаспарситьCookie(ЗаголовокCookie, URL, ТекущееВремя);
				Если Cookie = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Cookie.СрокДействия <= ТекущееВремя Тогда
					УдалитьCookieИзХранилища(Cookies, Cookie);
				Иначе
					ДобавитьCookieВХранилище(Cookies, Cookie);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Cookies;
	
КонецФункции


Функция РазбитьНаОтдельныеЗаголовкиCookies(Знач Заголовок)
	
	Заголовки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Возврат Заголовки;
	КонецЕсли;
	
	ЗапчастиЗаголовков = СтрРазделить(Заголовок, ",", Ложь);
	
	ОтдельныйЗаголовок = ЗапчастиЗаголовков[0];
	Для Индекс = 1 По ЗапчастиЗаголовков.ВГраница() Цикл
		ТочкаСЗапятой = СтрНайти(ЗапчастиЗаголовков[Индекс], ";");
		Равно = СтрНайти(ЗапчастиЗаголовков[Индекс], "=");
		Если ТочкаСЗапятой И Равно И Равно < ТочкаСЗапятой Тогда
			Заголовки.Добавить(ОтдельныйЗаголовок);
			ОтдельныйЗаголовок = ЗапчастиЗаголовков[Индекс];
		Иначе
			ОтдельныйЗаголовок = ОтдельныйЗаголовок + ЗапчастиЗаголовков[Индекс];
		КонецЕсли;
	КонецЦикла;
	Заголовки.Добавить(ОтдельныйЗаголовок);
	
	Возврат Заголовки;
	
КонецФункции


Функция КонструкторCookie(Наименование = "", Значение = Неопределено)
	
	НовыйCookie = Новый Структура;
	НовыйCookie.Вставить("Наименование", Наименование);
	НовыйCookie.Вставить("Значение", Значение);
	НовыйCookie.Вставить("Домен", "");
	НовыйCookie.Вставить("Путь", "");
	НовыйCookie.Вставить("Порт");
	НовыйCookie.Вставить("СрокДействия", '39990101');
	НовыйCookie.Вставить("ТолькоБезопасноеСоединение");
	
	Возврат НовыйCookie;
	
КонецФункции


Функция СоздатьCookieИЗаполнитьОсновныеПараметры(Параметр)

	Части = СтрРазделить(Параметр, "=", Ложь);
	Наименование = Части[0];
	Если Части.Количество() > 1 Тогда
		Значение = Части[1];
	КонецЕсли;

	Возврат КонструкторCookie(Наименование, Значение);

КонецФункции


Функция РаспарситьCookie(Заголовок, URL, ТекущееВремя)
	
	Cookie = Неопределено;
	Индекс = 0;
	
	Для Каждого Параметр Из СтрРазделить(Заголовок, ";", Ложь) Цикл
		Индекс = Индекс + 1;
		Параметр = СокрЛП(Параметр);
		
		Если Индекс = 1 Тогда
			Cookie = СоздатьCookieИЗаполнитьОсновныеПараметры(Параметр);
			Продолжить;
		КонецЕсли;
		
		Части = СтрРазделить(Параметр, "=", Ложь);
		Ключ = НРег(Части[0]);
		Если Части.Количество() > 1 Тогда
			Значение = Части[1];
		КонецЕсли;

		Если Ключ = "domain" Тогда
			Cookie.Домен = Значение;
		ИначеЕсли Ключ = "path" Тогда
			Cookie.Путь = Значение;
		ИначеЕсли Ключ = "secure" Тогда
			Cookie.ТолькоБезопасноеСоединение = Истина;
		ИначеЕсли Ключ = "max-age" Тогда
			СрокДействияMaxAge = ТекущееВремя + ЧислоИзСтроки(Значение);
		ИначеЕсли Ключ = "expires" Тогда
			Cookie.СрокДействия = ДатаИзСтрокиRFC7231(Значение);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Cookie) И ЗначениеЗаполнено(СрокДействияMaxAge) Тогда
		Cookie.СрокДействия = СрокДействияMaxAge;
	КонецЕсли;
	
	ДозаполнитьCookieНеявнымиЗначениями(Cookie, URL);

	Возврат Cookie;
	
КонецФункции


Процедура ДозаполнитьCookieНеявнымиЗначениями(Cookie, URL)

	Если Cookie = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураURL = РазобратьURL(URL);
	Если Не ЗначениеЗаполнено(Cookie.Домен) Тогда
		Cookie.Домен = СтруктураURL.Сервер;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Cookie.Порт) И ЗначениеЗаполнено(СтруктураURL.Порт) Тогда
		Cookie.Порт = СтруктураURL.Порт;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Cookie.Путь) Тогда
		ПозицияПоследнегоСлеша = СтрНайти(СтруктураURL.Путь, "/", НаправлениеПоиска.СКонца);
		Если ПозицияПоследнегоСлеша <= 1 Тогда
			Cookie.Путь = "/";
		Иначе
			Cookie.Путь = Лев(СтруктураURL.Путь, ПозицияПоследнегоСлеша - 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьЗначениеЗаголовка(Заголовок, ВсеЗаголовки, Ключ = Неопределено)
	
	Для Каждого ОчереднойЗаголовок Из ВсеЗаголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = НРег(Заголовок) Тогда
			Ключ = ОчереднойЗаголовок.Ключ;
			Возврат ОчереднойЗаголовок.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


Функция ЭтоПостоянныйРедирект(КодСостояния, Заголовки)
	
	КодыСостоянияHTTP = КодыСостоянияHTTP();
	
	Возврат ЕстьЗаголовокLocation(Заголовки) И 
		(КодСостояния = КодыСостоянияHTTP.ПеремещеноНавсегда_301 
		ИЛИ КодСостояния = КодыСостоянияHTTP.ПостоянноеПеренаправление_308);
	
КонецФункции


Функция ЭтоРедирект(КодСостояния, Заголовки)
	
	КодыСостоянияHTTP = КодыСостоянияHTTP();
	
	СостоянияРедиректа = Новый Массив;
	СостоянияРедиректа.Добавить(КодыСостоянияHTTP.ПеремещеноНавсегда_301);
	СостоянияРедиректа.Добавить(КодыСостоянияHTTP.ПеремещеноВременно_302);
	СостоянияРедиректа.Добавить(КодыСостоянияHTTP.СмотретьДругое_303);
	СостоянияРедиректа.Добавить(КодыСостоянияHTTP.ВременноеПеренаправление_307);
	СостоянияРедиректа.Добавить(КодыСостоянияHTTP.ПостоянноеПеренаправление_308);
	
	Возврат ЕстьЗаголовокLocation(Заголовки) И СостоянияРедиректа.Найти(КодСостояния) <> Неопределено;
	
КонецФункции


Функция ЕстьЗаголовокLocation(Заголовки)
	
	Возврат ПолучитьЗначениеЗаголовка("location", Заголовки) <> Ложь;
	
КонецФункции


Функция ПолучитьКодировкуИзЗаголовка(Знач Заголовок)

	Кодировка = Неопределено;
	
	Заголовок = НРег(СокрЛП(Заголовок));
	ИндексРазделителя = СтрНайти(Заголовок, ";");
	Если ИндексРазделителя Тогда
		ТипСодержимого = СокрЛП(Лев(Заголовок, ИндексРазделителя - 1));
		КлючКодировки = "charset=";
		ИндексКодировки = СтрНайти(Заголовок, КлючКодировки);
		Если ИндексКодировки Тогда
			ИндексРазделителя = СтрНайти(Заголовок, ";", НаправлениеПоиска.СНачала, ИндексКодировки);
			НачальнаяПозиция = ИндексКодировки + СтрДлина(КлючКодировки);
			Если ИндексРазделителя Тогда
				ДлинаКодировки = ИндексРазделителя - НачальнаяПозиция;
			Иначе
				ДлинаКодировки = СтрДлина(Заголовок);
			КонецЕсли;
			Кодировка = Сред(Заголовок, НачальнаяПозиция, ДлинаКодировки);
			Кодировка = СтрЗаменить(Кодировка, """", "");
			Кодировка = СтрЗаменить(Кодировка, "'", "");
		КонецЕсли;
	Иначе
		ТипСодержимого = Заголовок;
	КонецЕсли;
	
	Если Кодировка = Неопределено И СтрНайти(ТипСодержимого, "text") Тогда
		Кодировка = "iso-8859-1";
	КонецЕсли;
	
	Возврат Кодировка;
	
КонецФункции


Функция СобратьАдресРесурса(СтруктураURL, ПараметрыЗапроса)
	
	АдресРесурса = СтруктураURL.Путь;
	
	ОбъединенныеПараметрыЗапроса = ОбъединитьПараметрыЗапроса(ПараметрыЗапроса, СтруктураURL.ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ОбъединенныеПараметрыЗапроса) Тогда
		АдресРесурса = АдресРесурса + "?" + КодироватьПараметрыЗапроса(ОбъединенныеПараметрыЗапроса);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураURL.Фрагмент) Тогда
		АдресРесурса = АдресРесурса + "#" + СтруктураURL.Фрагмент;
	КонецЕсли;
	
	Возврат АдресРесурса;
	
КонецФункции


Функция ПолучитьЗащищенноеСоединение(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ПроверятьSSL = Ложь Тогда
		СертификатыУЦ = Неопределено;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.ПроверятьSSL) = Тип("СертификатыУдостоверяющихЦентровФайл") Тогда
		СертификатыУЦ = ДополнительныеПараметры.ПроверятьSSL;
	Иначе
		СертификатыУЦ = Новый СертификатыУдостоверяющихЦентровОС;
	КонецЕсли;
	КлиентскийСертификат = Неопределено;
	Если ДополнительныеПараметры.КлиентскийСертификатSSL = Тип("СертификатКлиентаФайл") 
		ИЛИ ДополнительныеПараметры.КлиентскийСертификатSSL = Тип("СертификатКлиентаWindows") Тогда
		КлиентскийСертификат = ДополнительныеПараметры.КлиентскийСертификатSSL;
	КонецЕсли;
	
	Возврат Новый ЗащищенноеСоединениеOpenSSL(КлиентскийСертификат, СертификатыУЦ);
	
КонецФункции


Функция ПолучитьСоединение(ПараметрыСоединения, Аутентификация, ДополнительныеПараметры, Сессия)
	
	Если Не ЗначениеЗаполнено(ПараметрыСоединения.Порт) Тогда
		Если ПараметрыСоединения.Схема = "https" Тогда
			ПараметрыСоединения.Порт = 443;
		Иначе
			ПараметрыСоединения.Порт = 80;
		КонецЕсли;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.Схема = "https" Тогда
		ЗащищенноеСоединение = ПолучитьЗащищенноеСоединение(ДополнительныеПараметры);
	КонецЕсли;
	
	Пользователь = "";
	Пароль = "";
	Если ЗначениеЗаполнено(Аутентификация) Тогда
		Если Аутентификация.Свойство("Пользователь") И Аутентификация.Свойство("Пароль") Тогда
			Пользователь = Аутентификация.Пользователь;
			Пароль = Аутентификация.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = Аутентификация.Свойство("ИспользоватьАутентификациюОС") 
		И Аутентификация.ИспользоватьАутентификациюОС = Истина;
		
	ПараметрыДляРасчетаИдентификатора = Новый Массив;
	ПараметрыДляРасчетаИдентификатора.Добавить(ПараметрыСоединения.Сервер);
	ПараметрыДляРасчетаИдентификатора.Добавить(ПараметрыСоединения.Порт);
	ПараметрыДляРасчетаИдентификатора.Добавить(Пользователь);
	ПараметрыДляРасчетаИдентификатора.Добавить(Пароль);
	ПараметрыДляРасчетаИдентификатора.Добавить(ДополнительныеПараметры.Таймаут);
	ПараметрыДляРасчетаИдентификатора.Добавить(ИспользоватьАутентификациюОС);
	ПараметрыДляРасчетаИдентификатора.Добавить(ЗащищенноеСоединение);
	ПараметрыДляРасчетаИдентификатора.Добавить(ДополнительныеПараметры.Прокси);
	
	Если Не Сессия.Свойство("СлужебныеДанные") ИЛИ ТипЗнч(Сессия.СлужебныеДанные) <> Тип("Структура") Тогда
		Сессия.Вставить("СлужебныеДанные", Новый Структура);
	КонецЕсли;
	Если Не Сессия.СлужебныеДанные.Свойство("ПулСоединений") Тогда
		Сессия.СлужебныеДанные.Вставить("ПулСоединений", Новый Соответствие);
	КонецЕсли;
	ПулСоединений = Сессия.СлужебныеДанные.ПулСоединений;
	
	ИдентификаторСоединения = ПолучитьИдентификаторСоединения(ПараметрыДляРасчетаИдентификатора);
	
	Если ПулСоединений.Получить(ИдентификаторСоединения) = Неопределено Тогда
		НовоеСоединение = Новый HTTPСоединение(
			ПараметрыСоединения.Сервер,
			ПараметрыСоединения.Порт,
			Пользователь, Пароль,
			ДополнительныеПараметры.Прокси, 
			ДополнительныеПараметры.Таймаут, 
			ЗащищенноеСоединение,
			ИспользоватьАутентификациюОС);
		ПулСоединений.Вставить(ИдентификаторСоединения, НовоеСоединение);
	КонецЕсли;
	
	Возврат ПулСоединений[ИдентификаторСоединения];
	
КонецФункции


Функция ПолучитьИдентификаторСоединения(ПараметрыСоединения)
	
	ПараметрыДляРасчетаИдентификатора = Новый Массив;
	
	Для Каждого Элемент Из ПараметрыСоединения Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ИнтернетПрокси") Тогда
			ПараметрыДляРасчетаИдентификатора.Добавить(СтрСоединить(Элемент.НеИспользоватьПроксиДляАдресов, ""));
			ПараметрыДляРасчетаИдентификатора.Добавить(XMLСтрока(Элемент.НеИспользоватьПроксиДляЛокальныхАдресов));
			ПараметрыДляРасчетаИдентификатора.Добавить(Элемент.Пользователь);
			ПараметрыДляРасчетаИдентификатора.Добавить(Элемент.Пароль);
		ИначеЕсли ТипЭлемента = Тип("ЗащищенноеСоединениеOpenSSL") Тогда
			// Для упрощения будет считать, что сертификаты в рамках сессии не меняются
			Если Элемент.СертификатКлиента = Неопределено Тогда
				ПараметрыДляРасчетаИдентификатора.Добавить("");
			Иначе
				ПараметрыДляРасчетаИдентификатора.Добавить(Строка(ТипЗнч(Элемент.СертификатКлиента)));
			КонецЕсли;
			Если Элемент.СертификатыУдостоверяющихЦентров = Неопределено Тогда
				ПараметрыДляРасчетаИдентификатора.Добавить("");
			Иначе
				ПараметрыДляРасчетаИдентификатора.Добавить(Строка(ТипЗнч(Элемент.СертификатыУдостоверяющихЦентров)));
			КонецЕсли;
		Иначе
			ПараметрыДляРасчетаИдентификатора.Добавить(XMLСтрока(Элемент));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ХешированиеДанных(ХешФункция.MD5, СтрСоединить(ПараметрыДляРасчетаИдентификатора, ""));
	
КонецФункции


Функция ВыбратьЗначение(ОсновноеЗначение, ДополнительныеЗначения, Ключ, ЗначениеПоУмолчанию)
	
	Если ОсновноеЗначение <> Неопределено Тогда
		Возврат ОсновноеЗначение;
	КонецЕсли;
	
	Значение = ПолучитьЗначениеПоКлючу(ДополнительныеЗначения, Ключ);
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции


Функция ЗаполнитьПараметрыЗапроса(Путь)

	ПараметрыЗапроса = Новый Соответствие;
	
	Запрос = "";
	РазбитьСтрокуПоРазделителю(Запрос, Путь, "?", Истина);
	Для Каждого СтрокаКлючРавноПараметр Из СтрРазделить(Запрос, "&", Ложь) Цикл
		СтрокаКлючРавноПараметр = РаскодироватьСтроку(
			СтрокаКлючРавноПараметр, СпособКодированияСтроки.URLВКодировкеURL);

		ПозицияРавно = СтрНайти(СтрокаКлючРавноПараметр, "=");
		Если ПозицияРавно = 0 Тогда
			Ключ = СтрокаКлючРавноПараметр;
			Значение = Неопределено;
		Иначе
			Ключ = Лев(СтрокаКлючРавноПараметр, ПозицияРавно - 1);
			Значение = Сред(СтрокаКлючРавноПараметр, ПозицияРавно + 1);
		КонецЕсли;

		Если ПараметрыЗапроса.Получить(Ключ) <> Неопределено Тогда
			Если ТипЗнч(ПараметрыЗапроса[Ключ]) = Тип("Массив") Тогда
				ПараметрыЗапроса[Ключ].Добавить(Значение);
			Иначе
				Значения = Новый Массив;
				Значения.Добавить(ПараметрыЗапроса[Ключ]);
				Значения.Добавить(Значение);
				ПараметрыЗапроса[Ключ] = Значения;
			КонецЕсли;
		Иначе
			ПараметрыЗапроса.Вставить(Ключ, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;

КонецФункции


Процедура РазбитьСтрокуПоРазделителю(ИзвлекаемаяЧасть, ОстальнаяЧасть, Разделитель, Инверсия = Ложь)
	
	Индекс = СтрНайти(ОстальнаяЧасть, Разделитель);
	Если Индекс Тогда
		ИзвлекаемаяЧасть = Лев(ОстальнаяЧасть, Индекс - 1);
		ОстальнаяЧасть = Сред(ОстальнаяЧасть, Индекс + СтрДлина(Разделитель));
		Если Инверсия Тогда
			ДляОбмена = ИзвлекаемаяЧасть;
			ИзвлекаемаяЧасть = ОстальнаяЧасть;
			ОстальнаяЧасть = ДляОбмена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция РазделитьПоПервомуНайденномуРазделителю(Строка, Разделители)
	
	МинимальныйИндекс = СтрДлина(Строка);
	ПервыйРазделитель = "";
	
	Для Каждого Разделитель Из Разделители Цикл
		Индекс = СтрНайти(Строка, Разделитель);
		Если Индекс = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Индекс < МинимальныйИндекс Тогда
			МинимальныйИндекс = Индекс;
			ПервыйРазделитель = Разделитель;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйРазделитель) Тогда
		Результат.Добавить(Лев(Строка, МинимальныйИндекс - 1));
		Результат.Добавить(Сред(Строка, МинимальныйИндекс + СтрДлина(ПервыйРазделитель)));
		Результат.Добавить(ПервыйРазделитель);
	Иначе
		Результат.Добавить(Строка);
		Результат.Добавить("");
		Результат.Добавить(Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ДополнитьПараметрыПреобразованияJSON(ПараметрыПреобразования)
	
	ПараметрыПреобразованияJSON = ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
	Если ЗначениеЗаполнено(ПараметрыПреобразования) Тогда
		Для Каждого Параметр Из ПараметрыПреобразования Цикл
			Если ПараметрыПреобразованияJSON.Свойство(Параметр.Ключ) Тогда
				ПараметрыПреобразованияJSON.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПреобразованияJSON;
	
КонецФункции


Функция ДополнитьПараметрыЗаписиJSON(ПараметрыЗаписи)
	
	ПараметрыЗаписиJSON = ПолучитьПараметрыЗаписиJSONПоУмолчанию();
	Если ЗначениеЗаполнено(ПараметрыЗаписи) Тогда
		Для Каждого Параметр Из ПараметрыЗаписи Цикл
			Если ПараметрыЗаписиJSON.Свойство(Параметр.Ключ) Тогда
				ПараметрыЗаписиJSON.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыЗаписиJSON;
	
КонецФункции


Функция ПолучитьКлючПодписиAWS4(СекретныйКлюч, Дата, Регион, Сервис)
	
	КлючДата = ПодписатьСообщениеHMAC("AWS4" + СекретныйКлюч, Дата);
	КлючРегион = ПодписатьСообщениеHMAC(КлючДата, Регион);
	КлючСервис = ПодписатьСообщениеHMAC(КлючРегион, Сервис);
	
	Возврат ПодписатьСообщениеHMAC(КлючСервис, "aws4_request");
	
КонецФункции


Функция ПодписатьСообщениеHMAC(Знач Ключ, Знач Сообщение, Знач Алгоритм = Неопределено)
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.SHA256;
	КонецЕсли;
	
	Если ТипЗнч(Ключ) = Тип("Строка") Тогда
		Ключ = ПолучитьДвоичныеДанныеИзСтроки(Ключ, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;
	Если ТипЗнч(Сообщение) = Тип("Строка") Тогда
		Сообщение = ПолучитьДвоичныеДанныеИзСтроки(Сообщение, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;

	Возврат HMAC(Ключ, Сообщение, Алгоритм);
	
КонецФункции


Процедура ПодготовитьАутентификациюAWS4(ПодготовленныйЗапрос)

	ЗначениеЗаголовка = ПолучитьЗначениеЗаголовка("x-amz-date", ПодготовленныйЗапрос.Заголовки);
	Если ЗначениеЗаголовка <> Ложь Тогда
		ТекущееВремя = Дата(СтрЗаменить(СтрЗаменить(ЗначениеЗаголовка, "T", ""), "Z", ""));
	Иначе
		ТекущееВремя = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	ПодготовленныйЗапрос.Заголовки["x-amz-date"] = Формат(ТекущееВремя, "ДФ=yyyyMMddTHHmmssZ");
	ОбластьДействияДата = Формат(ТекущееВремя, "ДФ=yyyyMMdd");
	
	ПодготовленныйЗапрос.Заголовки["x-amz-content-sha256"] = 
		ХешированиеДанных(ХешФункция.SHA256, ПодготовленныйЗапрос.HTTPЗапрос.ПолучитьТелоКакПоток());
		
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
	
	КаноническиеЗаголовки = ПолучитьКаноническиеЗаголовкиAWS4(ПодготовленныйЗапрос.Заголовки, СтруктураURL);
	
	КаноническийПуть = СтруктураURL.Путь;
	КаноническиеПараметрыЗапроса = ПолучитьКаноническиеПараметрыЗапросаAWS4(СтруктураURL.ПараметрыЗапроса);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ПодготовленныйЗапрос.Метод);
	ЧастиЗапроса.Добавить(КаноническийПуть);
	ЧастиЗапроса.Добавить(КаноническиеПараметрыЗапроса);
	ЧастиЗапроса.Добавить(КаноническиеЗаголовки.КаноническиеЗаголовки);
	ЧастиЗапроса.Добавить(КаноническиеЗаголовки.ПодписываемыеЗаголовки);
	ЧастиЗапроса.Добавить(ПодготовленныйЗапрос.Заголовки["x-amz-content-sha256"]);
	КаноническийЗапрос = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	ЧастиОбластиДействия = Новый Массив;
	ЧастиОбластиДействия.Добавить(ОбластьДействияДата);
	ЧастиОбластиДействия.Добавить(ПодготовленныйЗапрос.Аутентификация.Регион);
	ЧастиОбластиДействия.Добавить(ПодготовленныйЗапрос.Аутентификация.Сервис);
	ЧастиОбластиДействия.Добавить("aws4_request");
	ОбластьДействия = СтрСоединить(ЧастиОбластиДействия, "/");
	
	ЧастиСтрокиДляПодписи = Новый Массив;
	ЧастиСтрокиДляПодписи.Добавить(ПодготовленныйЗапрос.Аутентификация.Тип);
	ЧастиСтрокиДляПодписи.Добавить(ПодготовленныйЗапрос.Заголовки["x-amz-date"]);
	ЧастиСтрокиДляПодписи.Добавить(ОбластьДействия);
	ЧастиСтрокиДляПодписи.Добавить(ХешированиеДанных(ХешФункция.SHA256, КаноническийЗапрос));
	СтрокаДляПодписи = СтрСоединить(ЧастиСтрокиДляПодписи, Символы.ПС);
	
	Ключ = ПолучитьКлючПодписиAWS4(
		ПодготовленныйЗапрос.Аутентификация.СекретныйКлюч,
		ОбластьДействияДата,
		ПодготовленныйЗапрос.Аутентификация.Регион,
		ПодготовленныйЗапрос.Аутентификация.Сервис);
	Подпись = НРег(ПолучитьHexСтрокуИзДвоичныхДанных(ПодписатьСообщениеHMAC(Ключ, СтрокаДляПодписи)));
	
	ПодготовленныйЗапрос.Заголовки["Authorization"] = СтрШаблон(
		"%1 Credential=%2/%3, SignedHeaders=%4, Signature=%5",
		ПодготовленныйЗапрос.Аутентификация.Тип,
		ПодготовленныйЗапрос.Аутентификация.ИдентификаторКлючаДоступа,
		ОбластьДействия,
		КаноническиеЗаголовки.ПодписываемыеЗаголовки,
		Подпись);
	
	ПодготовленныйЗапрос.HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;

КонецПроцедуры


Функция ЭтоСтандартныйПорт(СтруктураURL)
	
	СтандартныйПортHTTP = 80;
	СтандартныйПортHTTPS = 443;
	
	Возврат (СтруктураURL.Схема = "http" И СтруктураURL.Порт = СтандартныйПортHTTP) 
		ИЛИ (СтруктураURL.Схема = "https" И СтруктураURL.Порт = СтандартныйПортHTTPS);
	
КонецФункции


Функция СформироватьЗначениеЗаголовкаHost(СтруктураURL)
	
	Host = СтруктураURL.Сервер;
	Если ЗначениеЗаполнено(СтруктураURL.Порт) И НЕ ЭтоСтандартныйПорт(СтруктураURL) Тогда
		Host = Host + ":" + Формат(СтруктураURL.Порт, "ЧРГ=; ЧГ=");
	КонецЕсли;
	
	Возврат Host;
	
КонецФункции


Функция ПолучитьКаноническиеЗаголовкиAWS4(Заголовки, СтруктураURL)
	
	Список = Новый СписокЗначений;
	
	ЗаголовокHostЕстьВЗапросе = Ложь;
	ЗаголовкиПоУмолчанию = ЗаголовкиПоУмолчаниюAWS4();
	Для Каждого ОчереднойЗаголовок Из Заголовки Цикл
		Заголовок = НРег(ОчереднойЗаголовок.Ключ);
		Если ЗаголовкиПоУмолчанию.Исключения.Найти(Заголовок) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаголовокHostЕстьВЗапросе = Макс(ЗаголовокHostЕстьВЗапросе, Заголовок = "host");
		
		Если ЗаголовкиПоУмолчанию.Равно.Найти(Заголовок) <> Неопределено Тогда
			Список.Добавить(Заголовок, СокрЛП(ОчереднойЗаголовок.Значение));
		Иначе
			Для Каждого Префикс Из ЗаголовкиПоУмолчанию.НачинаетсяС Цикл
				Если СтрНачинаетсяС(Заголовок, Префикс) Тогда
					Список.Добавить(Заголовок, СокрЛП(ОчереднойЗаголовок.Значение));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗаголовокHostЕстьВЗапросе Тогда
		Список.Добавить("host", СформироватьЗначениеЗаголовкаHost(СтруктураURL));
	КонецЕсли;
	
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	КаноническиеЗаголовки = Новый Массив;
	ПодписываемыеЗаголовки = Новый Массив;
	Для Каждого ЭлементСписка Из Список Цикл
		КаноническиеЗаголовки.Добавить(ЭлементСписка.Значение + ":" + ЭлементСписка.Представление);
		ПодписываемыеЗаголовки.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	КаноническиеЗаголовки.Добавить("");
	
	КаноническиеЗаголовки = СтрСоединить(КаноническиеЗаголовки, Символы.ПС);
	ПодписываемыеЗаголовки = СтрСоединить(ПодписываемыеЗаголовки, ";");
	Возврат Новый Структура(
		"КаноническиеЗаголовки, ПодписываемыеЗаголовки",
		КаноническиеЗаголовки, ПодписываемыеЗаголовки);
	
КонецФункции


Функция ПолучитьКаноническиеПараметрыЗапросаAWS4(ПараметрыЗапроса)
	
	Список = Новый СписокЗначений;
	Для Каждого ОчереднойПараметрЗапроса Из ПараметрыЗапроса Цикл
		Список.Добавить(ОчереднойПараметрЗапроса.Ключ, СокрЛП(ОчереднойПараметрЗапроса.Значение));
	КонецЦикла;
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	КаноническиеПараметры = Новый Массив;
	Для Каждого ЭлементСписка Из Список Цикл
		ЗначениеПараметра = КодироватьСтроку(ЭлементСписка.Представление, СпособКодированияСтроки.КодировкаURL);
		КаноническиеПараметры.Добавить(ЭлементСписка.Значение + "=" + ЗначениеПараметра);
	КонецЦикла;
	
	Возврат СтрСоединить(КаноническиеПараметры, "&");
		
КонецФункции


Функция ЗаголовкиПоУмолчаниюAWS4()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("Равно", СтрРазделить("host,content-type,date", ","));
	Заголовки.Вставить("НачинаетсяС", СтрРазделить("x-amz-", ","));
	Заголовки.Вставить("Исключения", СтрРазделить("x-amz-client-context", ","));
	
	Возврат Заголовки;
	
КонецФункции


Функция ZipРазмерLFH()
	
	Возврат 34;
	
КонецФункции


Функция ZipРазмерDD()
	
	Возврат 16;
	
КонецФункции


Функция ZipРазмерCDH()
	
	Возврат 50;
	
КонецФункции


Функция ZipРазмерEOCD()
	
	Возврат 22;
	
КонецФункции


Функция ZipLFH()
	
	// Local file header
	Буфер = Новый БуферДвоичныхДанных(ZipРазмерLFH());
	Буфер.ЗаписатьЦелое32(0, 67324752); // signature 0x04034b50
	Буфер.ЗаписатьЦелое16(4, 20);       // version
	Буфер.ЗаписатьЦелое16(6, 10);       // bit flags	
	Буфер.ЗаписатьЦелое16(8, 8);        // compression method
	Буфер.ЗаписатьЦелое16(10, 0);       // time
	Буфер.ЗаписатьЦелое16(12, 0);       // date
	Буфер.ЗаписатьЦелое32(14, 0);       // crc-32
	Буфер.ЗаписатьЦелое32(18, 0);       // compressed size
	Буфер.ЗаписатьЦелое32(22, 0);       // uncompressed size
	Буфер.ЗаписатьЦелое16(26, 4);       // filename legth - "data"
	Буфер.ЗаписатьЦелое16(28, 0);       // extra field length
	Буфер.Записать(30, ПолучитьБуферДвоичныхДанныхИзСтроки("data", "ascii", Ложь));
	
	Возврат Буфер;
	
КонецФункции


Функция ZipDD(CRC32, РазмерСжатыхДанных, РазмерНесжатыхДанных)
	
	// Data descriptor
	Буфер = Новый БуферДвоичныхДанных(ZipРазмерDD());
	Буфер.ЗаписатьЦелое32(0, 134695760);
	Буфер.ЗаписатьЦелое32(4, CRC32);
	Буфер.ЗаписатьЦелое32(8, РазмерСжатыхДанных);
	Буфер.ЗаписатьЦелое32(12, РазмерНесжатыхДанных);
	
	Возврат Буфер;
	
КонецФункции


Функция ZipCDH(CRC32, РазмерСжатыхДанных, РазмерНесжатыхДанных)
	
	// Central directory header
	Буфер = Новый БуферДвоичныхДанных(ZipРазмерCDH());
	Буфер.ЗаписатьЦелое32(0, 33639248);              // signature 0x02014b50
	Буфер.ЗаписатьЦелое16(4, 798);                   // version made by
	Буфер.ЗаписатьЦелое16(6, 20);                    // version needed to extract
	Буфер.ЗаписатьЦелое16(8, 10);                    // bit flags
	Буфер.ЗаписатьЦелое16(10, 8);                    // compression method
	Буфер.ЗаписатьЦелое16(12, 0);                    // time
	Буфер.ЗаписатьЦелое16(14, 0);                    // date
	Буфер.ЗаписатьЦелое32(16, CRC32);                // crc-32
	Буфер.ЗаписатьЦелое32(20, РазмерСжатыхДанных);   // compressed size
	Буфер.ЗаписатьЦелое32(24, РазмерНесжатыхДанных); // uncompressed size
	Буфер.ЗаписатьЦелое16(28, 4);                    // file name length
	Буфер.ЗаписатьЦелое16(30, 0);                    // extra field length
	Буфер.ЗаписатьЦелое16(32, 0);                    // file comment length
	Буфер.ЗаписатьЦелое16(34, 0);                    // disk number start
	Буфер.ЗаписатьЦелое16(36, 0);                    // internal file attributes
	Буфер.ЗаписатьЦелое32(38, 2176057344);           // external file attributes
	Буфер.ЗаписатьЦелое32(42, 0);                    // relative offset of local header
	Буфер.Записать(46, ПолучитьБуферДвоичныхДанныхИзСтроки("data", "ascii", Ложь));
	
	Возврат Буфер;

КонецФункции


Функция ZipEOCD(РазмерСжатыхДанных)
	
	// End of central directory
	РазмерCDH = 50;
	Буфер = Новый БуферДвоичныхДанных(ZipРазмерEOCD());
	Буфер.ЗаписатьЦелое32(0, 101010256); // signature 0x06054b50
	Буфер.ЗаписатьЦелое16(4, 0); // number of this disk
	Буфер.ЗаписатьЦелое16(6, 0); // number of the disk with the start of the central directory
	Буфер.ЗаписатьЦелое16(8, 1); // total number of entries in the central directory on this disk
	Буфер.ЗаписатьЦелое16(10, 1); // total number of entries in the central directory
	Буфер.ЗаписатьЦелое32(12, РазмерCDH); // size of the central directory	
	// offset of start of central directory with respect to the starting disk number
	Буфер.ЗаписатьЦелое32(16, ZipРазмерLFH() + РазмерСжатыхДанных + ZipРазмерDD()); 
	Буфер.ЗаписатьЦелое16(20, 0); // the starting disk number
	
	Возврат Буфер;
	
КонецФункции


Функция GZipРазмерHeader()

	Возврат 10;

КонецФункции


Функция GZipРазмерFooter()

	Возврат 8;

КонецФункции


Функция GZipHeader()

	Буфер = Новый БуферДвоичныхДанных(GZipРазмерHeader());
	Буфер[0] = 31;               // ID1 0x1f
	Буфер[1] = 139;              // ID2 0x8b
	Буфер[2] = 8;                // compression method (08 for DEFLATE)
	Буфер[3] = 0;                // header flags
	Буфер.ЗаписатьЦелое32(4, 0); // timestamp
	Буфер[8] = 0;                // compression flags
	Буфер[9] = 255;              // operating system ID

	Возврат Буфер;

КонецФункции


Функция GZipFooter(CRC32, РазмерИсходныхДанных)
	
	Буфер = Новый БуферДвоичныхДанных(GZipРазмерFooter());
	Буфер.ЗаписатьЦелое32(0, CRC32);
	Буфер.ЗаписатьЦелое32(4, РазмерИсходныхДанных);

	Возврат Буфер;

КонецФункции


Функция ПрочитатьZip(СжатыеДанные, ТекстОшибки = Неопределено)
	
#Если МобильноеПриложениеСервер Тогда
	ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
#Иначе
	Каталог = ПолучитьИмяВременногоФайла();
	ЧтениеZip = Новый ЧтениеZipФайла(СжатыеДанные);
	ИмяФайла = ЧтениеZip.Элементы[0].Имя;
	Попытка
		ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		// Игнорируем проверку целостности архива, просто читаем результат
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	ЧтениеZip.Закрыть();
	
	Результат = Новый ДвоичныеДанные(Каталог + ПолучитьРазделительПути() + ИмяФайла);
	УдалитьФайлы(Каталог);
	
	Возврат Результат;
#КонецЕсли
	
КонецФункции


Функция ЗаписатьZip(Данные)

#Если МобильноеПриложениеСервер Тогда
	ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
#Иначе
	ВременныйФайл = ПолучитьИмяВременногоФайла(".bin");
	Данные.Записать(ВременныйФайл);
	ПотокZip = Новый ПотокВПамяти;
	ЗаписьZip = Новый ЗаписьZipФайла(ПотокZip);
	ЗаписьZip.Добавить(ВременныйФайл);
	ЗаписьZip.Записать();
	УдалитьФайлы(ВременныйФайл);

	Возврат ПотокZip.ЗакрытьИПолучитьДвоичныеДанные();
#КонецЕсли

КонецФункции


Процедура ОбработкаОтветаСКодом401(Сессия, ПодготовленныйЗапрос, Настройки, Ответ)
	
	Если ЭтоРедирект(Ответ.КодСостояния, Ответ.Заголовки) Тогда
		Возврат;
	КонецЕсли;
	
	КодыСостоянияHTTP = КодыСостоянияHTTP();
	Если Ответ.КодСостояния < КодыСостоянияHTTP.НеверныйЗапрос_400 
		ИЛИ Ответ.КодСостояния >= КодыСостоянияHTTP.ВнутренняяОшибкаСервера_500 Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ПолучитьЗначениеЗаголовка("www-authenticate", Ответ.Заголовки);
	Если Значение <> Ложь И СтрНайти(НРег(Значение), "digest") Тогда
		Позиция = СтрНайти(НРег(Значение), "digest");
		Значение = Сред(Значение, Позиция + СтрДлина("digest") + 1);
		Значение = СтрЗаменить(Значение, """", "");
		Значение = СтрЗаменить(Значение, Символы.ПС, "");
		
		ПараметрыDigest = Новый Структура("algorithm,realm,nonce,qop,opaque");
		Для Каждого Часть Из РазбитьСтрокуПоСтроке(Значение, ", ") Цикл
			КлючЗначение = СтрРазделить(Часть, "=");
			ПараметрыDigest.Вставить(КлючЗначение[0], КлючЗначение[1]);
		КонецЦикла;
		
		Сессия.СлужебныеДанные.ПараметрыDigest = ПараметрыDigest;
		
		ПодготовленныйЗапрос.Заголовки.Вставить("Authorization", ПодготовитьЗаголовокDigest(Сессия, ПодготовленныйЗапрос));
		ПодготовленныйЗапрос.HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
		
		Ответ = ОтправитьHTTPЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
	КонецЕсли;
	
КонецПроцедуры


Функция ОпределитьХешФункцию(Знач Алгоритм)
	
	Алгоритм = ВРег(Алгоритм);
	Если Не ЗначениеЗаполнено(Алгоритм) ИЛИ Алгоритм = "MD5" ИЛИ Алгоритм = "MD5-SESS" Тогда
		Возврат ХешФункция.MD5;
	ИначеЕсли Алгоритм = "SHA" Тогда
		Возврат ХешФункция.SHA1;
	ИначеЕсли Алгоритм = "SHA-256" Тогда
		Возврат ХешФункция.SHA256;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция ПодготовитьЗаголовокDigest(Сессия, ПодготовленныйЗапрос)
	
	ПараметрыDigest = Сессия.СлужебныеДанные.ПараметрыDigest;
	
	Алгоритм = ОпределитьХешФункцию(ПараметрыDigest.algorithm);
	АлгоритмСтрокой = ВРег(ПараметрыDigest.algorithm);
	Если Алгоритм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
	Путь = СтруктураURL.Путь;
	Если ЗначениеЗаполнено(СтруктураURL.ПараметрыЗапроса) Тогда
		Путь = Путь + "?" + КодироватьПараметрыЗапроса(СтруктураURL.ПараметрыЗапроса);
	КонецЕсли;
	
	A1 = СтрШаблон("%1:%2:%3", 
		ПодготовленныйЗапрос.Аутентификация.Пользователь,
		ПараметрыDigest.realm,
		ПодготовленныйЗапрос.Аутентификация.Пароль);
	A2 = СтрШаблон("%1:%2", ПодготовленныйЗапрос.Метод, Путь);
	
	HA1 = ХешированиеДанных(Алгоритм, A1);
	HA2 = ХешированиеДанных(Алгоритм, A2);
	
	Если Не ПараметрыDigest.Свойство("last_nonce") Тогда
		ПараметрыDigest.Вставить("last_nonce");
	КонецЕсли;
	
	Если ПараметрыDigest.nonce = ПараметрыDigest.last_nonce Тогда
		ПараметрыDigest.nonce_count = ПараметрыDigest.nonce_count + 1;
	Иначе
		ПараметрыDigest.Вставить("nonce_count", 1);
	КонецЕсли;
	
	ЗначениеNC = Формат(ПараметрыDigest.nonce_count, "ЧЦ=8; ЧВН=; ЧГ=");
	ЗначениеNonce = Лев(СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", ""), 16);

	Если АлгоритмСтрокой = "MD5-SESS" Тогда
		HA1 = ХешированиеДанных(Алгоритм, СтрШаблон("%1:%2:%3", HA1, ПараметрыDigest.nonce, ЗначениеNonce)); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыDigest.qop) Тогда
		ЗначениеResponse = ХешированиеДанных(Алгоритм, СтрШаблон("%1:%2:%3", HA1, ПараметрыDigest.nonce, HA2));
	ИначеЕсли ПараметрыDigest.qop = "auth"
		ИЛИ СтрРазделить(ПараметрыDigest.qop, ",", Ложь).Найти("auth") <> Неопределено Тогда
		ЗначениеNonceBit = СтрШаблон("%1:%2:%3:%4:%5", ПараметрыDigest.nonce, ЗначениеNC, ЗначениеNonce, "auth", HA2);
		ЗначениеResponse = ХешированиеДанных(Алгоритм, СтрШаблон("%1:%2", HA1, ЗначениеNonceBit));
	Иначе
		// INFO: auth-int не реализовано
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыDigest.last_nonce = ПараметрыDigest.nonce;

	База = СтрШаблон("username=""%1"", realm=""%2"", nonce=""%3"", uri=""%4"", response=""%5""", 
		ПодготовленныйЗапрос.Аутентификация.Пользователь,
		ПараметрыDigest.realm,
		ПараметрыDigest.nonce,
		Путь,
		ЗначениеResponse);
	Строки = Новый Массив;
	Строки.Добавить(База);
		
	Если ЗначениеЗаполнено(ПараметрыDigest.opaque) Тогда
		Строки.Добавить(СтрШаблон(", opaque=""%1""", ПараметрыDigest.opaque));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыDigest.algorithm) Тогда
		Строки.Добавить(СтрШаблон(", algorithm=""%1""", ПараметрыDigest.algorithm));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыDigest.qop) Тогда
		Строки.Добавить(СтрШаблон(", qop=""auth"", nc=%1, cnonce=""%2""", ЗначениеNC, ЗначениеNonce));
	КонецЕсли;
	
	Возврат СтрШаблон("Digest %1", СтрСоединить(Строки, ""));
	
КонецФункции


Функция ХешированиеДанных(Знач Алгоритм, Знач Данные)
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Данные = ПолучитьДвоичныеДанныеИзСтроки(Данные, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;
	
	Хеширование = Новый ХешированиеДанных(Алгоритм);
	Хеширование.Добавить(Данные);
	
	Возврат НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Хеширование.ХешСумма));
	
КонецФункции


Функция РазбитьСтрокуПоСтроке(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, Разделитель);
		Если Позиция = 0 И ЗначениеЗаполнено(Строка) Тогда
			Результат.Добавить(Строка);
			Прервать;
		КонецЕсли;
		
		ПерваяЧасть = Лев(Строка, Позиция - СтрДлина(Разделитель) + 1);
		Результат.Добавить(ПерваяЧасть);
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция РаспаковатьОтвет(Ответ)
	
	Заголовок = ПолучитьЗначениеЗаголовка("content-encoding", Ответ.Заголовки);
	Если Заголовок <> Ложь Тогда
		Если НРег(Заголовок) = "gzip" Тогда
			Возврат ПрочитатьGZip(Ответ.Тело);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ.Тело;
	
КонецФункции


Процедура УпаковатьЗапрос(Запрос)

	Заголовок = ПолучитьЗначениеЗаголовка("content-encoding", Запрос.Заголовки);
	Если Заголовок <> Ложь Тогда
		Если НРег(Заголовок) = "gzip" Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗаписатьGZip(Запрос.ПолучитьТелоКакДвоичныеДанные()));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Функция ЗаголовкиПоУмолчанию()
	
	Заголовки = Новый Соответствие;
#Если МобильноеПриложениеСервер Тогда
	Заголовки.Вставить("Accept-Encoding", "identity");
#Иначе
	Заголовки.Вставить("Accept-Encoding", "gzip");
#КонецЕсли
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Connection", "keep-alive");
	
	Возврат Заголовки;
	
КонецФункции


Функция МаксимальноеКоличествоПеренаправлений()
	
	Возврат 30;
	
КонецФункции


Функция СтандартныйТаймаут()
	
	Возврат 30;
	
КонецФункции


Функция ПолучитьПараметрыПреобразованияJSONПоУмолчанию()
	
	ПараметрыПреобразованияПоУмолчанию = Новый Структура;
	ПараметрыПреобразованияПоУмолчанию.Вставить("ПрочитатьВСоответствие", Истина);
	ПараметрыПреобразованияПоУмолчанию.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);
	ПараметрыПреобразованияПоУмолчанию.Вставить("ИменаСвойствСоЗначениямиДата", Неопределено);
	
	Возврат ПараметрыПреобразованияПоУмолчанию;
	
КонецФункции


Функция ПолучитьПараметрыЗаписиJSONПоУмолчанию()
	
	ПараметрыЗаписиJSONПоУмолчанию = Новый Структура;
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ПереносСтрок", ПереносСтрокJSON.Авто);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("СимволыОтступа", " ");
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ИспользоватьДвойныеКавычки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранированиеСимволов", ЭкранированиеСимволовJSON.Нет);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьУгловыеСкобки", Ложь);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьРазделителиСтрок", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьАмперсанд", Ложь);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьОдинарныеКавычки", Ложь);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьСлеш", Ложь);
	
	Возврат ПараметрыЗаписиJSONПоУмолчанию;
	
КонецФункции


Процедура ЗаполнитьДополнительныеДанные(ДополнительныеПараметры, ПараметрыЗапроса, Данные, Json)

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("ПараметрыЗапроса") Тогда
		ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("Данные") Тогда
		ДополнительныеПараметры.Вставить("Данные", Данные);
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("Json") Тогда
		ДополнительныеПараметры.Вставить("Json", Json);
	КонецЕсли;

КонецПроцедуры

// Когда-нибудь в платформе сделают паузу и это можно будет выкинуть
//


Процедура Приостановить(ДлительностьОстановкиВСекундах)

	Если ДлительностьОстановкиВСекундах < 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяУниверсальнаяДата();
	ЖдатьДо = ТекущаяДата + ДлительностьОстановкиВСекундах;
	
	// BSLLS:UsingHardcodeNetworkAddress-off
	ЛокальныйХост = "127.0.0.0";
	КакойНибудьСвободныйПорт = 56476;
	// BSLLS:UsingHardcodeNetworkAddress-on
	Пока ТекущаяДата < ЖдатьДо Цикл
		Таймаут = ЖдатьДо - ТекущаяДата;
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Попытка
			Соединение = Новый HTTPСоединение(
				ЛокальныйХост, КакойНибудьСвободныйПорт, Неопределено, Неопределено, Неопределено, Таймаут);
			Соединение.Получить(Новый HTTPЗапрос("/does_not_matter"));
		Исключение
			РеальныйТаймаут = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
		КонецПопытки;
		МинимальныйТаймаутВМиллисекундах = 1000;
		Если РеальныйТаймаут < МинимальныйТаймаутВМиллисекундах Тогда
			ВызватьИсключение(НСтр("ru = 'Процедура Приостановить не работает должным образом'"));
		КонецЕсли;
		ТекущаяДата = ТекущаяУниверсальнаяДата();
	КонецЦикла;
	
КонецПроцедуры


Процедура АС_PDF_СозданиеКнопкиШтампаПрограммно(Форма) Экспорт
	
	СтруктураПоискаЭлементов = Новый Структура();
	СтруктураПоискаЭлементов.Вставить("ФайлыКонтекстноеМеню", Неопределено);
	СтруктураПоискаЭлементов.Вставить("КонтекстноеМенюФайлыГруппаШтрихкоды", Неопределено);
	СтруктураПоискаЭлементов.Вставить("ФайлыСозданиеКонтекстноеМеню", Неопределено);
	СтруктураПоискаЭлементов.Вставить("КонтекстноеМенюФайлыГруппаШтрихкодыСоздание", Неопределено);
	СтруктураПоискаЭлементов.Вставить("ГруппаКоманды", Неопределено);
	СтруктураПоискаЭлементов.Вставить("ФормаШтрихкоды", Неопределено);
	СтруктураПоискаЭлементов.Вставить("ФайлыСозданиеКоманднаяПанель", Неопределено);
	СтруктураПоискаЭлементов.Вставить("ФормаШтрихкодыСоздание", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаЭлементов, Форма.Элементы);
	
	СтруктураПоискаКартинки = Новый Структура();
	СтруктураПоискаКартинки.Вставить("АС_Штамп", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоискаКартинки, БиблиотекаКартинок);

	Если СтруктураПоискаКартинки = Неопределено Тогда
		Сообщить("Возможно, изменилась конфигурация. Отсутствует картинка АС_Штамп в библиотеке картинок. Возможны ошибки в работе сервиса PDF");
	КонецЕсли;
	
	СозданиеКомандДляШтампа(Форма);
	
	ОшибкаФормирования = Ложь;
	
	//ТЧ Файлы - ПКМ
	Если СтруктураПоискаЭлементов.ФайлыКонтекстноеМеню <> Неопределено И СтруктураПоискаЭлементов.КонтекстноеМенюФайлыГруппаШтрихкоды <> Неопределено Тогда
		АС_PDF_КнопкаШтампирование = Форма.Элементы.Вставить("АС_PDF_Штампирование", Тип("КнопкаФормы"), Форма.Элементы.ФайлыКонтекстноеМеню, Форма.Элементы.КонтекстноеМенюФайлыГруппаШтрихкоды);
		АС_PDF_КнопкаШтампирование.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		АС_PDF_КнопкаШтампирование.ИмяКоманды = "AC_PDF_ПоставитьШтамп";	
		АС_PDF_КнопкаШтампирование.Заголовок = "Установить регистрационный штамп";           
		АС_PDF_КнопкаШтампирование.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_PDF_КнопкаШтампирование.РасширеннаяПодсказка.Заголовок = "Установить регистрационный штамп";
		Если СтруктураПоискаКартинки <> Неопределено Тогда
			АС_PDF_КнопкаШтампирование.Картинка = БиблиотекаКартинок.АС_Штамп; 
		КонецЕсли;
	Иначе
		ОшибкаФормирования = Истина;	
	КонецЕсли;
	
	//ТЧ Файлы создание - ПКМ
	Если СтруктураПоискаЭлементов.ФайлыСозданиеКонтекстноеМеню <> Неопределено И СтруктураПоискаЭлементов.КонтекстноеМенюФайлыГруппаШтрихкодыСоздание <> Неопределено Тогда
		АС_PDF_КнопкаШтампированиеСоздание = Форма.Элементы.Вставить("АС_PDF_ШтампированиеСоздание", Тип("КнопкаФормы"), Форма.Элементы.ФайлыСозданиеКонтекстноеМеню, Форма.Элементы.КонтекстноеМенюФайлыГруппаШтрихкодыСоздание);
		АС_PDF_КнопкаШтампированиеСоздание.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		АС_PDF_КнопкаШтампированиеСоздание.ИмяКоманды = "AC_PDF_ПоставитьШтампСоздание";	
		АС_PDF_КнопкаШтампированиеСоздание.Заголовок = "Установить регистрационный штамп";
		АС_PDF_КнопкаШтампированиеСоздание.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_PDF_КнопкаШтампированиеСоздание.РасширеннаяПодсказка.Заголовок = "Установить регистрационный штамп";
		Если СтруктураПоискаКартинки <> Неопределено Тогда
			АС_PDF_КнопкаШтампированиеСоздание.Картинка = БиблиотекаКартинок.АС_Штамп; 	
		КонецЕсли;
	Иначе
		ОшибкаФормирования = Истина;
	КонецЕсли;
	
	//ТЧ Файлы - Командная панель
	Если СтруктураПоискаЭлементов.ГруппаКоманды <> Неопределено И СтруктураПоискаЭлементов.ФормаШтрихкоды <> Неопределено Тогда
		АС_PDF_КнопкаШтампированиеГруппаКоманды = Форма.Элементы.Вставить("АС_PDF_ШтампированиеГруппаКоманды", Тип("КнопкаФормы"), Форма.Элементы.ГруппаКоманды, Форма.Элементы.ФормаШтрихкоды);
		АС_PDF_КнопкаШтампированиеГруппаКоманды.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		АС_PDF_КнопкаШтампированиеГруппаКоманды.ИмяКоманды = "AC_PDF_ПоставитьШтамп";	
		АС_PDF_КнопкаШтампированиеГруппаКоманды.Заголовок = "Установить регистрационный штамп";
		АС_PDF_КнопкаШтампированиеГруппаКоманды.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_PDF_КнопкаШтампированиеГруппаКоманды.РасширеннаяПодсказка.Заголовок = "Установить регистрационный штамп";
		Если СтруктураПоискаКартинки <> Неопределено Тогда
			АС_PDF_КнопкаШтампированиеГруппаКоманды.Картинка = БиблиотекаКартинок.АС_Штамп; 	
		КонецЕсли;
	Иначе
		ОшибкаФормирования = Истина;
	КонецЕсли;


	//ТЧ Файлы создание - Командная панель
	Если СтруктураПоискаЭлементов.ФайлыСозданиеКоманднаяПанель <> Неопределено И СтруктураПоискаЭлементов.ФормаШтрихкодыСоздание <> Неопределено Тогда
		АС_PDF_КнопкаШтампированиеСозданиеЕщёКП = Форма.Элементы.Вставить("АС_PDF_ШтампированиеСозданиеЕщёКП", Тип("КнопкаФормы"), Форма.Элементы.ФайлыСозданиеКоманднаяПанель, Форма.Элементы.ФормаШтрихкодыСоздание);
		АС_PDF_КнопкаШтампированиеСозданиеЕщёКП.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		АС_PDF_КнопкаШтампированиеСозданиеЕщёКП.ИмяКоманды = "AC_PDF_ПоставитьШтампСоздание";	
		АС_PDF_КнопкаШтампированиеСозданиеЕщёКП.Заголовок = "Установить регистрационный штамп";
		АС_PDF_КнопкаШтампированиеСозданиеЕщёКП.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		АС_PDF_КнопкаШтампированиеСозданиеЕщёКП.РасширеннаяПодсказка.Заголовок = "Установить регистрационный штамп";
		Если СтруктураПоискаКартинки <> Неопределено Тогда
			АС_PDF_КнопкаШтампированиеСозданиеЕщёКП.Картинка = БиблиотекаКартинок.АС_Штамп; 	
		КонецЕсли;
	Иначе
		ОшибкаФормирования = Истина;
	КонецЕсли;
	
	Если ОшибкаФормирования Тогда
		ТекстОшибки = "Ошибка формирования программных элементов в сервисе АС PDF для установки штампа. Возможно, изменилась конфигурация или изменились наименования типовых элементов на форме.
		| Пожалуйста, обратитесь к программисту 1С для проверки на форме следующих элементов: ";
		Для Каждого ТекЭлемент Из СтруктураПоискаЭлементов Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(ТекЭлемент.Ключ) + " ";	
			Если ТекЭлемент.Значение <> Неопределено Тогда
				ТекстОшибки = ТекстОшибки + "- найдено на форме.";
			Иначе
				ТекстОшибки = ТекстОшибки + "- отсуствует или изменено разработчиком\обновлением.";
			КонецЕсли;
		КонецЦикла;
		ТекстОшибки = ТекстОшибки + "Сервис по соединению опирается на типовые элементы конфигурации. Сервис не может сломаться без внешнего воздействия.
		| Ошибка могла возникнуть при некорректном дорабатывании формы (не программном) или при обновлении релиза конфигурации.";
		Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
	КонецЕсли;

КонецПроцедуры

Процедура СозданиеКомандДляШтампа(Форма)

	АС_PDF_КомандаШтампированиеСоздание = Форма.Команды.Добавить("AC_PDF_ПоставитьШтампСоздание");
    АС_PDF_КомандаШтампированиеСоздание.Действие = "AC_PDF_УстановитьШтампЧерезHTTPСервисСоздание";
    АС_PDF_КомандаШтампированиеСоздание.Заголовок = "Установить штамп через HTTP сервис (АС)";
	
	АС_PDF_КомандаШтампирование = Форма.Команды.Добавить("AC_PDF_ПоставитьШтамп");
    АС_PDF_КомандаШтампирование.Действие = "AC_PDF_УстановитьШтампЧерезHTTPСервис";
    АС_PDF_КомандаШтампирование.Заголовок = "Установить штамп через HTTP сервис (АС)";
	
КонецПроцедуры

Процедура АС_СозданиеПризнакаШтампаПрограммно(Форма) Экспорт
	
	СтруктураПоискаЭлементов = Новый Структура();
	СтруктураПоискаЭлементов.Вставить("РасширениеКартинка",         Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаЭлементов, Форма.Элементы);
	
	Если СтруктураПоискаЭлементов.РасширениеКартинка <> Неопределено Тогда
		
		АС_PDF_УстановленШтампЭлемент = Форма.Элементы.Добавить("АС_PDF_УстановленШтампЭлемент", Тип("ПолеФормы"), Форма.Элементы.РасширениеКартинка);
		АС_PDF_УстановленШтампЭлемент.Заголовок = "Штамп установлен";
		АС_PDF_УстановленШтампЭлемент.ТолькоПросмотр = Истина;
		АС_PDF_УстановленШтампЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		АС_PDF_УстановленШтампЭлемент.ПутьКДанным = "Объект.АС_УстановленШтамп";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АС_PDF_ПроверитьВозможностьШтампа(СправочникФайл, Форма) Экспорт
	
	СтруктураПоискаЭлементов = Новый Структура();
	СтруктураПоискаЭлементов.Вставить("АС_PDF_Штампирование",                        Неопределено);
	СтруктураПоискаЭлементов.Вставить("АС_PDF_ШтампированиеГруппаКоманды",           Неопределено);
	СтруктураПоискаЭлементов.Вставить("АС_PDF_ШтампированиеСоздание",                Неопределено);
	СтруктураПоискаЭлементов.Вставить("АС_PDF_ШтампированиеСозданиеЕщё",             Неопределено);
	СтруктураПоискаЭлементов.Вставить("КонтекстноеМенюФайлыГруппаШтрихкодыСоздание", Неопределено);
	СтруктураПоискаЭлементов.Вставить("АС_PDF_ШтампированиеСозданиеЕщёКП",           Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаЭлементов, Форма.Элементы);
	
	Для Каждого ТекКоманда Из СтруктураПоискаЭлементов Цикл
		Если ТекКоманда.Значение <> Неопределено Тогда
			Если СправочникФайл = Ложь Тогда
				ТекКоманда.Значение.Доступность = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если РольДоступна("АС_УстановкаРегистрационногоШтампа") ИЛИ РольДоступна("ПолныеПрава") Тогда
				ТекКоманда.Значение.Доступность = ПроверитьДоступность(СправочникФайл);
			Иначе
				ТекКоманда.Значение.Доступность = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьДоступность(СправочникФайл)
	
	Если НЕ ЗначениеЗаполнено(СправочникФайл) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтарыйПутьКФайлу = Строка(СправочникФайл.ТекущаяВерсияПутьКФайлу);
	
	Попытка
		СистемнаяИнфо = Новый СистемнаяИнформация;
		ТипПлатформыСервера = СистемнаяИнфо.ТипПлатформы;
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
			Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			СтарыйТом = Строка(СправочникФайл.ТекущаяВерсияТом.ПолныйПутьWindows);
		Иначе
			СтарыйТом = Строка(СправочникФайл.ТекущаяВерсияТом.ПолныйПутьLinux);
		КонецЕсли;
	Исключение
		Сообщить("Не удалось определить тип ОС для получения тома");
		Возврат Ложь; 	
	КонецПопытки;
		
	СтарыйФайлPDF = Новый Файл(СтарыйТом + СтарыйПутьКФайлу);

	Если НЕ (СтарыйФайлPDF.Расширение = ".pdf" ИЛИ СтарыйФайлPDF.Расширение = "pdf") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СправочникФайл.ПодписанЭП Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область Контрагенты

Процедура КонтрагентыФормаЭлементаСоздатьРеквизитыПрограммно(Форма, Объект) Экспорт
	
	АС_УтверждающийЗаключениеУведомление = Форма.Элементы.Добавить("АС_УтверждающийЗаключениеУведомление", Тип("ПолеФормы"), Форма.Элементы.ГруппаДополнительныеРеквизиты);
	АС_УтверждающийЗаключениеУведомление.Вид = ВидПоляФормы.ПолеВвода;	
	АС_УтверждающийЗаключениеУведомление.Заголовок = "Утверждающий заключение/уведомление";
	АС_УтверждающийЗаключениеУведомление.ПутьКДанным = "Объект.АС_УтверждающийЗаключениеУведомление";
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящиеДокументы

Процедура ИзменитьПодписанаВИсходящемДокументе(Объект, Получатель) Экспорт
	Попытка
		Если ВидИсходящегоДокументаИспользуетсяПодписантом(Объект.ВидДокумента) Тогда
			Контрагент = Получатель;
			Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ЗначениеЗаполнено(Контрагент.АС_УтверждающийЗаключениеУведомление) Тогда 
					Объект.Подписал = Контрагент.АС_УтверждающийЗаключениеУведомление;
					Сообщить("Изменен реквизит ""Подписал"" - """ + Строка(Контрагент.АС_УтверждающийЗаключениеУведомление) + "" "в документе на утверждающего из карточки Контрагента """ + Строка(Контрагент) + """");
				Иначе
					Сообщить("Не заполнен ""Утверждающий"" на карточке контрагента. Реквизит ""Подписал"" не изменен.");
				КонецЕсли;   	
			КонецЕсли;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Общего назначения (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ИсходящиеДокументы,
		,
		ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

Функция ВидИсходящегоДокументаИспользуетсяПодписантом(ВидДокумента)
	
	Попытка
		Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			СтруктураПоиска = Новый Структура("АС_ИзменяетсяПодписант", Неопределено);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВидДокумента);
			Если СтруктураПоиска.АС_ИзменяетсяПодписант <> Неопределено Тогда
				Возврат СтруктураПоиска.АС_ИзменяетсяПодписант;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Исходящие документы: автоподстановка подписанта (АС)",УровеньЖурналаРегистрации.Ошибка,, , ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ВидыИсхДокументовФормаЭлементаСоздатьРеквизитыПрограммно(Форма, Объект) Экспорт
	
	АС_ИзменяетсяПодписант = Форма.Элементы.Добавить("АС_ИзменяетсяПодписант", Тип("ПолеФормы"), Форма.Элементы.Право);
	АС_ИзменяетсяПодписант.Вид = ВидПоляФормы.ПолеФлажка;	
	АС_ИзменяетсяПодписант.Заголовок = "Изменяется утверждающий из карточки Контрагента (АС)";
	АС_ИзменяетсяПодписант.ПутьКДанным = "Объект.АС_ИзменяетсяПодписант";
	АС_ИзменяетсяПодписант.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
КонецПроцедуры

#КонецОбласти

#Область Универсальное

&НаСервере
Функция ПолучитьШаблонПоСсылке(Ссылка, ВозвращатьПредметы = Ложь) Экспорт
	
	Попытка
		Если ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление") ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда;
			СтруктураПоискаБП = Новый Структура("БизнесПроцесс", Ссылка);
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			СтруктураПоискаБП = Новый Структура("БизнесПроцесс", Неопределено);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		СтруктураПоискаШаблонаБП = Новый Структура("Шаблон", Неопределено);
		СтруктураПоискаВладельцаШаблонаБП = Новый Структура("ВладелецШаблона", Неопределено);
		СтруктураПоискаПредметовБП = Новый Структура("Предметы", Неопределено);
		
		Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаБП, Ссылка);	
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаШаблонаБП, СтруктураПоискаБП.БизнесПроцесс);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВладельцаШаблонаБП, СтруктураПоискаШаблонаБП.Шаблон);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПредметовБП, СтруктураПоискаБП.БизнесПроцесс);
		
		СтруктураРезультат = Новый Структура();
		СтруктураРезультат.Вставить("БП", СтруктураПоискаБП.БизнесПроцесс);
		СтруктураРезультат.Вставить("ШаблонБП", СтруктураПоискаШаблонаБП.Шаблон);
		СтруктураРезультат.Вставить("ВладелецШаблонаБП", СтруктураПоискаВладельцаШаблонаБП.ВладелецШаблона);
		Если СтрНайти(ВРег(Строка(ТипЗнч(СтруктураПоискаПредметовБП.Предметы))), "ПРЕДМЕТ") > 0 ТОГДА 
			СтруктураРезультат.Вставить("Предметы", ПоместитьВоВременноеХранилище(СтруктураПоискаПредметовБП.Предметы.Выгрузить()));
		Иначе
			СтруктураРезультат.Вставить("Предметы", ПоместитьВоВременноеХранилище(Новый Массив()));	
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Формирование Голосования (АС)",УровеньЖурналаРегистрации.Ошибка,, , ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Возврат СтруктураРезультат;	
КонецФункции
	
Функция ВыполнитьЗапрос(
	Текст,
	НужныПараметры = Ложь, КоличествоПараметров = 0,
	Параметр1Имя = "", Параметр1Значение = Неопределено,
	Параметр2Имя = "", Параметр2Значение = Неопределено,
	Параметр3Имя = "", Параметр3Значение = Неопределено,
	Параметр4Имя = "", Параметр4Значение = Неопределено,
	Параметр5Имя = "", Параметр5Значение = Неопределено,
	Параметр6Имя = "", Параметр6Значение = Неопределено,
	Параметр7Имя = "", Параметр7Значение = Неопределено,
	Параметр8Имя = "", Параметр8Значение = Неопределено,
	Параметр9Имя = "", Параметр9Значение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Если НужныПараметры Тогда
		Если КоличествоПараметров >= 1 Тогда
			Запрос.УстановитьПараметр(Параметр1Имя, Параметр1Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 2 Тогда
			Запрос.УстановитьПараметр(Параметр2Имя, Параметр2Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 3 Тогда
			Запрос.УстановитьПараметр(Параметр3Имя, Параметр3Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 4 Тогда
			Запрос.УстановитьПараметр(Параметр4Имя, Параметр4Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 5 Тогда
			Запрос.УстановитьПараметр(Параметр4Имя, Параметр5Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 6 Тогда
			Запрос.УстановитьПараметр(Параметр6Имя, Параметр6Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 7 Тогда
			Запрос.УстановитьПараметр(Параметр7Имя, Параметр7Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 8 Тогда
			Запрос.УстановитьПараметр(Параметр8Имя, Параметр8Значение);
		КонецЕсли;
		Если КоличествоПараметров >= 9 Тогда
			Запрос.УстановитьПараметр(Параметр9Имя, Параметр9Значение);
		КонецЕсли;
	КонецЕсли;
	Попытка
		Результат = Запрос.Выполнить();
		Выгрузка = Результат.Выгрузить();
		Выборка  = Результат.Выбрать();
		Возврат Новый Структура("Выгрузка, Выборка", Выгрузка, Выборка);
	Исключение
		ЗаписьЖурналаРегистрации("Выполнение запроса (АС)", 
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции

#КонецОбласти

#Область Мероприятие

//1. Для вида мероприятия "Заседание правления" скрыть две вкладки: Программа, Протокол

//2. Для Комплексного процесса "Заседания правление (заочное)" для этапа процесса 2 "Исполнение (Заполнение опросного листа)" для предмета:
//	"Мероприятие голосование в СЭД (мероприятие)" при добавлении файла пользователями, чтобы они автоматически подписывались ЭП.

//3. Для Комплексного процесса "Заседание правления (заочное)" для этапа процесса 3 "Ознакомление (Ознакомиться с заполненными опросными листами, заполнить Протокол) для предмета
//	"Мероприятие голосование в СЭД (мероприятие)" вывести отдельную табличную часть с файлами из п.2. (Исполнение).

//4. Для комплексного процесса "Заседание правления (очное)" для этапа процесса 2 "Подписание: Подписать протокол" для предмета "Мероприятие голосование в СЭД (мероприятие)" при
//	добавлении файла пользователями, чтобы они автоматически становились подписаны ЭП.

Процедура ПриИзмененииСкрытьЭлементыМероприятие(Объект, Форма) Экспорт
	
	Форма.Элементы.СтраницаПрограмма.Видимость = НЕ Объект.ВидМероприятия.АС_ИспользуетсяДляГолосования;
	Форма.Элементы.СтраницаРешения.Видимость   = НЕ Объект.ВидМероприятия.АС_ИспользуетсяДляГолосования;
	
КонецПроцедуры

Процедура СоздатьСкрытьЭлементыВидМероприятия(Объект, Форма) Экспорт 
	
	АС_ИспользуетсяДляГолосования = Форма.Элементы.Добавить("АС_ИспользуетсяДляГолосования", Тип("ПолеФормы"), Форма.Элементы.ГруппаНастройки);
	АС_ИспользуетсяДляГолосования.Вид = ВидПоляФормы.ПолеФлажка;	
	АС_ИспользуетсяДляГолосования.Заголовок = "Используется для голосования";
	АС_ИспользуетсяДляГолосования.ПутьКДанным = "Объект.АС_ИспользуетсяДляГолосования";
	АС_ИспользуетсяДляГолосования.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	АС_КомплексныйПроцессОчногоЗаседания = Форма.Элементы.Добавить("АС_КомплексныйПроцессОчногоЗаседания", Тип("ПолеФормы"), Форма.Элементы.ГруппаНастройки);
	АС_КомплексныйПроцессОчногоЗаседания.Вид = ВидПоляФормы.ПолеВвода;	
	АС_КомплексныйПроцессОчногоЗаседания.Заголовок = "Комплексный процесс очного заседания";
	АС_КомплексныйПроцессОчногоЗаседания.ПутьКДанным = "Объект.АС_КомплексныйПроцессОчногоЗаседания";
	
	АС_КомплексныйПроцессЗаочногоЗаседания = Форма.Элементы.Добавить("АС_КомплексныйПроцессЗаочногоЗаседания", Тип("ПолеФормы"), Форма.Элементы.ГруппаНастройки);
	АС_КомплексныйПроцессЗаочногоЗаседания.Вид = ВидПоляФормы.ПолеВвода;	
	АС_КомплексныйПроцессЗаочногоЗаседания.Заголовок = "Комплексный процесс заочного заседания";
	АС_КомплексныйПроцессЗаочногоЗаседания.ПутьКДанным = "Объект.АС_КомплексныйПроцессЗаочногоЗаседания";
	
КонецПроцедуры

Функция ПолучитьДоработанныеРеквизитыМероприятия(Знач СтруктураБП = Неопределено, Ссылка = Неопределено) Экспорт
	
	Попытка
		Если СтруктураБП <> Неопределено Тогда
			
			СтруктураБП.Предметы = ПолучитьИзВременногоХранилища(СтруктураБП.Предметы);
			
			Для Каждого ТекПредмет Из СтруктураБП.Предметы Цикл
				Если ТипЗнч(ТекПредмет.Предмет) = Тип("СправочникСсылка.Мероприятия") И ТекПредмет.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
					СтруктураПоискаДоработанныхРеквизитов = Новый Структура("АС_ИспользуетсяДляГолосования, АС_КомплексныйПроцессОчногоЗаседания, АС_КомплексныйПроцессЗаочногоЗаседания",
					Неопределено, Неопределено, Неопределено);
					
					ЗаполнитьЗначенияСвойств(СтруктураПоискаДоработанныхРеквизитов, ТекПредмет.Предмет.ВидМероприятия);
					Если СтруктураПоискаДоработанныхРеквизитов.АС_ИспользуетсяДляГолосования = Истина И
						ЗначениеЗаполнено(СтруктураПоискаДоработанныхРеквизитов.АС_КомплексныйПроцессОчногоЗаседания) И
						ЗначениеЗаполнено(СтруктураПоискаДоработанныхРеквизитов.АС_КомплексныйПроцессЗаочногоЗаседания) Тогда
						Возврат СтруктураПоискаДоработанныхРеквизитов; 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Ссылка <> Неопределено Тогда
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
				СтруктураПоискаДоработанныхРеквизитов = Новый Структура("АС_ИспользуетсяДляГолосования, АС_КомплексныйПроцессОчногоЗаседания, АС_КомплексныйПроцессЗаочногоЗаседания",
				Неопределено, Неопределено, Неопределено);
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДоработанныхРеквизитов, Ссылка.ВидМероприятия);
				Если СтруктураПоискаДоработанныхРеквизитов.АС_ИспользуетсяДляГолосования = Истина И
					ЗначениеЗаполнено(СтруктураПоискаДоработанныхРеквизитов.АС_КомплексныйПроцессОчногоЗаседания) И
					ЗначениеЗаполнено(СтруктураПоискаДоработанныхРеквизитов.АС_КомплексныйПроцессЗаочногоЗаседания) Тогда
					Возврат СтруктураПоискаДоработанныхРеквизитов; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Формирование Голосования (АС)",УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());	
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь; 	
КонецФункции

Функция ПродолжитьСозданиеФайлаНаСервере(ИмяСобытия, Параметр, Источник) Экспорт
	Попытка
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("Владелец") И ТипЗнч(Параметр.Владелец) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
				СтруктураБП = Ложь;
				СтруктураРеквизитов = Ложь;
				
				СтруктураБП = АС_ОбщегоНазначенияСервер.ПолучитьШаблонПоСсылке(Параметр.Владелец);
				
				Если СтруктураБП <> Ложь Тогда
					СтруктураРеквизитов = АС_ОбщегоНазначенияСервер.ПолучитьДоработанныеРеквизитыМероприятия(СтруктураБП);
				КонецЕсли;
				
				Если СтруктураРеквизитов <> Ложь Тогда
					Если СтруктураБП.ВладелецШаблонаБП = СтруктураРеквизитов.АС_КомплексныйПроцессЗаочногоЗаседания Тогда
						Возврат Истина;	
					КонецЕсли;	
				КонецЕсли;
			ИначеЕсли Параметр.Свойство("Владелец") И ТипЗнч(Параметр.Владелец) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
				СтруктураБП = Ложь;
				СтруктураРеквизитов = Ложь;
				
				СтруктураБП = АС_ОбщегоНазначенияСервер.ПолучитьШаблонПоСсылке(Параметр.Владелец);
				
				Если СтруктураБП <> Ложь Тогда
					СтруктураРеквизитов = АС_ОбщегоНазначенияСервер.ПолучитьДоработанныеРеквизитыМероприятия(СтруктураБП);
				КонецЕсли;
				
				Если СтруктураРеквизитов <> Ложь Тогда
					Если СтруктураБП.ВладелецШаблонаБП = СтруктураРеквизитов.АС_КомплексныйПроцессОчногоЗаседания Тогда
						Возврат Истина;	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Формирование Голосования (АС)",УровеньЖурналаРегистрации.Ошибка,Метаданные.БизнесПроцессы.Исполнение, , ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Ложь;
КонецФункции
#КонецОбласти

Процедура ПодписатьФайл(Файл, УникальныйИдентификатор) Экспорт
		
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Файл);
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", ДанныеФайла.Владелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);

	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить("Файл подписан ЭП");
		
КонецПроцедуры

#Область АС_PDF_Штампирование

&НаКлиенте
Процедура AC_PDF_УстановитьШтампЧерезHTTPСервис(Команда)
    АС_PDF_ПередачаВМодуль(Элементы.Файлы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура AC_PDF_УстановитьШтампЧерезHTTPСервисСоздание(Команда)
    АС_PDF_ПередачаВМодуль(Элементы.ФайлыСоздание.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура АС_PDF_ПередачаВМодуль(ТекущиеДанныеФайл)
	
	Если ЭтотОбъект.Объект.Ссылка = Неопределено Тогда
		Сообщить("Нельзя устанавливать штамп на незаписанный документ.");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеФайл <> Неопределено Тогда
		СтруктураПринятияФайла = Новый Структура("Ссылка", Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураПринятияФайла, ТекущиеДанныеФайл);
		Если СтруктураПринятияФайла.Ссылка <> Неопределено И ТипЗнч(СтруктураПринятияФайла.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Результат = АС_PDF_СоединениеССервисомШтампа.АС_PDF_ПоставитьШтамп(ТекущиеДанныеФайл.Ссылка, ЭтотОбъект.Объект.Ссылка);
		КонецЕсли;
	Иначе
		Сообщить("Не выбран файл для печати.");
	КонецЕсли; 
	
	ЗаполнитьСписокФайлов(Истина);
	Элементы.Файлы.Обновить();
	Элементы.ФайлыСоздание.Обновить();
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура АС_PDF_СоединениеССервисомШтампаНаКлиенте(ТекДанные) 
	АС_ОтправитьНаПроверку = Ложь;
	
	Если ТекДанные <> Неопределено Тогда
		СтруктураПринятияФайла = Новый Структура("Ссылка", Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураПринятияФайла, ТекДанные);
		Если СтруктураПринятияФайла.Ссылка <> Неопределено И ТипЗнч(СтруктураПринятияФайла.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			АС_ОтправитьНаПроверку = ТекДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	АС_PDF_СоединениеССервисомШтампаНаСервере(АС_ОтправитьНаПроверку);
КонецПроцедуры

&НаСервере
Процедура АС_PDF_СоединениеССервисомШтампаНаСервере(ТекДанные) 
	АС_PDF_СоединениеССервисомШтампа.АС_PDF_ПроверитьВозможностьШтампа(ТекДанные, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область АС_Связь_С_Сайтом

&НаКлиенте
Процедура АБ_ТипДокументаПриИзменении(Элемент)
	АС_ОФД_ПередачаОбъектаВМодульПриИзмененииВидаТипаДокумента();
КонецПроцедуры

&НаКлиенте
Процедура АС_ОФД_ТипЖалобыПриИзменении(Элемент)
	АС_ОФД_ТипЖалобыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АС_ОФД_ТипЖалобыПриИзмененииНаСервере()
	АС_ОФД.УстановитьПодразделениеПоТипуЖалобы(Объект);
	АС_ОФД.АС_ОФД_ПриИзмененииВидаТипаДокумента(ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура АС_ОФД_ПередачаОбъектаВМодульПриИзмененииВидаТипаДокумента()
	АС_ОФД.АС_ОФД_ПриИзмененииВидаТипаДокумента(ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура AC_ОФД_ПолучитьДанныеПоИНН(Команда)
	Результат = AC_ОФД_ПолучитьДанныеПоИНННаСервере();
	Если Результат.Свойство("Отправитель") И Результат.Отправитель = Ложь Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("НаименованиеКонтрагента", "");
		ПараметрыФормы.Вставить("ИНН", "");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Результат);
		
		ОткрытьФорму("ОбщаяФорма.АС_СозданиеКонтрагента", ПараметрыФормы);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция AC_ОФД_ПолучитьДанныеПоИНННаСервере()
	Результат = АС_ОФД.АС_ОФД_ПолучитьДанныеПоИНН(Объект);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура АС_ОФД_ОбновитьЗапуститьОтложенноеУведомление(Команда)
	АС_ОФД.АС_ОФД_СоздатьОчередьОтправки(Объект.Ссылка,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура АС_ОФД_ОбновитьТаймер(Команда)
	АС_ОФД_ОбновитьТаймерНаСервере();
КонецПроцедуры

&НаСервере
Процедура АС_ОФД_ОбновитьТаймерНаСервере()
	АС_ОФД.АС_ОФД_ОбновитьТаймерНаФорме(ЭтаФорма, Объект);	
КонецПроцедуры

#КонецОбласти
